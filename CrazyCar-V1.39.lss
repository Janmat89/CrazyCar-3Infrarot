
CrazyCar-V1.39.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000025f0  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000013a  00800060  000025f0  000026a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000104  0080019a  0080019a  000027de  2**0
                  ALLOC
  3 .eeprom       000003c2  00810000  00810000  000027de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 00000120  00000000  00000000  00002ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000009b3  00000000  00000000  00002cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000229e  00000000  00000000  00003673  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000093a  00000000  00000000  00005911  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001c50  00000000  00000000  0000624b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000430  00000000  00000000  00007e9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008ad  00000000  00000000  000082cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000702  00000000  00000000  00008b79  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  0000927b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 87 01 	jmp	0x30e	; 0x30e <__vector_13>
      38:	0c 94 b1 01 	jmp	0x362	; 0x362 <__vector_14>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ef       	ldi	r30, 0xF0	; 240
      68:	f5 e2       	ldi	r31, 0x25	; 37
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 39       	cpi	r26, 0x9A	; 154
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	aa e9       	ldi	r26, 0x9A	; 154
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 39       	cpi	r26, 0x9E	; 158
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 8c 00 	call	0x118	; 0x118 <main>
      8a:	0c 94 f6 12 	jmp	0x25ec	; 0x25ec <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <autonomFahren>:


void autonomFahren(void){

	//mod =  Schalterauswertung von s1() und s2() (kann mit einem Kommando überschrieben werden)
	switch(mod){
      92:	80 91 ce 01 	lds	r24, 0x01CE
      96:	81 30       	cpi	r24, 0x01	; 1
      98:	89 f0       	breq	.+34     	; 0xbc <autonomFahren+0x2a>
      9a:	82 30       	cpi	r24, 0x02	; 2
      9c:	1c f4       	brge	.+6      	; 0xa4 <autonomFahren+0x12>
      9e:	88 23       	and	r24, r24
      a0:	31 f0       	breq	.+12     	; 0xae <autonomFahren+0x1c>
      a2:	32 c0       	rjmp	.+100    	; 0x108 <autonomFahren+0x76>
      a4:	82 30       	cpi	r24, 0x02	; 2
      a6:	99 f0       	breq	.+38     	; 0xce <autonomFahren+0x3c>
      a8:	89 30       	cpi	r24, 0x09	; 9
      aa:	71 f5       	brne	.+92     	; 0x108 <autonomFahren+0x76>
      ac:	19 c0       	rjmp	.+50     	; 0xe0 <autonomFahren+0x4e>
		case	0:  	ledPC3(0); ledPC2(0); //nur Terminal Ein- u. Ausgabe
      ae:	80 e0       	ldi	r24, 0x00	; 0
      b0:	0e 94 67 02 	call	0x4ce	; 0x4ce <ledPC3>
      b4:	80 e0       	ldi	r24, 0x00	; 0
      b6:	0e 94 61 02 	call	0x4c2	; 0x4c2 <ledPC2>
      ba:	08 95       	ret
						break;

		case	1:  	ledPC3(1); ledPC2(0); //Fahrzeug faehrt via Software
      bc:	81 e0       	ldi	r24, 0x01	; 1
      be:	0e 94 67 02 	call	0x4ce	; 0x4ce <ledPC3>
      c2:	80 e0       	ldi	r24, 0x00	; 0
      c4:	0e 94 61 02 	call	0x4c2	; 0x4c2 <ledPC2>
						fahren1();
      c8:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <fahren1>
      cc:	08 95       	ret
						break;

		case	2:  	ledPC3(0); ledPC2(1); //Fahrzeug faehrt via Software
      ce:	80 e0       	ldi	r24, 0x00	; 0
      d0:	0e 94 67 02 	call	0x4ce	; 0x4ce <ledPC3>
      d4:	81 e0       	ldi	r24, 0x01	; 1
      d6:	0e 94 61 02 	call	0x4c2	; 0x4c2 <ledPC2>
						fahren2();
      da:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <fahren2>
      de:	08 95       	ret
						break;

		case	9:  	ledPC2_flash(100); ledPC3_flash(100,0);	 //Fahrzeug Stopp
      e0:	84 e6       	ldi	r24, 0x64	; 100
      e2:	0e 94 83 03 	call	0x706	; 0x706 <ledPC2_flash>
      e6:	84 e6       	ldi	r24, 0x64	; 100
      e8:	60 e0       	ldi	r22, 0x00	; 0
      ea:	0e 94 95 03 	call	0x72a	; 0x72a <ledPC3_flash>
						fahr(0);
      ee:	80 e0       	ldi	r24, 0x00	; 0
      f0:	90 e0       	ldi	r25, 0x00	; 0
      f2:	0e 94 83 10 	call	0x2106	; 0x2106 <fahr>
						hspStart=0;					//keine Datenaufzeichung ins EEPROM						
      f6:	10 92 cd 01 	sts	0x01CD, r1
						abtastzeitMAX=0;			//Zyklusmessung zurücksetzen
      fa:	10 92 9d 01 	sts	0x019D, r1
      fe:	10 92 9c 01 	sts	0x019C, r1
						historyDepthPointer=0; 	//neue Datenaufzeichung
     102:	10 92 2d 02 	sts	0x022D, r1
     106:	08 95       	ret
						break;

		default: 	ledPC2_flash(30); ledPC3_flash(30,1); // nichts definiert
     108:	8e e1       	ldi	r24, 0x1E	; 30
     10a:	0e 94 83 03 	call	0x706	; 0x706 <ledPC2_flash>
     10e:	8e e1       	ldi	r24, 0x1E	; 30
     110:	61 e0       	ldi	r22, 0x01	; 1
     112:	0e 94 95 03 	call	0x72a	; 0x72a <ledPC3_flash>
     116:	08 95       	ret

00000118 <main>:
#include "cc-lib.h"

void autonomFahren(void);

int main (void)
{
     118:	1f 93       	push	r17
	initMikroController();     //Initialisierung des Mikrocontrollers
     11a:	0e 94 ab 05 	call	0xb56	; 0xb56 <initMikroController>
	//while(1) { testServo(); }//<== Initialisierung  Servo, 1X <==========

	initServo(912, 808, 696);  //<== Volllinks, Gerade, Vollrechts eintragen, Servo, 1X <==========
     11e:	80 e9       	ldi	r24, 0x90	; 144
     120:	93 e0       	ldi	r25, 0x03	; 3
     122:	68 e2       	ldi	r22, 0x28	; 40
     124:	73 e0       	ldi	r23, 0x03	; 3
     126:	48 eb       	ldi	r20, 0xB8	; 184
     128:	52 e0       	ldi	r21, 0x02	; 2
     12a:	0e 94 67 0f 	call	0x1ece	; 0x1ece <initServo>
	initFahr(30);					// klein anfangen, bis Fahrzeug sicher faehrt
     12e:	8e e1       	ldi	r24, 0x1E	; 30
     130:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <initFahr>

	servo(0);						//Ansteuerung des Servos (GERADEAUS)
     134:	80 e0       	ldi	r24, 0x00	; 0
     136:	90 e0       	ldi	r25, 0x00	; 0
     138:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <servo>
	fahr(0);      					//Ansteuerung des Fahrtenreglers (STOP)
     13c:	80 e0       	ldi	r24, 0x00	; 0
     13e:	90 e0       	ldi	r25, 0x00	; 0
     140:	0e 94 83 10 	call	0x2106	; 0x2106 <fahr>
	
	//Betriebsmod lesen und speichern, Schalter s1() u. s2()
   mod = s1() +  2*s2(); //0=Terminalbetrieb, 1=fahren1(), 2=fahren2(), 3=fahren3()
     144:	0e 94 6d 02 	call	0x4da	; 0x4da <s1>
     148:	18 2f       	mov	r17, r24
     14a:	0e 94 78 02 	call	0x4f0	; 0x4f0 <s2>
     14e:	88 0f       	add	r24, r24
     150:	81 0f       	add	r24, r17
     152:	80 93 ce 01 	sts	0x01CE, r24

	if( s4() == 1 ){				// Datenspeichern und Fahrzeug anhalten nach x Sekunden
     156:	0e 94 90 02 	call	0x520	; 0x520 <s4>
     15a:	18 2f       	mov	r17, r24
     15c:	81 30       	cpi	r24, 0x01	; 1
     15e:	39 f4       	brne	.+14     	; 0x16e <main+0x56>
		ledPB1(1);					//LED PB1 an
     160:	81 e0       	ldi	r24, 0x01	; 1
     162:	0e 94 55 02 	call	0x4aa	; 0x4aa <ledPB1>
		historyDepthPointer=0; 	//neue Datenaufzeichung
     166:	10 92 2d 02 	sts	0x022D, r1
		hspStart=1;					// beginne Speicherung bein naechsten Block
     16a:	10 93 cd 01 	sts	0x01CD, r17

//Endlosschleife mit freier Zykluszeit
	while(1) {

	//Sensordaten einlesen
		analogwertL=adc(0);			// lese Sensor links
     16e:	80 e0       	ldi	r24, 0x00	; 0
     170:	0e 94 43 01 	call	0x286	; 0x286 <adc>
     174:	90 93 44 02 	sts	0x0244, r25
     178:	80 93 43 02 	sts	0x0243, r24
		analogwertR=adc(1);			// lese Sensor rechts
     17c:	81 e0       	ldi	r24, 0x01	; 1
     17e:	0e 94 43 01 	call	0x286	; 0x286 <adc>
     182:	90 93 50 02 	sts	0x0250, r25
     186:	80 93 4f 02 	sts	0x024F, r24
		analogwertV=adc(2);			// lese Sensor vorne
     18a:	82 e0       	ldi	r24, 0x02	; 2
     18c:	0e 94 43 01 	call	0x286	; 0x286 <adc>
     190:	90 93 3a 02 	sts	0x023A, r25
     194:	80 93 39 02 	sts	0x0239, r24
	//	analogwertI=adc(3);			// Sensor Strom
	//	analogwertU=adc(4);			// Sensor Spannung
		analogwertAkku=adc(7);		// lese AkkuSpannung
     198:	87 e0       	ldi	r24, 0x07	; 7
     19a:	0e 94 43 01 	call	0x286	; 0x286 <adc>
     19e:	90 93 34 02 	sts	0x0234, r25
     1a2:	80 93 33 02 	sts	0x0233, r24

//hier erfolgt die Umrechnung der digitalen Abstandswerte
// in den Abstandswert in cm (abstandlinks,abstandrechts,abstandvorne)
// SensorWinkel... als globale Vatiable in global.h definiert
		abstandlinks  = linearisierungAD(analogwertL, SensorWinkelLinks); //<== Eigene Funktion schreiben
     1a6:	80 91 43 02 	lds	r24, 0x0243
     1aa:	90 91 44 02 	lds	r25, 0x0244
     1ae:	66 e4       	ldi	r22, 0x46	; 70
     1b0:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <linearisierungAD>
     1b4:	90 93 36 02 	sts	0x0236, r25
     1b8:	80 93 35 02 	sts	0x0235, r24
		abstandrechts = linearisierungAD(analogwertR, SensorWinkelRechts); //analogwert, cosinusAlpha*100
     1bc:	80 91 4f 02 	lds	r24, 0x024F
     1c0:	90 91 50 02 	lds	r25, 0x0250
     1c4:	66 e4       	ldi	r22, 0x46	; 70
     1c6:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <linearisierungAD>
     1ca:	90 93 3c 02 	sts	0x023C, r25
     1ce:	80 93 3b 02 	sts	0x023B, r24
		abstandvorne  = linearisierungAD(analogwertV, SensorWinkelGeradeaus);
     1d2:	80 91 39 02 	lds	r24, 0x0239
     1d6:	90 91 3a 02 	lds	r25, 0x023A
     1da:	64 e6       	ldi	r22, 0x64	; 100
     1dc:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <linearisierungAD>
     1e0:	90 93 70 02 	sts	0x0270, r25
     1e4:	80 93 6f 02 	sts	0x026F, r24
//		akkuSpannungPruefen(mya);  	// Ist die AkkuSpannung unter dem Grenzwert?

//konstante zeitliche Abarbeitung des Steuerzyklusses
//Abtastzeit wird im Hintergrund mit Timerinterrupt erhöht 
//ABTASTZEIT ist in gobal.h definiert, siehe zyklus.c
		if (abtastzeit>=ABTASTZEIT)
     1e8:	80 91 9a 01 	lds	r24, 0x019A
     1ec:	90 91 9b 01 	lds	r25, 0x019B
     1f0:	84 36       	cpi	r24, 0x64	; 100
     1f2:	91 05       	cpc	r25, r1
     1f4:	08 f4       	brcc	.+2      	; 0x1f8 <main+0xe0>
     1f6:	bb cf       	rjmp	.-138    	; 0x16e <main+0x56>
		{
			abtastzeit=0;             		//abtastzeit auf 0 zurücksetzen
     1f8:	10 92 9b 01 	sts	0x019B, r1
     1fc:	10 92 9a 01 	sts	0x019A, r1
			datenSatzZaehler++;				// Anzahl der digitalisierten Analogwerte, pro Runde +1
     200:	80 91 e6 00 	lds	r24, 0x00E6
     204:	90 91 e7 00 	lds	r25, 0x00E7
     208:	01 96       	adiw	r24, 0x01	; 1
     20a:	90 93 e7 00 	sts	0x00E7, r25
     20e:	80 93 e6 00 	sts	0x00E6, r24
			
			ledSchalterTest();				//<== Eigene Funktion schreiben in myFunktions.c
     212:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <ledSchalterTest>

			autonomFahren();					// eigene Funktion in myFunktions.c: fahren1(), fahren2(), ...
     216:	0e 94 49 00 	call	0x92	; 0x92 <autonomFahren>

			//Wenn s4 gesetzt ist oder Kommando hs, dann fahre solange bis der Datenspeicher voll ist.
			//Dient zur Auswertung der Strecke (Optimierung)
			if (historyDepthPointer >= hisDepth){	// Datenspeicher voll?
     21a:	20 91 2d 02 	lds	r18, 0x022D
     21e:	33 27       	eor	r19, r19
     220:	27 fd       	sbrc	r18, 7
     222:	30 95       	com	r19
     224:	80 91 64 00 	lds	r24, 0x0064
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	28 17       	cp	r18, r24
     22c:	39 07       	cpc	r19, r25
     22e:	34 f0       	brlt	.+12     	; 0x23c <main+0x124>
				fahr(0);      	  							// Fahrtenregler: Stop
     230:	80 e0       	ldi	r24, 0x00	; 0
     232:	90 e0       	ldi	r25, 0x00	; 0
     234:	0e 94 83 10 	call	0x2106	; 0x2106 <fahr>
				mod = 0;										// nur Terminal Ein- u. Ausgabe
     238:	10 92 ce 01 	sts	0x01CE, r1
			}
			datenspeichern();								// LiveDaten zur Analyse verdichten	
     23c:	0e 94 ff 03 	call	0x7fe	; 0x7fe <datenspeichern>
			terminal_aktiv();
     240:	0e 94 ad 03 	call	0x75a	; 0x75a <terminal_aktiv>
			
			if (datenSatzZaehler >= 65000) 
     244:	80 91 e6 00 	lds	r24, 0x00E6
     248:	90 91 e7 00 	lds	r25, 0x00E7
     24c:	88 5e       	subi	r24, 0xE8	; 232
     24e:	9d 4f       	sbci	r25, 0xFD	; 253
     250:	08 f4       	brcc	.+2      	; 0x254 <main+0x13c>
     252:	8d cf       	rjmp	.-230    	; 0x16e <main+0x56>
				datenSatzZaehler = 0;		//Starte neu, wenn die Logzeit > 650 Sekunden
     254:	10 92 e7 00 	sts	0x00E7, r1
     258:	10 92 e6 00 	sts	0x00E6, r1
     25c:	88 cf       	rjmp	.-240    	; 0x16e <main+0x56>

0000025e <pwm_init>:
//Phasen- und Frequenzrichtiger PWM Modus  (Motor)


void pwm_init(void) {
/*set timer counter initial value*/
	TCNT1 = 0 ; 
     25e:	1d bc       	out	0x2d, r1	; 45
     260:	1c bc       	out	0x2c, r1	; 44
	
/*Set TOP value in the ICR1x registers */
	ICR1 = 7143 ;
     262:	87 ee       	ldi	r24, 0xE7	; 231
     264:	9b e1       	ldi	r25, 0x1B	; 27
     266:	97 bd       	out	0x27, r25	; 39
     268:	86 bd       	out	0x26, r24	; 38
	
/*start timer:
prescaler = 8; Non inverted mode in OC1A pin; Phase and Frequency Correct
PWM*/

	TCCR1A |= (1<<COM1A1)|(1<<COM1B1)|(0<<COM1B0);//|(1<<COM1A0) ;
     26a:	8f b5       	in	r24, 0x2f	; 47
     26c:	80 6a       	ori	r24, 0xA0	; 160
     26e:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1<<WGM13)|(1<<CS11);
     270:	8e b5       	in	r24, 0x2e	; 46
     272:	82 61       	ori	r24, 0x12	; 18
     274:	8e bd       	out	0x2e, r24	; 46

}
     276:	08 95       	ret

00000278 <adc_init>:
#include <avr/io.h>
#include <inttypes.h>

void adc_init(void) {
	DDRA = 0x00 ;//PA alle als Eingänge
     278:	1a ba       	out	0x1a, r1	; 26
	PORTA = 0x00 ;//Pull-up-Widerstand wird low gesetzt
     27a:	1b ba       	out	0x1b, r1	; 27

//ADC Initialization
// The following code segment initializes the ADC.

    // AREF = AVcc // Set the internal 2.56 V Voltage Reference
    ADMUX = (1<<REFS1) | (1<<REFS0);
     27c:	80 ec       	ldi	r24, 0xC0	; 192
     27e:	87 b9       	out	0x07, r24	; 7
 
    // ADC Enable and prescaler of 32
    // 8000000/32 = 250000
    ADCSRA = (1<<ADEN)|(1<<ADPS2)|(0<<ADPS1)|(1<<ADPS0);
     280:	85 e8       	ldi	r24, 0x85	; 133
     282:	86 b9       	out	0x06, r24	; 6
}
     284:	08 95       	ret

00000286 <adc>:
{
  // select the corresponding channel 0~7
  // ANDing with 7' will always keep the value
  // of ch between 0 and 7
  ch &= 0b00000111;  // AND operation with 7
  ADMUX = (ADMUX & 0xF8)|ch; // clears the bottom 3 bits before ORing
     286:	97 b1       	in	r25, 0x07	; 7
     288:	87 70       	andi	r24, 0x07	; 7
     28a:	98 7f       	andi	r25, 0xF8	; 248
     28c:	89 2b       	or	r24, r25
     28e:	87 b9       	out	0x07, r24	; 7
     290:	80 e0       	ldi	r24, 0x00	; 0
   uint16_t val = 0;
   uint8_t i;
  for ( i=0; i<4;i++) {
	// start single convertion
	// write 1' to ADSC
	ADCSRA |= (1<<ADSC);
     292:	36 9a       	sbi	0x06, 6	; 6
 
	// wait for conversion to complete
	// ADSC becomes 0' again
	// till then, run loop continuously
	while(ADCSRA & (1<<ADSC));
     294:	36 99       	sbic	0x06, 6	; 6
     296:	fe cf       	rjmp	.-4      	; 0x294 <adc+0xe>
	val+= ADC;
     298:	24 b1       	in	r18, 0x04	; 4
     29a:	35 b1       	in	r19, 0x05	; 5
 
 
  // Store the converted value
   uint16_t val = 0;
   uint8_t i;
  for ( i=0; i<4;i++) {
     29c:	8f 5f       	subi	r24, 0xFF	; 255
     29e:	84 30       	cpi	r24, 0x04	; 4
     2a0:	c1 f7       	brne	.-16     	; 0x292 <adc+0xc>
	while(ADCSRA & (1<<ADSC));
	val+= ADC;
  }
  val/=4;
 
  return (ADC);
     2a2:	24 b1       	in	r18, 0x04	; 4
     2a4:	35 b1       	in	r19, 0x05	; 5
}
     2a6:	c9 01       	movw	r24, r18
     2a8:	08 95       	ret

000002aa <__vector_4>:
#include <avr/io.h>
#include <avr/interrupt.h>

//Freigabe des Timer 2 Interruptes (Comparewert erreicht) eingestellt so das jede 0,1ms ausgeführt wird
ISR( TIMER2_COMP_vect )
{
     2aa:	1f 92       	push	r1
     2ac:	0f 92       	push	r0
     2ae:	0f b6       	in	r0, 0x3f	; 63
     2b0:	0f 92       	push	r0
     2b2:	11 24       	eor	r1, r1
     2b4:	8f 93       	push	r24
     2b6:	9f 93       	push	r25
//	zeitzms++;     
	abtastzeit++;
     2b8:	80 91 9a 01 	lds	r24, 0x019A
     2bc:	90 91 9b 01 	lds	r25, 0x019B
     2c0:	01 96       	adiw	r24, 0x01	; 1
     2c2:	90 93 9b 01 	sts	0x019B, r25
     2c6:	80 93 9a 01 	sts	0x019A, r24
}
     2ca:	9f 91       	pop	r25
     2cc:	8f 91       	pop	r24
     2ce:	0f 90       	pop	r0
     2d0:	0f be       	out	0x3f, r0	; 63
     2d2:	0f 90       	pop	r0
     2d4:	1f 90       	pop	r1
     2d6:	18 95       	reti

000002d8 <init_Timer2>:

//Timer 2 für zyklische Ausführung (alle ms) von Programmen nutzen
void init_Timer2(void)
{
/*set timer counter initial value*/
	TCNT2= 0x00; 
     2d8:	14 bc       	out	0x24, r1	; 36
		
// Timerwert zum Rücksetzen
	OCR2 = 0x66 ;
     2da:	86 e6       	ldi	r24, 0x66	; 102
     2dc:	83 bd       	out	0x23, r24	; 35
	
//  Compare Output Mode mit Prescaler 64|(1<<CS20)
//WGM21 CTC Mode -- CS21 CLKT2s /8 prescaler -- COM2A0  Toggle OC"a on Compare Match 
	TCCR2 |= (1<<WGM01)|(1<<CS21)|(1<<COM20);  //geänder 20.12.07Je vorher WGM01
     2de:	85 b5       	in	r24, 0x25	; 37
     2e0:	8a 61       	ori	r24, 0x1A	; 26
     2e2:	85 bd       	out	0x25, r24	; 37
	//Interrupt für Timer 2 aktivieren
	TIMSK |= (1<<OCIE2);
     2e4:	89 b7       	in	r24, 0x39	; 57
     2e6:	80 68       	ori	r24, 0x80	; 128
     2e8:	89 bf       	out	0x39, r24	; 57
}
     2ea:	08 95       	ret

000002ec <init_pwm>:
uint16_t cnt1_top = 0x07D0;

void init_pwm(void)
{
	/*set timer counter initial value*/
	TCNT1H = 0x00; TCNT1L = 0x00 ;
     2ec:	1d bc       	out	0x2d, r1	; 45
     2ee:	1c bc       	out	0x2c, r1	; 44
	
	/*Set TOP value in the ICR1x registers */
	// Base frequency 2000 Hz
	ICR1H = (uint8_t)(cnt1_top >> 8) ; ICR1L = (uint8_t)cnt1_top ;
     2f0:	90 91 60 00 	lds	r25, 0x0060
     2f4:	80 91 61 00 	lds	r24, 0x0061
     2f8:	87 bd       	out	0x27, r24	; 39
     2fa:	96 bd       	out	0x26, r25	; 38
	
	/*Set timer output compare register auf 0*/
	OCR1AH = 0x00 ; OCR1AL = 0x0 ;
     2fc:	1b bc       	out	0x2b, r1	; 43
     2fe:	1a bc       	out	0x2a, r1	; 42
	
	// Set OCnA/B/C on compare match when counting up
	// Clear OCnA/B/C on compare when counting down
	TCCR1A |= (1<<COM1A1)|(1<<COM1A0)|(1<<COM1B1)|(1<<COM1B0);
     300:	8f b5       	in	r24, 0x2f	; 47
     302:	80 6f       	ori	r24, 0xF0	; 240
     304:	8f bd       	out	0x2f, r24	; 47
	// No Prescaling
	TCCR1B |= (1<<WGM13)|(1<<CS10);
     306:	8e b5       	in	r24, 0x2e	; 46
     308:	81 61       	ori	r24, 0x11	; 17
     30a:	8e bd       	out	0x2e, r24	; 46
}
     30c:	08 95       	ret

0000030e <__vector_13>:
ISR(USART_RXC_vect)
/*************************************************************************
Function: USART Receive Complete interrupt
Purpose:  called when the USART has received a character
**************************************************************************/
{
     30e:	1f 92       	push	r1
     310:	0f 92       	push	r0
     312:	0f b6       	in	r0, 0x3f	; 63
     314:	0f 92       	push	r0
     316:	11 24       	eor	r1, r1
     318:	2f 93       	push	r18
     31a:	8f 93       	push	r24
     31c:	9f 93       	push	r25
     31e:	ef 93       	push	r30
     320:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read USART status register and USART data register */ 
    usr  = USART_STATUS;
     322:	9b b1       	in	r25, 0x0b	; 11
    data = USART_DATA;
     324:	2c b1       	in	r18, 0x0c	; 12
    
    /* */
    lastRxError = (usr & ((1<<FE)|(1<<DOR))) ;
        
    /* calculate buffer index */ 
    tmphead = ( USART_RxHead + 1) & USART_RX_BUFFER_MASK;
     326:	e0 91 1a 02 	lds	r30, 0x021A
     32a:	ef 5f       	subi	r30, 0xFF	; 255
     32c:	ef 71       	andi	r30, 0x1F	; 31
    
    if ( tmphead == USART_RxTail ) {
     32e:	80 91 1b 02 	lds	r24, 0x021B
     332:	e8 17       	cp	r30, r24
     334:	11 f4       	brne	.+4      	; 0x33a <__vector_13+0x2c>
     336:	82 e0       	ldi	r24, 0x02	; 2
     338:	08 c0       	rjmp	.+16     	; 0x34a <__vector_13+0x3c>
    /* read USART status register and USART data register */ 
    usr  = USART_STATUS;
    data = USART_DATA;
    
    /* */
    lastRxError = (usr & ((1<<FE)|(1<<DOR))) ;
     33a:	89 2f       	mov	r24, r25
     33c:	88 71       	andi	r24, 0x18	; 24
    if ( tmphead == USART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = USART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        USART_RxHead = tmphead;
     33e:	e0 93 1a 02 	sts	0x021A, r30
        /* store received data in buffer */
        USART_RxBuf[tmphead] = data;
     342:	f0 e0       	ldi	r31, 0x00	; 0
     344:	e8 50       	subi	r30, 0x08	; 8
     346:	fe 4f       	sbci	r31, 0xFE	; 254
     348:	20 83       	st	Z, r18
    }
    USART_LastRxError = lastRxError;   
     34a:	80 93 1c 02 	sts	0x021C, r24
}
     34e:	ff 91       	pop	r31
     350:	ef 91       	pop	r30
     352:	9f 91       	pop	r25
     354:	8f 91       	pop	r24
     356:	2f 91       	pop	r18
     358:	0f 90       	pop	r0
     35a:	0f be       	out	0x3f, r0	; 63
     35c:	0f 90       	pop	r0
     35e:	1f 90       	pop	r1
     360:	18 95       	reti

00000362 <__vector_14>:
ISR(USART_UDRE_vect)
/*************************************************************************
Function: USART Data Register Empty interrupt
Purpose:  called when the USART is ready to transmit the next byte
**************************************************************************/
{
     362:	1f 92       	push	r1
     364:	0f 92       	push	r0
     366:	0f b6       	in	r0, 0x3f	; 63
     368:	0f 92       	push	r0
     36a:	11 24       	eor	r1, r1
     36c:	8f 93       	push	r24
     36e:	9f 93       	push	r25
     370:	ef 93       	push	r30
     372:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( USART_TxHead != USART_TxTail) {
     374:	90 91 18 02 	lds	r25, 0x0218
     378:	80 91 19 02 	lds	r24, 0x0219
     37c:	98 17       	cp	r25, r24
     37e:	61 f0       	breq	.+24     	; 0x398 <__vector_14+0x36>
        /* calculate and store new buffer index */
        tmptail = (USART_TxTail + 1) & USART_TX_BUFFER_MASK;
     380:	e0 91 19 02 	lds	r30, 0x0219
     384:	ef 5f       	subi	r30, 0xFF	; 255
     386:	ef 71       	andi	r30, 0x1F	; 31
        USART_TxTail = tmptail;
     388:	e0 93 19 02 	sts	0x0219, r30
        /* get one byte from buffer and write it to USART */
        USART_DATA = USART_TxBuf[tmptail];  /* start transmission */
     38c:	f0 e0       	ldi	r31, 0x00	; 0
     38e:	e8 52       	subi	r30, 0x28	; 40
     390:	fe 4f       	sbci	r31, 0xFE	; 254
     392:	80 81       	ld	r24, Z
     394:	8c b9       	out	0x0c, r24	; 12
     396:	01 c0       	rjmp	.+2      	; 0x39a <__vector_14+0x38>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        USART_CONTROL &= ~(1<<USART_UDRIE);
     398:	55 98       	cbi	0x0a, 5	; 10
    }
}
     39a:	ff 91       	pop	r31
     39c:	ef 91       	pop	r30
     39e:	9f 91       	pop	r25
     3a0:	8f 91       	pop	r24
     3a2:	0f 90       	pop	r0
     3a4:	0f be       	out	0x3f, r0	; 63
     3a6:	0f 90       	pop	r0
     3a8:	1f 90       	pop	r1
     3aa:	18 95       	reti

000003ac <uart_init>:
Input:    baudrate using macro USART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
    USART_TxHead = 0;
     3ac:	10 92 18 02 	sts	0x0218, r1
    USART_TxTail = 0;
     3b0:	10 92 19 02 	sts	0x0219, r1
    USART_RxHead = 0;
     3b4:	10 92 1a 02 	sts	0x021A, r1
    USART_RxTail = 0;
     3b8:	10 92 1b 02 	sts	0x021B, r1
    
    /* Set baud rate */
    if ( baudrate & 0x8000 )
     3bc:	97 ff       	sbrs	r25, 7
     3be:	02 c0       	rjmp	.+4      	; 0x3c4 <uart_init+0x18>
    {
    	 USART_STATUS = (1<<U2X);  //Enable 2x speed 
     3c0:	82 e0       	ldi	r24, 0x02	; 2
     3c2:	8b b9       	out	0x0b, r24	; 11
    }
/*
    UBRRH = (unsigned char)(baudrate>>8);
    UBRRL = (unsigned char) baudrate;
*/   
     UBRRH = 00 ;
     3c4:	10 bc       	out	0x20, r1	; 32
    UBRRL = 51 ;
     3c6:	83 e3       	ldi	r24, 0x33	; 51
     3c8:	89 b9       	out	0x09, r24	; 9
   /* Enable USART receiver and transmitter and receive complete interrupt */
    USART_CONTROL = (1<<RXCIE)|(1<<RXEN)|(1<<TXEN);
     3ca:	88 e9       	ldi	r24, 0x98	; 152
     3cc:	8a b9       	out	0x0a, r24	; 10
    
    /* Set frame format: asynchronous, 7-- 8je--  data, odd no-je parity, 1 stop bit */
    
   // UCSRC = (1<<URSEL)|(1<<UPM1)|(1<<UPM0)|(1<<UCSZ1)|(1<<UCSZ0);
         UCSRC = (1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
     3ce:	86 e8       	ldi	r24, 0x86	; 134
     3d0:	80 bd       	out	0x20, r24	; 32
}/* uart_init */
     3d2:	08 95       	ret

000003d4 <uart_getc>:
{    
    unsigned char tmptail;
    unsigned char data;


    if ( USART_RxHead == USART_RxTail ) {
     3d4:	90 91 1a 02 	lds	r25, 0x021A
     3d8:	80 91 1b 02 	lds	r24, 0x021B
     3dc:	98 17       	cp	r25, r24
     3de:	19 f4       	brne	.+6      	; 0x3e6 <uart_getc+0x12>
     3e0:	20 e0       	ldi	r18, 0x00	; 0
     3e2:	31 e0       	ldi	r19, 0x01	; 1
     3e4:	12 c0       	rjmp	.+36     	; 0x40a <uart_getc+0x36>
        return USART_NO_DATA;   /* no data available */
    }
    
    /* calculate /store buffer index */
    tmptail = (USART_RxTail + 1) & USART_RX_BUFFER_MASK;
     3e6:	e0 91 1b 02 	lds	r30, 0x021B
     3ea:	ef 5f       	subi	r30, 0xFF	; 255
     3ec:	ef 71       	andi	r30, 0x1F	; 31
    USART_RxTail = tmptail; 
     3ee:	e0 93 1b 02 	sts	0x021B, r30
    
    /* get data from receive buffer */
    data = USART_RxBuf[tmptail];
     3f2:	f0 e0       	ldi	r31, 0x00	; 0
     3f4:	e8 50       	subi	r30, 0x08	; 8
     3f6:	fe 4f       	sbci	r31, 0xFE	; 254
     3f8:	30 81       	ld	r19, Z
    
    return (USART_LastRxError << 8) + data;
     3fa:	20 91 1c 02 	lds	r18, 0x021C
     3fe:	92 2f       	mov	r25, r18
     400:	80 e0       	ldi	r24, 0x00	; 0
     402:	ac 01       	movw	r20, r24
     404:	43 0f       	add	r20, r19
     406:	51 1d       	adc	r21, r1
     408:	9a 01       	movw	r18, r20

}/* uart_getc */
     40a:	c9 01       	movw	r24, r18
     40c:	08 95       	ret

0000040e <uart_putc>:
Purpose:  write byte to ringbuffer for transmitting via USART
Input:    byte to be transmitted
Returns:  none          
**************************************************************************/
void uart_putc(unsigned char data)
{
     40e:	28 2f       	mov	r18, r24
    unsigned char tmphead;

    
    tmphead  = (USART_TxHead + 1) & USART_TX_BUFFER_MASK;
     410:	90 91 18 02 	lds	r25, 0x0218
     414:	9f 5f       	subi	r25, 0xFF	; 255
     416:	9f 71       	andi	r25, 0x1F	; 31
    
    while ( tmphead == USART_TxTail ){
     418:	80 91 19 02 	lds	r24, 0x0219
     41c:	98 17       	cp	r25, r24
     41e:	e1 f3       	breq	.-8      	; 0x418 <uart_putc+0xa>
        ;/* wait for free space in buffer */
    }
    
    USART_TxBuf[tmphead] = data;
     420:	e9 2f       	mov	r30, r25
     422:	f0 e0       	ldi	r31, 0x00	; 0
     424:	e8 52       	subi	r30, 0x28	; 40
     426:	fe 4f       	sbci	r31, 0xFE	; 254
     428:	20 83       	st	Z, r18
    USART_TxHead = tmphead;
     42a:	90 93 18 02 	sts	0x0218, r25

    /* enable UDRE interrupt */
    USART_CONTROL    |= (1<<USART_UDRIE);
     42e:	55 9a       	sbi	0x0a, 5	; 10

}/* uart_putc */
     430:	08 95       	ret

00000432 <uart_puts>:
Purpose:  transmit string to USART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
     432:	cf 93       	push	r28
     434:	df 93       	push	r29
     436:	ec 01       	movw	r28, r24
     438:	03 c0       	rjmp	.+6      	; 0x440 <uart_puts+0xe>
    while (*s) 
      uart_putc(*s++);
     43a:	21 96       	adiw	r28, 0x01	; 1
     43c:	0e 94 07 02 	call	0x40e	; 0x40e <uart_putc>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
     440:	88 81       	ld	r24, Y
     442:	88 23       	and	r24, r24
     444:	d1 f7       	brne	.-12     	; 0x43a <uart_puts+0x8>
      uart_putc(*s++);

}/* uart_puts */
     446:	df 91       	pop	r29
     448:	cf 91       	pop	r28
     44a:	08 95       	ret

0000044c <uart_puts_p>:
Purpose:  transmit string from program memory to USART
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
     44c:	cf 93       	push	r28
     44e:	df 93       	push	r29
     450:	ec 01       	movw	r28, r24
     452:	02 c0       	rjmp	.+4      	; 0x458 <uart_puts_p+0xc>
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
      uart_putc(c);
     454:	0e 94 07 02 	call	0x40e	; 0x40e <uart_putc>
     458:	fe 01       	movw	r30, r28
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
     45a:	21 96       	adiw	r28, 0x01	; 1
     45c:	84 91       	lpm	r24, Z+
     45e:	88 23       	and	r24, r24
     460:	c9 f7       	brne	.-14     	; 0x454 <uart_puts_p+0x8>
      uart_putc(c);

}/* uart_puts_p */
     462:	df 91       	pop	r29
     464:	cf 91       	pop	r28
     466:	08 95       	ret

00000468 <warte_sekunden>:
	DDRC &=  ~((1 << DDC4) | (1 << DDC5) | (1 << DDC6) | (1 << DDC7)); //Eingaenge Switch
	PORTC |= ( (1<<PC4) | (1<<PC5) | (1<<PC6)| (1<<PC7));  /* Interne Pull-Up fuer beide einschalten */
	
}

void warte_sekunden(int zeit){
     468:	40 e0       	ldi	r20, 0x00	; 0
     46a:	50 e0       	ldi	r21, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     46c:	60 e2       	ldi	r22, 0x20	; 32
     46e:	7e e4       	ldi	r23, 0x4E	; 78
     470:	21 e0       	ldi	r18, 0x01	; 1
     472:	30 e0       	ldi	r19, 0x00	; 0
     474:	fb 01       	movw	r30, r22
     476:	31 97       	sbiw	r30, 0x01	; 1
     478:	f1 f7       	brne	.-4      	; 0x476 <warte_sekunden+0xe>
	// Funktion wartete die angegebene Zeit in Sekunden.
	int k = 0;
	do{
		for(int i = 1; i <= 100; i++){// warte 100 mal 10 ms
     47a:	2f 5f       	subi	r18, 0xFF	; 255
     47c:	3f 4f       	sbci	r19, 0xFF	; 255
     47e:	25 36       	cpi	r18, 0x65	; 101
     480:	31 05       	cpc	r19, r1
     482:	c1 f7       	brne	.-16     	; 0x474 <warte_sekunden+0xc>
			_delay_ms(10);
		}
	}while( ++k < zeit );
     484:	4f 5f       	subi	r20, 0xFF	; 255
     486:	5f 4f       	sbci	r21, 0xFF	; 255
     488:	48 17       	cp	r20, r24
     48a:	59 07       	cpc	r21, r25
     48c:	8c f3       	brlt	.-30     	; 0x470 <warte_sekunden+0x8>
}
     48e:	08 95       	ret

00000490 <warte_ms>:

void warte_ms(int zeit){
     490:	20 e0       	ldi	r18, 0x00	; 0
     492:	30 e0       	ldi	r19, 0x00	; 0
     494:	40 ed       	ldi	r20, 0xD0	; 208
     496:	57 e0       	ldi	r21, 0x07	; 7
     498:	fa 01       	movw	r30, r20
     49a:	31 97       	sbiw	r30, 0x01	; 1
     49c:	f1 f7       	brne	.-4      	; 0x49a <warte_ms+0xa>
	// Funktion wartete die angegebene Zeit in Millisekunden.
	int k = 0;
	do{
		_delay_ms(1); 	// warte mindestens 1 ms
	}while( ++k < zeit );
     49e:	2f 5f       	subi	r18, 0xFF	; 255
     4a0:	3f 4f       	sbci	r19, 0xFF	; 255
     4a2:	28 17       	cp	r18, r24
     4a4:	39 07       	cpc	r19, r25
     4a6:	c4 f3       	brlt	.-16     	; 0x498 <warte_ms+0x8>
}
     4a8:	08 95       	ret

000004aa <ledPB1>:

void ledPB1(int8_t an) {
	if ( an == 0 )	PORTB = PORTB & (~(1<<PB1)); //LED PB1 aus
     4aa:	88 23       	and	r24, r24
     4ac:	11 f4       	brne	.+4      	; 0x4b2 <ledPB1+0x8>
     4ae:	c1 98       	cbi	0x18, 1	; 24
     4b0:	08 95       	ret
	else 				PORTB = PORTB | (1<<PB1);  	//LED PB1 an
     4b2:	c1 9a       	sbi	0x18, 1	; 24
     4b4:	08 95       	ret

000004b6 <ledPB2>:
}
void ledPB2(int8_t an) {
	if ( an == 0 )	PORTB &=  (~(1<<PB2));	//LED PB2 aus, kurze Version
     4b6:	88 23       	and	r24, r24
     4b8:	11 f4       	brne	.+4      	; 0x4be <ledPB2+0x8>
     4ba:	c2 98       	cbi	0x18, 2	; 24
     4bc:	08 95       	ret
	else 				PORTB |= (1<<PB2);		//LED PB2 an, kurze Version
     4be:	c2 9a       	sbi	0x18, 2	; 24
     4c0:	08 95       	ret

000004c2 <ledPC2>:
}
void ledPC2(int8_t an) {
	if ( an == 0 )	PORTC &=  (~(1<<PC2));	//LED PC2 aus
     4c2:	88 23       	and	r24, r24
     4c4:	11 f4       	brne	.+4      	; 0x4ca <ledPC2+0x8>
     4c6:	aa 98       	cbi	0x15, 2	; 21
     4c8:	08 95       	ret
	else 				PORTC |= (1<<PC2);		//LED PC2 an
     4ca:	aa 9a       	sbi	0x15, 2	; 21
     4cc:	08 95       	ret

000004ce <ledPC3>:
}
void ledPC3(int8_t an) {
	if ( an == 0 )	PORTC &=  (~(1<<PC3));	//LED PC3 aus
     4ce:	88 23       	and	r24, r24
     4d0:	11 f4       	brne	.+4      	; 0x4d6 <ledPC3+0x8>
     4d2:	ab 98       	cbi	0x15, 3	; 21
     4d4:	08 95       	ret
	else 				PORTC |= (1<<PC3);		//LED PC3 an
     4d6:	ab 9a       	sbi	0x15, 3	; 21
     4d8:	08 95       	ret

000004da <s1>:
}

int8_t s1(void) {
	return ((PINC & (0x1 << PINC7)) ^ (0x1 << PINC7)) >> PINC7; } //Schalter 1,PC7,PIN 29
     4da:	83 b3       	in	r24, 0x13	; 19
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	80 95       	com	r24
     4e0:	90 95       	com	r25
     4e2:	80 78       	andi	r24, 0x80	; 128
     4e4:	90 70       	andi	r25, 0x00	; 0
     4e6:	88 0f       	add	r24, r24
     4e8:	89 2f       	mov	r24, r25
     4ea:	88 1f       	adc	r24, r24
     4ec:	99 0b       	sbc	r25, r25
     4ee:	08 95       	ret

000004f0 <s2>:
int8_t s2(void) {
	return ((PINC & (0x1 << PINC6)) ^ (0x1 << PINC6)) >> PINC6; } //Schalter 2,PC6,PIN 28
     4f0:	83 b3       	in	r24, 0x13	; 19
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	80 95       	com	r24
     4f6:	90 95       	com	r25
     4f8:	80 74       	andi	r24, 0x40	; 64
     4fa:	90 70       	andi	r25, 0x00	; 0
     4fc:	36 e0       	ldi	r19, 0x06	; 6
     4fe:	95 95       	asr	r25
     500:	87 95       	ror	r24
     502:	3a 95       	dec	r19
     504:	e1 f7       	brne	.-8      	; 0x4fe <s2+0xe>
     506:	08 95       	ret

00000508 <s3>:
int8_t s3(void) {
	return ((PINC & (0x1 << PINC5)) ^ (0x1 << PINC5)) >> PINC5; } //Schalter 3,PC5,PIN 27
     508:	83 b3       	in	r24, 0x13	; 19
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	80 95       	com	r24
     50e:	90 95       	com	r25
     510:	80 72       	andi	r24, 0x20	; 32
     512:	90 70       	andi	r25, 0x00	; 0
     514:	45 e0       	ldi	r20, 0x05	; 5
     516:	95 95       	asr	r25
     518:	87 95       	ror	r24
     51a:	4a 95       	dec	r20
     51c:	e1 f7       	brne	.-8      	; 0x516 <s3+0xe>
     51e:	08 95       	ret

00000520 <s4>:
int8_t s4(void) {
	return ((PINC & (0x1 << PINC4)) ^ (0x1 << PINC4)) >> PINC4; } //Schalter 4,PC4,PIN 26
     520:	83 b3       	in	r24, 0x13	; 19
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	80 95       	com	r24
     526:	90 95       	com	r25
     528:	80 71       	andi	r24, 0x10	; 16
     52a:	90 70       	andi	r25, 0x00	; 0
     52c:	54 e0       	ldi	r21, 0x04	; 4
     52e:	95 95       	asr	r25
     530:	87 95       	ror	r24
     532:	5a 95       	dec	r21
     534:	e1 f7       	brne	.-8      	; 0x52e <s4+0xe>
     536:	08 95       	ret

00000538 <mittelWerteBerechnen>:

void mittelWerteBerechnen(void){ 
     538:	af 92       	push	r10
     53a:	bf 92       	push	r11
     53c:	cf 92       	push	r12
     53e:	df 92       	push	r13
     540:	ff 92       	push	r15
     542:	0f 93       	push	r16
     544:	1f 93       	push	r17
     546:	cf 93       	push	r28
     548:	df 93       	push	r29

	//Aufsummieren der Analogwerte
	historyAverageL = historyAverageL + analogwertL;
     54a:	20 91 43 02 	lds	r18, 0x0243
     54e:	30 91 44 02 	lds	r19, 0x0244
     552:	80 91 1d 02 	lds	r24, 0x021D
     556:	90 91 1e 02 	lds	r25, 0x021E
     55a:	28 0f       	add	r18, r24
     55c:	39 1f       	adc	r19, r25
     55e:	30 93 1e 02 	sts	0x021E, r19
     562:	20 93 1d 02 	sts	0x021D, r18
	historyAverageR = historyAverageR + analogwertR;
     566:	e0 91 4f 02 	lds	r30, 0x024F
     56a:	f0 91 50 02 	lds	r31, 0x0250
     56e:	80 91 1f 02 	lds	r24, 0x021F
     572:	90 91 20 02 	lds	r25, 0x0220
     576:	e8 0f       	add	r30, r24
     578:	f9 1f       	adc	r31, r25
     57a:	f0 93 20 02 	sts	0x0220, r31
     57e:	e0 93 1f 02 	sts	0x021F, r30
	historyAverageV = historyAverageV + analogwertV;
     582:	c0 91 39 02 	lds	r28, 0x0239
     586:	d0 91 3a 02 	lds	r29, 0x023A
     58a:	80 91 21 02 	lds	r24, 0x0221
     58e:	90 91 22 02 	lds	r25, 0x0222
     592:	c8 0f       	add	r28, r24
     594:	d9 1f       	adc	r29, r25
     596:	d0 93 22 02 	sts	0x0222, r29
     59a:	c0 93 21 02 	sts	0x0221, r28
	historyAverageS  = historyAverageS  + OCR1A;
     59e:	ca b4       	in	r12, 0x2a	; 42
     5a0:	db b4       	in	r13, 0x2b	; 43
     5a2:	80 91 23 02 	lds	r24, 0x0223
     5a6:	90 91 24 02 	lds	r25, 0x0224
     5aa:	c8 0e       	add	r12, r24
     5ac:	d9 1e       	adc	r13, r25
     5ae:	d0 92 24 02 	sts	0x0224, r13
     5b2:	c0 92 23 02 	sts	0x0223, r12
	historyAverageFR = historyAverageFR + OCR1B;
     5b6:	a8 b4       	in	r10, 0x28	; 40
     5b8:	b9 b4       	in	r11, 0x29	; 41
     5ba:	80 91 25 02 	lds	r24, 0x0225
     5be:	90 91 26 02 	lds	r25, 0x0226
     5c2:	a8 0e       	add	r10, r24
     5c4:	b9 1e       	adc	r11, r25
     5c6:	b0 92 26 02 	sts	0x0226, r11
     5ca:	a0 92 25 02 	sts	0x0225, r10

	if ( !(datenSatzZaehler % MWERTE)){
     5ce:	80 91 e6 00 	lds	r24, 0x00E6
     5d2:	90 91 e7 00 	lds	r25, 0x00E7
     5d6:	6a e0       	ldi	r22, 0x0A	; 10
     5d8:	70 e0       	ldi	r23, 0x00	; 0
     5da:	0e 94 4c 11 	call	0x2298	; 0x2298 <__udivmodhi4>
     5de:	89 2b       	or	r24, r25
     5e0:	09 f0       	breq	.+2      	; 0x5e4 <mittelWerteBerechnen+0xac>
     5e2:	63 c0       	rjmp	.+198    	; 0x6aa <mittelWerteBerechnen+0x172>
		OutHL = historyAverageL / MWERTE; // Mittelwerte bilden und
     5e4:	c9 01       	movw	r24, r18
     5e6:	6a e0       	ldi	r22, 0x0A	; 10
     5e8:	70 e0       	ldi	r23, 0x00	; 0
     5ea:	0e 94 4c 11 	call	0x2298	; 0x2298 <__udivmodhi4>
     5ee:	06 2f       	mov	r16, r22
     5f0:	f7 2e       	mov	r15, r23
     5f2:	60 93 aa 01 	sts	0x01AA, r22
     5f6:	70 93 ab 01 	sts	0x01AB, r23
		OutHR = historyAverageR / MWERTE; // 10ms X 	MWERTE merken
     5fa:	cf 01       	movw	r24, r30
     5fc:	6a e0       	ldi	r22, 0x0A	; 10
     5fe:	70 e0       	ldi	r23, 0x00	; 0
     600:	0e 94 4c 11 	call	0x2298	; 0x2298 <__udivmodhi4>
     604:	f6 2f       	mov	r31, r22
     606:	17 2f       	mov	r17, r23
     608:	60 93 ac 01 	sts	0x01AC, r22
     60c:	70 93 ad 01 	sts	0x01AD, r23
		OutHV = historyAverageV / MWERTE;
     610:	ce 01       	movw	r24, r28
     612:	6a e0       	ldi	r22, 0x0A	; 10
     614:	70 e0       	ldi	r23, 0x00	; 0
     616:	0e 94 4c 11 	call	0x2298	; 0x2298 <__udivmodhi4>
     61a:	46 2f       	mov	r20, r22
     61c:	e7 2f       	mov	r30, r23
     61e:	60 93 ae 01 	sts	0x01AE, r22
     622:	70 93 af 01 	sts	0x01AF, r23
		OutHS  = historyAverageS / MWERTE;
     626:	c6 01       	movw	r24, r12
     628:	6a e0       	ldi	r22, 0x0A	; 10
     62a:	70 e0       	ldi	r23, 0x00	; 0
     62c:	0e 94 4c 11 	call	0x2298	; 0x2298 <__udivmodhi4>
     630:	9b 01       	movw	r18, r22
     632:	60 93 b0 01 	sts	0x01B0, r22
     636:	30 93 b1 01 	sts	0x01B1, r19
		OutHFR = historyAverageFR / MWERTE;
     63a:	c5 01       	movw	r24, r10
     63c:	6a e0       	ldi	r22, 0x0A	; 10
     63e:	70 e0       	ldi	r23, 0x00	; 0
     640:	0e 94 4c 11 	call	0x2298	; 0x2298 <__udivmodhi4>
     644:	60 93 b2 01 	sts	0x01B2, r22
     648:	70 93 b3 01 	sts	0x01B3, r23

		hAL.Word = OutHL; //Werte in union speichern
     64c:	00 93 92 02 	sts	0x0292, r16
     650:	f0 92 93 02 	sts	0x0293, r15
		hAR.Word = OutHR; //Vorbereitung fuer EEMEM schreiben
     654:	f0 93 96 02 	sts	0x0296, r31
     658:	10 93 97 02 	sts	0x0297, r17
		hAV.Word = OutHV;
     65c:	40 93 8e 02 	sts	0x028E, r20
     660:	e0 93 8f 02 	sts	0x028F, r30
		hAS.Word = OutHS;
     664:	20 93 8a 02 	sts	0x028A, r18
     668:	30 93 8b 02 	sts	0x028B, r19
		hAFR.Word = OutHFR;
     66c:	60 93 94 02 	sts	0x0294, r22
     670:	70 93 95 02 	sts	0x0295, r23

		historyAverageL = 0; // MittelwertSpeicher zurücksetzen
     674:	10 92 1e 02 	sts	0x021E, r1
     678:	10 92 1d 02 	sts	0x021D, r1
		historyAverageR = 0;
     67c:	10 92 20 02 	sts	0x0220, r1
     680:	10 92 1f 02 	sts	0x021F, r1
		historyAverageV = 0;
     684:	10 92 22 02 	sts	0x0222, r1
     688:	10 92 21 02 	sts	0x0221, r1
		historyAverageS  = 0;
     68c:	10 92 24 02 	sts	0x0224, r1
     690:	10 92 23 02 	sts	0x0223, r1
		historyAverageFR = 0;
     694:	10 92 26 02 	sts	0x0226, r1
     698:	10 92 25 02 	sts	0x0225, r1

		//Wenn  hspStart == 1, beginne die Speicherung von Daten ins EEPROM
		if (hspStart == 1) hspStart++; 
     69c:	80 91 cd 01 	lds	r24, 0x01CD
     6a0:	81 30       	cpi	r24, 0x01	; 1
     6a2:	19 f4       	brne	.+6      	; 0x6aa <mittelWerteBerechnen+0x172>
     6a4:	82 e0       	ldi	r24, 0x02	; 2
     6a6:	80 93 cd 01 	sts	0x01CD, r24
	}
}
     6aa:	df 91       	pop	r29
     6ac:	cf 91       	pop	r28
     6ae:	1f 91       	pop	r17
     6b0:	0f 91       	pop	r16
     6b2:	ff 90       	pop	r15
     6b4:	df 90       	pop	r13
     6b6:	cf 90       	pop	r12
     6b8:	bf 90       	pop	r11
     6ba:	af 90       	pop	r10
     6bc:	08 95       	ret

000006be <ledPB1_flash>:
		history = 0;				//Ausgabe der Aufzeichung fertig
		logOnOff = 0;				//Keine weiter Ausgaben
		abtastzeitMAX = wert; 	//alter Wert zurückschreiben
	}
}
void ledPB1_flash(uint8_t flash_time){
     6be:	28 2f       	mov	r18, r24
	if ((datenSatzZaehler % flash_time) > (flash_time/2) ) // Blickfrequenz
     6c0:	80 91 e6 00 	lds	r24, 0x00E6
     6c4:	90 91 e7 00 	lds	r25, 0x00E7
     6c8:	62 2f       	mov	r22, r18
     6ca:	70 e0       	ldi	r23, 0x00	; 0
     6cc:	0e 94 4c 11 	call	0x2298	; 0x2298 <__udivmodhi4>
     6d0:	26 95       	lsr	r18
     6d2:	30 e0       	ldi	r19, 0x00	; 0
     6d4:	28 17       	cp	r18, r24
     6d6:	39 07       	cpc	r19, r25
     6d8:	10 f4       	brcc	.+4      	; 0x6de <ledPB1_flash+0x20>
	}while( ++k < zeit );
}

void ledPB1(int8_t an) {
	if ( an == 0 )	PORTB = PORTB & (~(1<<PB1)); //LED PB1 aus
	else 				PORTB = PORTB | (1<<PB1);  	//LED PB1 an
     6da:	c1 9a       	sbi	0x18, 1	; 24
     6dc:	08 95       	ret
		_delay_ms(1); 	// warte mindestens 1 ms
	}while( ++k < zeit );
}

void ledPB1(int8_t an) {
	if ( an == 0 )	PORTB = PORTB & (~(1<<PB1)); //LED PB1 aus
     6de:	c1 98       	cbi	0x18, 1	; 24
     6e0:	08 95       	ret

000006e2 <ledPB2_flash>:
void ledPB1_flash(uint8_t flash_time){
	if ((datenSatzZaehler % flash_time) > (flash_time/2) ) // Blickfrequenz
		ledPB1(1);	//LED PB1 an
		else ledPB1(0);	//LED PB1 aus
}
void ledPB2_flash(uint8_t flash_time){
     6e2:	28 2f       	mov	r18, r24
	if ((datenSatzZaehler % flash_time) > (flash_time/2) ) // Blickfrequenz
     6e4:	80 91 e6 00 	lds	r24, 0x00E6
     6e8:	90 91 e7 00 	lds	r25, 0x00E7
     6ec:	62 2f       	mov	r22, r18
     6ee:	70 e0       	ldi	r23, 0x00	; 0
     6f0:	0e 94 4c 11 	call	0x2298	; 0x2298 <__udivmodhi4>
     6f4:	26 95       	lsr	r18
     6f6:	30 e0       	ldi	r19, 0x00	; 0
     6f8:	28 17       	cp	r18, r24
     6fa:	39 07       	cpc	r19, r25
     6fc:	10 f4       	brcc	.+4      	; 0x702 <ledPB2_flash+0x20>
	if ( an == 0 )	PORTB = PORTB & (~(1<<PB1)); //LED PB1 aus
	else 				PORTB = PORTB | (1<<PB1);  	//LED PB1 an
}
void ledPB2(int8_t an) {
	if ( an == 0 )	PORTB &=  (~(1<<PB2));	//LED PB2 aus, kurze Version
	else 				PORTB |= (1<<PB2);		//LED PB2 an, kurze Version
     6fe:	c2 9a       	sbi	0x18, 2	; 24
     700:	08 95       	ret
void ledPB1(int8_t an) {
	if ( an == 0 )	PORTB = PORTB & (~(1<<PB1)); //LED PB1 aus
	else 				PORTB = PORTB | (1<<PB1);  	//LED PB1 an
}
void ledPB2(int8_t an) {
	if ( an == 0 )	PORTB &=  (~(1<<PB2));	//LED PB2 aus, kurze Version
     702:	c2 98       	cbi	0x18, 2	; 24
     704:	08 95       	ret

00000706 <ledPC2_flash>:
void ledPB2_flash(uint8_t flash_time){
	if ((datenSatzZaehler % flash_time) > (flash_time/2) ) // Blickfrequenz
		ledPB2(1);	//LED PB2 an
		else ledPB2(0);	//LED PB2 aus
}
void ledPC2_flash(uint8_t flash_time){
     706:	28 2f       	mov	r18, r24
	if ((datenSatzZaehler % flash_time) > (flash_time/2) ) // Blickfrequenz
     708:	80 91 e6 00 	lds	r24, 0x00E6
     70c:	90 91 e7 00 	lds	r25, 0x00E7
     710:	62 2f       	mov	r22, r18
     712:	70 e0       	ldi	r23, 0x00	; 0
     714:	0e 94 4c 11 	call	0x2298	; 0x2298 <__udivmodhi4>
     718:	26 95       	lsr	r18
     71a:	30 e0       	ldi	r19, 0x00	; 0
     71c:	28 17       	cp	r18, r24
     71e:	39 07       	cpc	r19, r25
     720:	10 f4       	brcc	.+4      	; 0x726 <ledPC2_flash+0x20>
	if ( an == 0 )	PORTB &=  (~(1<<PB2));	//LED PB2 aus, kurze Version
	else 				PORTB |= (1<<PB2);		//LED PB2 an, kurze Version
}
void ledPC2(int8_t an) {
	if ( an == 0 )	PORTC &=  (~(1<<PC2));	//LED PC2 aus
	else 				PORTC |= (1<<PC2);		//LED PC2 an
     722:	aa 9a       	sbi	0x15, 2	; 21
     724:	08 95       	ret
void ledPB2(int8_t an) {
	if ( an == 0 )	PORTB &=  (~(1<<PB2));	//LED PB2 aus, kurze Version
	else 				PORTB |= (1<<PB2);		//LED PB2 an, kurze Version
}
void ledPC2(int8_t an) {
	if ( an == 0 )	PORTC &=  (~(1<<PC2));	//LED PC2 aus
     726:	aa 98       	cbi	0x15, 2	; 21
     728:	08 95       	ret

0000072a <ledPC3_flash>:
void ledPC2_flash(uint8_t flash_time){
	if ((datenSatzZaehler % flash_time) > (flash_time/2) ) // Blickfrequenz
		ledPC2(1);	//LED PB2 an
		else ledPC2(0);	//LED PB2 aus
}
void ledPC3_flash(uint8_t flash_time,uint8_t invert ){ //10ms x flash_time
     72a:	28 2f       	mov	r18, r24
     72c:	46 2f       	mov	r20, r22
	if ((datenSatzZaehler % flash_time) > (flash_time/2) ) // Blickfrequenz
     72e:	80 91 e6 00 	lds	r24, 0x00E6
     732:	90 91 e7 00 	lds	r25, 0x00E7
     736:	62 2f       	mov	r22, r18
     738:	70 e0       	ldi	r23, 0x00	; 0
     73a:	0e 94 4c 11 	call	0x2298	; 0x2298 <__udivmodhi4>
     73e:	26 95       	lsr	r18
     740:	30 e0       	ldi	r19, 0x00	; 0
     742:	28 17       	cp	r18, r24
     744:	39 07       	cpc	r19, r25
     746:	18 f4       	brcc	.+6      	; 0x74e <ledPC3_flash+0x24>
		if (invert == 0) 	ledPC3(1);	//LED PB2 an
     748:	44 23       	and	r20, r20
     74a:	19 f4       	brne	.+6      	; 0x752 <ledPC3_flash+0x28>
     74c:	04 c0       	rjmp	.+8      	; 0x756 <ledPC3_flash+0x2c>
		else 					ledPC3(0);	//LED PB2 aus
	else
		if (invert == 0) 	ledPC3(0);	//LED PB2 aus
     74e:	44 23       	and	r20, r20
     750:	11 f4       	brne	.+4      	; 0x756 <ledPC3_flash+0x2c>
void ledPC2(int8_t an) {
	if ( an == 0 )	PORTC &=  (~(1<<PC2));	//LED PC2 aus
	else 				PORTC |= (1<<PC2);		//LED PC2 an
}
void ledPC3(int8_t an) {
	if ( an == 0 )	PORTC &=  (~(1<<PC3));	//LED PC3 aus
     752:	ab 98       	cbi	0x15, 3	; 21
     754:	08 95       	ret
	else 				PORTC |= (1<<PC3);		//LED PC3 an
     756:	ab 9a       	sbi	0x15, 3	; 21
     758:	08 95       	ret

0000075a <terminal_aktiv>:
			EEPWriteByte(&historyZzMAX[1],convertUint.Byte[1] );
		}
	}
}
void terminal_aktiv(void){
	eingabeUSB();
     75a:	0e 94 07 0c 	call	0x180e	; 0x180e <eingabeUSB>
	
	if ( logOnOff == 1 ){
     75e:	80 91 c7 01 	lds	r24, 0x01C7
     762:	81 30       	cpi	r24, 0x01	; 1
     764:	19 f4       	brne	.+6      	; 0x76c <terminal_aktiv+0x12>
		ausgabeUSB2(); 			//Log-Datenausgabe
     766:	0e 94 05 09 	call	0x120a	; 0x120a <ausgabeUSB2>
     76a:	06 c0       	rjmp	.+12     	; 0x778 <terminal_aktiv+0x1e>
	}
	else if ( logOffAus == 1) {
     76c:	80 91 c8 01 	lds	r24, 0x01C8
     770:	81 30       	cpi	r24, 0x01	; 1
     772:	11 f4       	brne	.+4      	; 0x778 <terminal_aktiv+0x1e>
		ausgabeUSBlogoff();
     774:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <ausgabeUSBlogoff>
	}

	if( !(datenSatzZaehler % 100) ) abtastzeitZyklus = 0;	//Auf 0 setzen für neuen Zyklus
     778:	80 91 e6 00 	lds	r24, 0x00E6
     77c:	90 91 e7 00 	lds	r25, 0x00E7
     780:	64 e6       	ldi	r22, 0x64	; 100
     782:	70 e0       	ldi	r23, 0x00	; 0
     784:	0e 94 4c 11 	call	0x2298	; 0x2298 <__udivmodhi4>
     788:	89 2b       	or	r24, r25
     78a:	21 f4       	brne	.+8      	; 0x794 <terminal_aktiv+0x3a>
     78c:	10 92 9f 01 	sts	0x019F, r1
     790:	10 92 9e 01 	sts	0x019E, r1
	if (abtastzeit > abtastzeitZyklus) abtastzeitZyklus = abtastzeit; //Max pro MWERTE Zyklen
     794:	20 91 9a 01 	lds	r18, 0x019A
     798:	30 91 9b 01 	lds	r19, 0x019B
     79c:	80 91 9e 01 	lds	r24, 0x019E
     7a0:	90 91 9f 01 	lds	r25, 0x019F
     7a4:	82 17       	cp	r24, r18
     7a6:	93 07       	cpc	r25, r19
     7a8:	20 f4       	brcc	.+8      	; 0x7b2 <terminal_aktiv+0x58>
     7aa:	30 93 9f 01 	sts	0x019F, r19
     7ae:	20 93 9e 01 	sts	0x019E, r18
	if (abtastzeit > abtastzeitMAX) abtastzeitMAX = abtastzeit; //seit Start
     7b2:	80 91 9c 01 	lds	r24, 0x019C
     7b6:	90 91 9d 01 	lds	r25, 0x019D
     7ba:	82 17       	cp	r24, r18
     7bc:	93 07       	cpc	r25, r19
     7be:	20 f4       	brcc	.+8      	; 0x7c8 <terminal_aktiv+0x6e>
     7c0:	30 93 9d 01 	sts	0x019D, r19
     7c4:	20 93 9c 01 	sts	0x019C, r18
	
	if(history == 1) {
     7c8:	80 91 ca 01 	lds	r24, 0x01CA
     7cc:	81 30       	cpi	r24, 0x01	; 1
     7ce:	b1 f4       	brne	.+44     	; 0x7fc <terminal_aktiv+0xa2>
		wert = abtastzeitMAX; 	//alter Wert merken
     7d0:	80 91 9c 01 	lds	r24, 0x019C
     7d4:	90 91 9d 01 	lds	r25, 0x019D
     7d8:	90 93 48 02 	sts	0x0248, r25
     7dc:	80 93 47 02 	sts	0x0247, r24
		ausgabehistory();				
     7e0:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <ausgabehistory>
		history = 0;				//Ausgabe der Aufzeichung fertig
     7e4:	10 92 ca 01 	sts	0x01CA, r1
		logOnOff = 0;				//Keine weiter Ausgaben
     7e8:	10 92 c7 01 	sts	0x01C7, r1
		abtastzeitMAX = wert; 	//alter Wert zurückschreiben
     7ec:	80 91 47 02 	lds	r24, 0x0247
     7f0:	90 91 48 02 	lds	r25, 0x0248
     7f4:	90 93 9d 01 	sts	0x019D, r25
     7f8:	80 93 9c 01 	sts	0x019C, r24
     7fc:	08 95       	ret

000007fe <datenspeichern>:
		//Wenn  hspStart == 1, beginne die Speicherung von Daten ins EEPROM
		if (hspStart == 1) hspStart++; 
	}
}

void datenspeichern(void){  //Nur digitale Werte!
     7fe:	0f 93       	push	r16
     800:	1f 93       	push	r17
     802:	cf 93       	push	r28
     804:	df 93       	push	r29
	mittelWerteBerechnen();			// Mittelwertbildung
     806:	0e 94 9c 02 	call	0x538	; 0x538 <mittelWerteBerechnen>
	
	historyAverageH1 = historyAverageH1 + h1; // Aufsummieren
     80a:	20 91 c0 01 	lds	r18, 0x01C0
     80e:	30 91 c1 01 	lds	r19, 0x01C1
     812:	80 91 27 02 	lds	r24, 0x0227
     816:	90 91 28 02 	lds	r25, 0x0228
     81a:	28 0f       	add	r18, r24
     81c:	39 1f       	adc	r19, r25
     81e:	30 93 28 02 	sts	0x0228, r19
     822:	20 93 27 02 	sts	0x0227, r18
	historyAverageH2 = historyAverageH2 + h2; // 
     826:	c0 91 c2 01 	lds	r28, 0x01C2
     82a:	d0 91 c3 01 	lds	r29, 0x01C3
     82e:	80 91 29 02 	lds	r24, 0x0229
     832:	90 91 2a 02 	lds	r25, 0x022A
     836:	c8 0f       	add	r28, r24
     838:	d9 1f       	adc	r29, r25
     83a:	d0 93 2a 02 	sts	0x022A, r29
     83e:	c0 93 29 02 	sts	0x0229, r28
	historyAverageH3 = historyAverageH3 + h3; // 
     842:	00 91 c4 01 	lds	r16, 0x01C4
     846:	10 91 c5 01 	lds	r17, 0x01C5
     84a:	80 91 2b 02 	lds	r24, 0x022B
     84e:	90 91 2c 02 	lds	r25, 0x022C
     852:	08 0f       	add	r16, r24
     854:	19 1f       	adc	r17, r25
     856:	10 93 2c 02 	sts	0x022C, r17
     85a:	00 93 2b 02 	sts	0x022B, r16
	
	if ( !(datenSatzZaehler % MWERTE)){
     85e:	80 91 e6 00 	lds	r24, 0x00E6
     862:	90 91 e7 00 	lds	r25, 0x00E7
     866:	6a e0       	ldi	r22, 0x0A	; 10
     868:	70 e0       	ldi	r23, 0x00	; 0
     86a:	0e 94 4c 11 	call	0x2298	; 0x2298 <__udivmodhi4>
     86e:	fc 01       	movw	r30, r24
     870:	00 97       	sbiw	r24, 0x00	; 0
     872:	09 f0       	breq	.+2      	; 0x876 <__stack+0x17>
     874:	4b c0       	rjmp	.+150    	; 0x90c <__stack+0xad>
		OutHH1 = historyAverageH1 / MWERTE; // Mittelwerte bilden und
     876:	c9 01       	movw	r24, r18
     878:	6a e0       	ldi	r22, 0x0A	; 10
     87a:	70 e0       	ldi	r23, 0x00	; 0
     87c:	0e 94 60 11 	call	0x22c0	; 0x22c0 <__divmodhi4>
     880:	70 93 b5 01 	sts	0x01B5, r23
     884:	60 93 b4 01 	sts	0x01B4, r22
		OutHH2 = historyAverageH2 / MWERTE; // 10ms X 	MWERTE merken	
     888:	ce 01       	movw	r24, r28
     88a:	6a e0       	ldi	r22, 0x0A	; 10
     88c:	70 e0       	ldi	r23, 0x00	; 0
     88e:	0e 94 60 11 	call	0x22c0	; 0x22c0 <__divmodhi4>
     892:	70 93 b7 01 	sts	0x01B7, r23
     896:	60 93 b6 01 	sts	0x01B6, r22
		OutHH3 = historyAverageH3 / MWERTE; // 
     89a:	c8 01       	movw	r24, r16
     89c:	6a e0       	ldi	r22, 0x0A	; 10
     89e:	70 e0       	ldi	r23, 0x00	; 0
     8a0:	0e 94 60 11 	call	0x22c0	; 0x22c0 <__divmodhi4>
     8a4:	70 93 b9 01 	sts	0x01B9, r23
     8a8:	60 93 b8 01 	sts	0x01B8, r22
	
		hAH1.Word = ausgabe1;	//Werte in union speichern
     8ac:	80 91 d2 01 	lds	r24, 0x01D2
     8b0:	90 91 d3 01 	lds	r25, 0x01D3
     8b4:	90 93 8d 02 	sts	0x028D, r25
     8b8:	80 93 8c 02 	sts	0x028C, r24
		hAH2.Word = ausgabe2;	//Vorbereitung fuer EEMEM schreiben
     8bc:	80 91 d4 01 	lds	r24, 0x01D4
     8c0:	90 91 d5 01 	lds	r25, 0x01D5
     8c4:	90 93 91 02 	sts	0x0291, r25
     8c8:	80 93 90 02 	sts	0x0290, r24
		hAH3.Word = ausgabe3;	
     8cc:	80 91 d6 01 	lds	r24, 0x01D6
     8d0:	90 91 d7 01 	lds	r25, 0x01D7
     8d4:	90 93 99 02 	sts	0x0299, r25
     8d8:	80 93 98 02 	sts	0x0298, r24
		
		historyAverageH1  = 0; // MittelwertSpeicher zurücksetzen
     8dc:	10 92 28 02 	sts	0x0228, r1
     8e0:	10 92 27 02 	sts	0x0227, r1
		historyAverageH2  = 0;
     8e4:	10 92 2a 02 	sts	0x022A, r1
     8e8:	10 92 29 02 	sts	0x0229, r1
		historyAverageH3  = 0;
     8ec:	10 92 2c 02 	sts	0x022C, r1
     8f0:	10 92 2b 02 	sts	0x022B, r1
		h1 = 0;
     8f4:	10 92 c1 01 	sts	0x01C1, r1
     8f8:	10 92 c0 01 	sts	0x01C0, r1
		h2 = 0;
     8fc:	10 92 c3 01 	sts	0x01C3, r1
     900:	10 92 c2 01 	sts	0x01C2, r1
		h3 = 0;
     904:	10 92 c5 01 	sts	0x01C5, r1
     908:	10 92 c4 01 	sts	0x01C4, r1

	}

// Mittelwerte in EEMEM Byteweise speichern,
	if ( (historyDepthPointer < hisDepth) && (hspStart > 1) ){ //old HISTORYDEPTH
     90c:	80 91 2d 02 	lds	r24, 0x022D
     910:	28 2f       	mov	r18, r24
     912:	33 27       	eor	r19, r19
     914:	27 fd       	sbrc	r18, 7
     916:	30 95       	com	r19
     918:	80 91 64 00 	lds	r24, 0x0064
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	28 17       	cp	r18, r24
     920:	39 07       	cpc	r19, r25
     922:	0c f0       	brlt	.+2      	; 0x926 <__stack+0xc7>
     924:	13 c1       	rjmp	.+550    	; 0xb4c <__stack+0x2ed>
     926:	80 91 cd 01 	lds	r24, 0x01CD
     92a:	82 30       	cpi	r24, 0x02	; 2
     92c:	08 f4       	brcc	.+2      	; 0x930 <__stack+0xd1>
     92e:	0e c1       	rjmp	.+540    	; 0xb4c <__stack+0x2ed>

		switch (datenSatzZaehler % MWERTE){
     930:	e4 30       	cpi	r30, 0x04	; 4
     932:	f1 05       	cpc	r31, r1
     934:	09 f4       	brne	.+2      	; 0x938 <__stack+0xd9>
     936:	93 c0       	rjmp	.+294    	; 0xa5e <__stack+0x1ff>
     938:	e5 30       	cpi	r30, 0x05	; 5
     93a:	f1 05       	cpc	r31, r1
     93c:	78 f4       	brcc	.+30     	; 0x95c <__stack+0xfd>
     93e:	e1 30       	cpi	r30, 0x01	; 1
     940:	f1 05       	cpc	r31, r1
     942:	09 f4       	brne	.+2      	; 0x946 <__stack+0xe7>
     944:	3c c0       	rjmp	.+120    	; 0x9be <__stack+0x15f>
     946:	e1 30       	cpi	r30, 0x01	; 1
     948:	f1 05       	cpc	r31, r1
     94a:	f8 f0       	brcs	.+62     	; 0x98a <__stack+0x12b>
     94c:	e2 30       	cpi	r30, 0x02	; 2
     94e:	f1 05       	cpc	r31, r1
     950:	09 f4       	brne	.+2      	; 0x954 <__stack+0xf5>
     952:	51 c0       	rjmp	.+162    	; 0x9f6 <__stack+0x197>
     954:	33 97       	sbiw	r30, 0x03	; 3
     956:	09 f0       	breq	.+2      	; 0x95a <__stack+0xfb>
     958:	db c0       	rjmp	.+438    	; 0xb10 <__stack+0x2b1>
     95a:	67 c0       	rjmp	.+206    	; 0xa2a <__stack+0x1cb>
     95c:	e7 30       	cpi	r30, 0x07	; 7
     95e:	f1 05       	cpc	r31, r1
     960:	09 f4       	brne	.+2      	; 0x964 <__stack+0x105>
     962:	b8 c0       	rjmp	.+368    	; 0xad4 <__stack+0x275>
     964:	e8 30       	cpi	r30, 0x08	; 8
     966:	f1 05       	cpc	r31, r1
     968:	40 f4       	brcc	.+16     	; 0x97a <__stack+0x11b>
     96a:	e5 30       	cpi	r30, 0x05	; 5
     96c:	f1 05       	cpc	r31, r1
     96e:	09 f4       	brne	.+2      	; 0x972 <__stack+0x113>
     970:	90 c0       	rjmp	.+288    	; 0xa92 <__stack+0x233>
     972:	36 97       	sbiw	r30, 0x06	; 6
     974:	09 f0       	breq	.+2      	; 0x978 <__stack+0x119>
     976:	cc c0       	rjmp	.+408    	; 0xb10 <__stack+0x2b1>
     978:	a5 c0       	rjmp	.+330    	; 0xac4 <__stack+0x265>
     97a:	e8 30       	cpi	r30, 0x08	; 8
     97c:	f1 05       	cpc	r31, r1
     97e:	09 f4       	brne	.+2      	; 0x982 <__stack+0x123>
     980:	b1 c0       	rjmp	.+354    	; 0xae4 <__stack+0x285>
     982:	39 97       	sbiw	r30, 0x09	; 9
     984:	09 f0       	breq	.+2      	; 0x988 <__stack+0x129>
     986:	c4 c0       	rjmp	.+392    	; 0xb10 <__stack+0x2b1>
     988:	b5 c0       	rjmp	.+362    	; 0xaf4 <__stack+0x295>
			case 0:	EEPWriteByte(&historyDepthL[historyDepthPointer][0],hAL.Byte[0] );
     98a:	22 0f       	add	r18, r18
     98c:	33 1f       	adc	r19, r19
     98e:	c9 01       	movw	r24, r18
     990:	80 50       	subi	r24, 0x00	; 0
     992:	90 40       	sbci	r25, 0x00	; 0
     994:	60 91 92 02 	lds	r22, 0x0292
     998:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <__eewr_byte_m32>
						if (hmod == '+') //Nur speichen wqenn gewuenscht
     99c:	80 91 62 00 	lds	r24, 0x0062
     9a0:	8b 32       	cpi	r24, 0x2B	; 43
     9a2:	09 f0       	breq	.+2      	; 0x9a6 <__stack+0x147>
     9a4:	b5 c0       	rjmp	.+362    	; 0xb10 <__stack+0x2b1>
						 EEPWriteByte(&historyDepthH1[historyDepthPointer][0],hAH1.Byte[0] );break;
     9a6:	80 91 2d 02 	lds	r24, 0x022D
     9aa:	99 27       	eor	r25, r25
     9ac:	87 fd       	sbrc	r24, 7
     9ae:	90 95       	com	r25
     9b0:	88 0f       	add	r24, r24
     9b2:	99 1f       	adc	r25, r25
     9b4:	86 5a       	subi	r24, 0xA6	; 166
     9b6:	9d 4f       	sbci	r25, 0xFD	; 253
     9b8:	60 91 8c 02 	lds	r22, 0x028C
     9bc:	19 c0       	rjmp	.+50     	; 0x9f0 <__stack+0x191>
						
			case 1:	EEPWriteByte(&historyDepthL[historyDepthPointer][1],hAL.Byte[1] ); 
     9be:	22 0f       	add	r18, r18
     9c0:	33 1f       	adc	r19, r19
     9c2:	c9 01       	movw	r24, r18
     9c4:	8f 5f       	subi	r24, 0xFF	; 255
     9c6:	9f 4f       	sbci	r25, 0xFF	; 255
     9c8:	60 91 93 02 	lds	r22, 0x0293
     9cc:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <__eewr_byte_m32>
						if (hmod == '+') 
     9d0:	80 91 62 00 	lds	r24, 0x0062
     9d4:	8b 32       	cpi	r24, 0x2B	; 43
     9d6:	09 f0       	breq	.+2      	; 0x9da <__stack+0x17b>
     9d8:	9b c0       	rjmp	.+310    	; 0xb10 <__stack+0x2b1>
						 EEPWriteByte(&historyDepthH1[historyDepthPointer][1],hAH1.Byte[1] );break;
     9da:	80 91 2d 02 	lds	r24, 0x022D
     9de:	99 27       	eor	r25, r25
     9e0:	87 fd       	sbrc	r24, 7
     9e2:	90 95       	com	r25
     9e4:	88 0f       	add	r24, r24
     9e6:	99 1f       	adc	r25, r25
     9e8:	85 5a       	subi	r24, 0xA5	; 165
     9ea:	9d 4f       	sbci	r25, 0xFD	; 253
     9ec:	60 91 8d 02 	lds	r22, 0x028D
     9f0:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <__eewr_byte_m32>
     9f4:	8d c0       	rjmp	.+282    	; 0xb10 <__stack+0x2b1>
						
			case 2:	EEPWriteByte(&historyDepthR[historyDepthPointer][0],hAR.Byte[0] );
     9f6:	22 0f       	add	r18, r18
     9f8:	33 1f       	adc	r19, r19
     9fa:	c9 01       	movw	r24, r18
     9fc:	88 58       	subi	r24, 0x88	; 136
     9fe:	9f 4f       	sbci	r25, 0xFF	; 255
     a00:	60 91 96 02 	lds	r22, 0x0296
     a04:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <__eewr_byte_m32>
						if (hmod == '+') 
     a08:	80 91 62 00 	lds	r24, 0x0062
     a0c:	8b 32       	cpi	r24, 0x2B	; 43
     a0e:	09 f0       	breq	.+2      	; 0xa12 <__stack+0x1b3>
     a10:	7f c0       	rjmp	.+254    	; 0xb10 <__stack+0x2b1>
						 EEPWriteByte(&historyDepthH2[historyDepthPointer][0],hAH2.Byte[0] );break;	
     a12:	80 91 2d 02 	lds	r24, 0x022D
     a16:	99 27       	eor	r25, r25
     a18:	87 fd       	sbrc	r24, 7
     a1a:	90 95       	com	r25
     a1c:	88 0f       	add	r24, r24
     a1e:	99 1f       	adc	r25, r25
     a20:	8e 52       	subi	r24, 0x2E	; 46
     a22:	9d 4f       	sbci	r25, 0xFD	; 253
     a24:	60 91 90 02 	lds	r22, 0x0290
     a28:	e3 cf       	rjmp	.-58     	; 0x9f0 <__stack+0x191>
						
			case 3:	EEPWriteByte(&historyDepthR[historyDepthPointer][1],hAR.Byte[1] ); 
     a2a:	22 0f       	add	r18, r18
     a2c:	33 1f       	adc	r19, r19
     a2e:	c9 01       	movw	r24, r18
     a30:	87 58       	subi	r24, 0x87	; 135
     a32:	9f 4f       	sbci	r25, 0xFF	; 255
     a34:	60 91 97 02 	lds	r22, 0x0297
     a38:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <__eewr_byte_m32>
						if (hmod == '+') 
     a3c:	80 91 62 00 	lds	r24, 0x0062
     a40:	8b 32       	cpi	r24, 0x2B	; 43
     a42:	09 f0       	breq	.+2      	; 0xa46 <__stack+0x1e7>
     a44:	65 c0       	rjmp	.+202    	; 0xb10 <__stack+0x2b1>
						 EEPWriteByte(&historyDepthH2[historyDepthPointer][1],hAH2.Byte[1] );break;
     a46:	80 91 2d 02 	lds	r24, 0x022D
     a4a:	99 27       	eor	r25, r25
     a4c:	87 fd       	sbrc	r24, 7
     a4e:	90 95       	com	r25
     a50:	88 0f       	add	r24, r24
     a52:	99 1f       	adc	r25, r25
     a54:	8d 52       	subi	r24, 0x2D	; 45
     a56:	9d 4f       	sbci	r25, 0xFD	; 253
     a58:	60 91 91 02 	lds	r22, 0x0291
     a5c:	c9 cf       	rjmp	.-110    	; 0x9f0 <__stack+0x191>
						
			case 4:	EEPWriteByte(&historyDepthV[historyDepthPointer][0],hAV.Byte[0] );
     a5e:	22 0f       	add	r18, r18
     a60:	33 1f       	adc	r19, r19
     a62:	c9 01       	movw	r24, r18
     a64:	80 51       	subi	r24, 0x10	; 16
     a66:	9f 4f       	sbci	r25, 0xFF	; 255
     a68:	60 91 8e 02 	lds	r22, 0x028E
     a6c:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <__eewr_byte_m32>
						if (hmod == '+') 
     a70:	80 91 62 00 	lds	r24, 0x0062
     a74:	8b 32       	cpi	r24, 0x2B	; 43
     a76:	09 f0       	breq	.+2      	; 0xa7a <__stack+0x21b>
     a78:	4b c0       	rjmp	.+150    	; 0xb10 <__stack+0x2b1>
						 EEPWriteByte(&historyDepthH3[historyDepthPointer][0],hAH3.Byte[0] );break;
     a7a:	80 91 2d 02 	lds	r24, 0x022D
     a7e:	99 27       	eor	r25, r25
     a80:	87 fd       	sbrc	r24, 7
     a82:	90 95       	com	r25
     a84:	88 0f       	add	r24, r24
     a86:	99 1f       	adc	r25, r25
     a88:	86 5b       	subi	r24, 0xB6	; 182
     a8a:	9c 4f       	sbci	r25, 0xFC	; 252
     a8c:	60 91 98 02 	lds	r22, 0x0298
     a90:	af cf       	rjmp	.-162    	; 0x9f0 <__stack+0x191>
						
			case 5:	EEPWriteByte(&historyDepthV[historyDepthPointer][1],hAV.Byte[1] ); 
     a92:	22 0f       	add	r18, r18
     a94:	33 1f       	adc	r19, r19
     a96:	c9 01       	movw	r24, r18
     a98:	8f 50       	subi	r24, 0x0F	; 15
     a9a:	9f 4f       	sbci	r25, 0xFF	; 255
     a9c:	60 91 8f 02 	lds	r22, 0x028F
     aa0:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <__eewr_byte_m32>
						if (hmod == '+') 
     aa4:	80 91 62 00 	lds	r24, 0x0062
     aa8:	8b 32       	cpi	r24, 0x2B	; 43
     aaa:	91 f5       	brne	.+100    	; 0xb10 <__stack+0x2b1>
						 EEPWriteByte(&historyDepthH3[historyDepthPointer][1],hAH3.Byte[1] );break;
     aac:	80 91 2d 02 	lds	r24, 0x022D
     ab0:	99 27       	eor	r25, r25
     ab2:	87 fd       	sbrc	r24, 7
     ab4:	90 95       	com	r25
     ab6:	88 0f       	add	r24, r24
     ab8:	99 1f       	adc	r25, r25
     aba:	85 5b       	subi	r24, 0xB5	; 181
     abc:	9c 4f       	sbci	r25, 0xFC	; 252
     abe:	60 91 99 02 	lds	r22, 0x0299
     ac2:	96 cf       	rjmp	.-212    	; 0x9f0 <__stack+0x191>
						 
			case 6: 	EEPWriteByte(&historyDepthS[historyDepthPointer][0],hAS.Byte[0] );  break;
     ac4:	22 0f       	add	r18, r18
     ac6:	33 1f       	adc	r19, r19
     ac8:	c9 01       	movw	r24, r18
     aca:	88 59       	subi	r24, 0x98	; 152
     acc:	9e 4f       	sbci	r25, 0xFE	; 254
     ace:	60 91 8a 02 	lds	r22, 0x028A
     ad2:	8e cf       	rjmp	.-228    	; 0x9f0 <__stack+0x191>
						
			case 7: 	EEPWriteByte(&historyDepthS[historyDepthPointer][1],hAS.Byte[1] );  break;
     ad4:	22 0f       	add	r18, r18
     ad6:	33 1f       	adc	r19, r19
     ad8:	c9 01       	movw	r24, r18
     ada:	87 59       	subi	r24, 0x97	; 151
     adc:	9e 4f       	sbci	r25, 0xFE	; 254
     ade:	60 91 8b 02 	lds	r22, 0x028B
     ae2:	86 cf       	rjmp	.-244    	; 0x9f0 <__stack+0x191>
			case 8: 	EEPWriteByte(&historyDepthFR[historyDepthPointer][0],hAFR.Byte[0] );break;		
     ae4:	22 0f       	add	r18, r18
     ae6:	33 1f       	adc	r19, r19
     ae8:	c9 01       	movw	r24, r18
     aea:	80 52       	subi	r24, 0x20	; 32
     aec:	9e 4f       	sbci	r25, 0xFE	; 254
     aee:	60 91 94 02 	lds	r22, 0x0294
     af2:	7e cf       	rjmp	.-260    	; 0x9f0 <__stack+0x191>
						
			case 9: 	EEPWriteByte(&historyDepthFR[historyDepthPointer][1],hAFR.Byte[1] );
     af4:	22 0f       	add	r18, r18
     af6:	33 1f       	adc	r19, r19
     af8:	c9 01       	movw	r24, r18
     afa:	8f 51       	subi	r24, 0x1F	; 31
     afc:	9e 4f       	sbci	r25, 0xFE	; 254
     afe:	60 91 95 02 	lds	r22, 0x0295
     b02:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <__eewr_byte_m32>
					//	historyDepthEx3[historyDepthPointer] = hAabtastzeit;
						historyDepthPointer++; break;
     b06:	80 91 2d 02 	lds	r24, 0x022D
     b0a:	8f 5f       	subi	r24, 0xFF	; 255
     b0c:	80 93 2d 02 	sts	0x022D, r24
						
			default: break;
		}
		if (historyDepthPointer == hisDepth) {	//längste Zykluszeit speichern
     b10:	20 91 2d 02 	lds	r18, 0x022D
     b14:	33 27       	eor	r19, r19
     b16:	27 fd       	sbrc	r18, 7
     b18:	30 95       	com	r19
     b1a:	80 91 64 00 	lds	r24, 0x0064
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	28 17       	cp	r18, r24
     b22:	39 07       	cpc	r19, r25
     b24:	99 f4       	brne	.+38     	; 0xb4c <__stack+0x2ed>
			convertUint.Word = abtastzeitMAX;
     b26:	80 91 9c 01 	lds	r24, 0x019C
     b2a:	90 91 9d 01 	lds	r25, 0x019D
     b2e:	68 2f       	mov	r22, r24
     b30:	80 93 45 02 	sts	0x0245, r24
     b34:	90 93 46 02 	sts	0x0246, r25
			EEPWriteByte(&historyZzMAX[0],convertUint.Byte[0] );
     b38:	88 e5       	ldi	r24, 0x58	; 88
     b3a:	92 e0       	ldi	r25, 0x02	; 2
     b3c:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <__eewr_byte_m32>
			EEPWriteByte(&historyZzMAX[1],convertUint.Byte[1] );
     b40:	89 e5       	ldi	r24, 0x59	; 89
     b42:	92 e0       	ldi	r25, 0x02	; 2
     b44:	60 91 46 02 	lds	r22, 0x0246
     b48:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <__eewr_byte_m32>
		}
	}
}
     b4c:	df 91       	pop	r29
     b4e:	cf 91       	pop	r28
     b50:	1f 91       	pop	r17
     b52:	0f 91       	pop	r16
     b54:	08 95       	ret

00000b56 <initMikroController>:
uint8_t historyZzMAX[2]EEMEM;
//uint16_t historyDepthEx3[HISTORYDEPTH];

void initMikroController(void){
    //Ausgänge für Zyklustest
	DDRC |= (1<<PC1) ;
     b56:	a1 9a       	sbi	0x14, 1	; 20

	// PWM Auagaenge fuer Motor und Lenkservo initialisieren
	DDRD |= (1<<PD4)|(1<<PD5)|(1<<PD6);
     b58:	81 b3       	in	r24, 0x11	; 17
     b5a:	80 67       	ori	r24, 0x70	; 112
     b5c:	81 bb       	out	0x11, r24	; 17

	pwm_init() ; 		//PWM Timer initialisieren
     b5e:	0e 94 2f 01 	call	0x25e	; 0x25e <pwm_init>
	adc_init() ; 		//Analogwandler initialisieren
     b62:	0e 94 3c 01 	call	0x278	; 0x278 <adc_init>
	uart_init(9600); 	//serielle Schnittstelle initialisieren
     b66:	80 e8       	ldi	r24, 0x80	; 128
     b68:	95 e2       	ldi	r25, 0x25	; 37
     b6a:	0e 94 d6 01 	call	0x3ac	; 0x3ac <uart_init>
	init_Timer2();   	//Timer für zyklischen Umlauf initialisieren
     b6e:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <init_Timer2>
	sei() ;				//Interrupts freigeben
     b72:	78 94       	sei

	OCR1B = STOP ;		//Geschwindigkeit B(400=schnell rückwärts/700=stop/1000=schnell vorwärts)
     b74:	8c eb       	ldi	r24, 0xBC	; 188
     b76:	92 e0       	ldi	r25, 0x02	; 2
     b78:	99 bd       	out	0x29, r25	; 41
     b7a:	88 bd       	out	0x28, r24	; 40
	OCR1A = GERADEAUS;	//A Lenkung?(750=geradeaus/950=voll rechts/550=voll links)
     b7c:	88 ef       	ldi	r24, 0xF8	; 248
     b7e:	92 e0       	ldi	r25, 0x02	; 2
     b80:	9b bd       	out	0x2b, r25	; 43
     b82:	8a bd       	out	0x2a, r24	; 42

	uart_putc('\r');
     b84:	8d e0       	ldi	r24, 0x0D	; 13
     b86:	0e 94 07 02 	call	0x40e	; 0x40e <uart_putc>
	uart_puts(welcome) ;	// Ausgabe bei Initialisierung des uControllers
     b8a:	86 e6       	ldi	r24, 0x66	; 102
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	0e 94 19 02 	call	0x432	; 0x432 <uart_puts>
	uart_putc('\r');
     b92:	8d e0       	ldi	r24, 0x0D	; 13
     b94:	0e 94 07 02 	call	0x40e	; 0x40e <uart_putc>

	// LEDs
	DDRB |= (1 << DDB1) | (1 << DDB2); //Ausgänge LEDs
     b98:	87 b3       	in	r24, 0x17	; 23
     b9a:	86 60       	ori	r24, 0x06	; 6
     b9c:	87 bb       	out	0x17, r24	; 23
	DDRC |= (1<< DDC2) | (1<<DDC3);		//Ausgänge LEDs
     b9e:	84 b3       	in	r24, 0x14	; 20
     ba0:	8c 60       	ori	r24, 0x0C	; 12
     ba2:	84 bb       	out	0x14, r24	; 20
	DDRC &=  ~((1 << DDC4) | (1 << DDC5) | (1 << DDC6) | (1 << DDC7)); //Eingaenge Switch
     ba4:	84 b3       	in	r24, 0x14	; 20
     ba6:	8f 70       	andi	r24, 0x0F	; 15
     ba8:	84 bb       	out	0x14, r24	; 20
	PORTC |= ( (1<<PC4) | (1<<PC5) | (1<<PC6)| (1<<PC7));  /* Interne Pull-Up fuer beide einschalten */
     baa:	85 b3       	in	r24, 0x15	; 21
     bac:	80 6f       	ori	r24, 0xF0	; 240
     bae:	85 bb       	out	0x15, r24	; 21
	
}
     bb0:	08 95       	ret

00000bb2 <pruefeWerteBereich>:

int pruefeWerteBereich(int unten, int oben, int wert){
//Rückgabe = 1 , wenn wert gößerbzw gleich unten und zuätzlich 
//kleine bzw. gleich oben ist
// 	
	if (( wert >= unten) && (wert <= oben)) return 1;
     bb2:	48 17       	cp	r20, r24
     bb4:	59 07       	cpc	r21, r25
     bb6:	1c f4       	brge	.+6      	; 0xbbe <pruefeWerteBereich+0xc>
     bb8:	20 e0       	ldi	r18, 0x00	; 0
     bba:	30 e0       	ldi	r19, 0x00	; 0
     bbc:	09 c0       	rjmp	.+18     	; 0xbd0 <pruefeWerteBereich+0x1e>
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	64 17       	cp	r22, r20
     bc2:	75 07       	cpc	r23, r21
     bc4:	0c f4       	brge	.+2      	; 0xbc8 <pruefeWerteBereich+0x16>
     bc6:	91 e0       	ldi	r25, 0x01	; 1
     bc8:	81 e0       	ldi	r24, 0x01	; 1
     bca:	98 27       	eor	r25, r24
     bcc:	29 2f       	mov	r18, r25
     bce:	30 e0       	ldi	r19, 0x00	; 0
	else return 0;
}
     bd0:	c9 01       	movw	r24, r18
     bd2:	08 95       	ret

00000bd4 <ausgabeUSBlogoff>:
	uart_putc('\r');
	// abtastzeit=0; //Auf Null setzen
	// abtastzeitMAX=0;
}

void ausgabeUSBlogoff(void){
     bd4:	cf 92       	push	r12
     bd6:	df 92       	push	r13
     bd8:	ef 92       	push	r14
     bda:	ff 92       	push	r15
     bdc:	0f 93       	push	r16
     bde:	1f 93       	push	r17
     be0:	cf 93       	push	r28
     be2:	df 93       	push	r29
	
	if(logOffAus == 1){
     be4:	80 91 c8 01 	lds	r24, 0x01C8
     be8:	81 30       	cpi	r24, 0x01	; 1
     bea:	09 f0       	breq	.+2      	; 0xbee <ausgabeUSBlogoff+0x1a>
     bec:	e3 c0       	rjmp	.+454    	; 0xdb4 <ausgabeUSBlogoff+0x1e0>
		// Ausgabe in verschiedenen Zyklen	
			switch(datenSatzZaehler % (100)){
     bee:	80 91 e6 00 	lds	r24, 0x00E6
     bf2:	90 91 e7 00 	lds	r25, 0x00E7
     bf6:	64 e6       	ldi	r22, 0x64	; 100
     bf8:	70 e0       	ldi	r23, 0x00	; 0
     bfa:	0e 94 4c 11 	call	0x2298	; 0x2298 <__udivmodhi4>
     bfe:	87 31       	cpi	r24, 0x17	; 23
     c00:	91 05       	cpc	r25, r1
     c02:	09 f4       	brne	.+2      	; 0xc06 <ausgabeUSBlogoff+0x32>
     c04:	87 c0       	rjmp	.+270    	; 0xd14 <ausgabeUSBlogoff+0x140>
     c06:	88 31       	cpi	r24, 0x18	; 24
     c08:	91 05       	cpc	r25, r1
     c0a:	30 f5       	brcc	.+76     	; 0xc58 <ausgabeUSBlogoff+0x84>
     c0c:	89 30       	cpi	r24, 0x09	; 9
     c0e:	91 05       	cpc	r25, r1
     c10:	09 f4       	brne	.+2      	; 0xc14 <ausgabeUSBlogoff+0x40>
     c12:	71 c0       	rjmp	.+226    	; 0xcf6 <ausgabeUSBlogoff+0x122>
     c14:	8a 30       	cpi	r24, 0x0A	; 10
     c16:	91 05       	cpc	r25, r1
     c18:	60 f4       	brcc	.+24     	; 0xc32 <ausgabeUSBlogoff+0x5e>
     c1a:	85 30       	cpi	r24, 0x05	; 5
     c1c:	91 05       	cpc	r25, r1
     c1e:	09 f4       	brne	.+2      	; 0xc22 <ausgabeUSBlogoff+0x4e>
     c20:	50 c0       	rjmp	.+160    	; 0xcc2 <ausgabeUSBlogoff+0xee>
     c22:	87 30       	cpi	r24, 0x07	; 7
     c24:	91 05       	cpc	r25, r1
     c26:	09 f4       	brne	.+2      	; 0xc2a <ausgabeUSBlogoff+0x56>
     c28:	55 c0       	rjmp	.+170    	; 0xcd4 <ausgabeUSBlogoff+0x100>
     c2a:	03 97       	sbiw	r24, 0x03	; 3
     c2c:	09 f0       	breq	.+2      	; 0xc30 <ausgabeUSBlogoff+0x5c>
     c2e:	c2 c0       	rjmp	.+388    	; 0xdb4 <ausgabeUSBlogoff+0x1e0>
     c30:	5f c0       	rjmp	.+190    	; 0xcf0 <ausgabeUSBlogoff+0x11c>
     c32:	8d 30       	cpi	r24, 0x0D	; 13
     c34:	91 05       	cpc	r25, r1
     c36:	09 f4       	brne	.+2      	; 0xc3a <ausgabeUSBlogoff+0x66>
     c38:	67 c0       	rjmp	.+206    	; 0xd08 <ausgabeUSBlogoff+0x134>
     c3a:	8e 30       	cpi	r24, 0x0E	; 14
     c3c:	91 05       	cpc	r25, r1
     c3e:	20 f4       	brcc	.+8      	; 0xc48 <ausgabeUSBlogoff+0x74>
     c40:	0b 97       	sbiw	r24, 0x0b	; 11
     c42:	09 f0       	breq	.+2      	; 0xc46 <ausgabeUSBlogoff+0x72>
     c44:	b7 c0       	rjmp	.+366    	; 0xdb4 <ausgabeUSBlogoff+0x1e0>
     c46:	5a c0       	rjmp	.+180    	; 0xcfc <ausgabeUSBlogoff+0x128>
     c48:	8f 30       	cpi	r24, 0x0F	; 15
     c4a:	91 05       	cpc	r25, r1
     c4c:	09 f4       	brne	.+2      	; 0xc50 <ausgabeUSBlogoff+0x7c>
     c4e:	5f c0       	rjmp	.+190    	; 0xd0e <ausgabeUSBlogoff+0x13a>
     c50:	43 97       	sbiw	r24, 0x13	; 19
     c52:	09 f0       	breq	.+2      	; 0xc56 <ausgabeUSBlogoff+0x82>
     c54:	af c0       	rjmp	.+350    	; 0xdb4 <ausgabeUSBlogoff+0x1e0>
     c56:	48 c0       	rjmp	.+144    	; 0xce8 <ausgabeUSBlogoff+0x114>
     c58:	87 32       	cpi	r24, 0x27	; 39
     c5a:	91 05       	cpc	r25, r1
     c5c:	09 f4       	brne	.+2      	; 0xc60 <ausgabeUSBlogoff+0x8c>
     c5e:	6d c0       	rjmp	.+218    	; 0xd3a <ausgabeUSBlogoff+0x166>
     c60:	88 32       	cpi	r24, 0x28	; 40
     c62:	91 05       	cpc	r25, r1
     c64:	60 f4       	brcc	.+24     	; 0xc7e <ausgabeUSBlogoff+0xaa>
     c66:	81 32       	cpi	r24, 0x21	; 33
     c68:	91 05       	cpc	r25, r1
     c6a:	09 f4       	brne	.+2      	; 0xc6e <ausgabeUSBlogoff+0x9a>
     c6c:	61 c0       	rjmp	.+194    	; 0xd30 <ausgabeUSBlogoff+0x15c>
     c6e:	83 32       	cpi	r24, 0x23	; 35
     c70:	91 05       	cpc	r25, r1
     c72:	09 f4       	brne	.+2      	; 0xc76 <ausgabeUSBlogoff+0xa2>
     c74:	3d c0       	rjmp	.+122    	; 0xcf0 <ausgabeUSBlogoff+0x11c>
     c76:	4d 97       	sbiw	r24, 0x1d	; 29
     c78:	09 f0       	breq	.+2      	; 0xc7c <ausgabeUSBlogoff+0xa8>
     c7a:	9c c0       	rjmp	.+312    	; 0xdb4 <ausgabeUSBlogoff+0x1e0>
     c7c:	4e c0       	rjmp	.+156    	; 0xd1a <ausgabeUSBlogoff+0x146>
     c7e:	8f 32       	cpi	r24, 0x2F	; 47
     c80:	91 05       	cpc	r25, r1
     c82:	81 f0       	breq	.+32     	; 0xca4 <ausgabeUSBlogoff+0xd0>
     c84:	80 33       	cpi	r24, 0x30	; 48
     c86:	91 05       	cpc	r25, r1
     c88:	20 f4       	brcc	.+8      	; 0xc92 <ausgabeUSBlogoff+0xbe>
     c8a:	8b 97       	sbiw	r24, 0x2b	; 43
     c8c:	09 f0       	breq	.+2      	; 0xc90 <ausgabeUSBlogoff+0xbc>
     c8e:	92 c0       	rjmp	.+292    	; 0xdb4 <ausgabeUSBlogoff+0x1e0>
     c90:	63 c0       	rjmp	.+198    	; 0xd58 <ausgabeUSBlogoff+0x184>
     c92:	81 33       	cpi	r24, 0x31	; 49
     c94:	91 05       	cpc	r25, r1
     c96:	09 f4       	brne	.+2      	; 0xc9a <ausgabeUSBlogoff+0xc6>
     c98:	87 c0       	rjmp	.+270    	; 0xda8 <ausgabeUSBlogoff+0x1d4>
     c9a:	83 36       	cpi	r24, 0x63	; 99
     c9c:	91 05       	cpc	r25, r1
     c9e:	09 f0       	breq	.+2      	; 0xca2 <ausgabeUSBlogoff+0xce>
     ca0:	89 c0       	rjmp	.+274    	; 0xdb4 <ausgabeUSBlogoff+0x1e0>
     ca2:	86 c0       	rjmp	.+268    	; 0xdb0 <ausgabeUSBlogoff+0x1dc>
								uart_puts(&kommandos[i][0]);
							}; 											break;	
				case 43: for(int i=4; i < 7; i++,uart_puts(", ")){
								uart_puts(&kommandos[i][0]);
							};	break;	
				case 47: for(int i=7; i < anzahl; i++){
     ca4:	80 91 63 00 	lds	r24, 0x0063
     ca8:	e8 2e       	mov	r14, r24
     caa:	ff 24       	eor	r15, r15
     cac:	e7 fc       	sbrc	r14, 7
     cae:	f0 94       	com	r15
								uart_puts(&kommandos[i][0]);
								if (i < (anzahl-1)) uart_puts(", ");
     cb0:	67 01       	movw	r12, r14
     cb2:	08 94       	sec
     cb4:	c1 08       	sbc	r12, r1
     cb6:	d1 08       	sbc	r13, r1
     cb8:	03 ea       	ldi	r16, 0xA3	; 163
     cba:	10 e0       	ldi	r17, 0x00	; 0
     cbc:	c7 e0       	ldi	r28, 0x07	; 7
     cbe:	d0 e0       	ldi	r29, 0x00	; 0
     cc0:	6f c0       	rjmp	.+222    	; 0xda0 <ausgabeUSBlogoff+0x1cc>
	
	if(logOffAus == 1){
		// Ausgabe in verschiedenen Zyklen	
			switch(datenSatzZaehler % (100)){
				case 3: 	uart_puts(tab);										break;
				case 5:  uart_puts(akkuText); uart_puts(gleichText);	break;
     cc2:	8e e7       	ldi	r24, 0x7E	; 126
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	0e 94 19 02 	call	0x432	; 0x432 <uart_puts>
     cca:	83 e8       	ldi	r24, 0x83	; 131
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	0e 94 19 02 	call	0x432	; 0x432 <uart_puts>
     cd2:	70 c0       	rjmp	.+224    	; 0xdb4 <ausgabeUSBlogoff+0x1e0>
				case 7:  itoa(analogwertAkku,texth,10);					
     cd4:	80 91 33 02 	lds	r24, 0x0233
     cd8:	90 91 34 02 	lds	r25, 0x0234
     cdc:	61 e5       	ldi	r22, 0x51	; 81
     cde:	72 e0       	ldi	r23, 0x02	; 2
     ce0:	4a e0       	ldi	r20, 0x0A	; 10
     ce2:	50 e0       	ldi	r21, 0x00	; 0
     ce4:	0e 94 a8 12 	call	0x2550	; 0x2550 <itoa>
							uart_puts(texth); uart_puts(tab);				break;
     ce8:	81 e5       	ldi	r24, 0x51	; 81
     cea:	92 e0       	ldi	r25, 0x02	; 2
     cec:	0e 94 19 02 	call	0x432	; 0x432 <uart_puts>
     cf0:	82 eb       	ldi	r24, 0xB2	; 178
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	ec cf       	rjmp	.-40     	; 0xcce <ausgabeUSBlogoff+0xfa>
				case 9:  uart_puts(modTEXT); uart_puts(gleichText);	break;			
     cf6:	8b ea       	ldi	r24, 0xAB	; 171
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	e5 cf       	rjmp	.-54     	; 0xcc6 <ausgabeUSBlogoff+0xf2>
				case 11: itoa(mod,texth,10);					
     cfc:	80 91 ce 01 	lds	r24, 0x01CE
     d00:	99 27       	eor	r25, r25
     d02:	87 fd       	sbrc	r24, 7
     d04:	90 95       	com	r25
     d06:	ea cf       	rjmp	.-44     	; 0xcdc <ausgabeUSBlogoff+0x108>
							uart_puts(texth); uart_puts(tab);				break;
			
				case 13: uart_puts(freeRAMText);uart_puts(gleichText);break;
     d08:	80 e7       	ldi	r24, 0x70	; 112
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	dc cf       	rjmp	.-72     	; 0xcc6 <ausgabeUSBlogoff+0xf2>
				case 15: itoa(freeRam(),texth,10);		break; // Verbrach von SRAM prüfen;
     d0e:	0e 94 45 10 	call	0x208a	; 0x208a <freeRam>
     d12:	07 c0       	rjmp	.+14     	; 0xd22 <ausgabeUSBlogoff+0x14e>
				case 19: uart_puts(texth); uart_puts(tab);							break;
				case 23: uart_puts(abtastzeitMAXText);uart_puts(gleichText);	break;
     d14:	88 e7       	ldi	r24, 0x78	; 120
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	d6 cf       	rjmp	.-84     	; 0xcc6 <ausgabeUSBlogoff+0xf2>
				case 29: itoa(abtastzeitMAX,texth,10);									break;
     d1a:	80 91 9c 01 	lds	r24, 0x019C
     d1e:	90 91 9d 01 	lds	r25, 0x019D
     d22:	61 e5       	ldi	r22, 0x51	; 81
     d24:	72 e0       	ldi	r23, 0x02	; 2
     d26:	4a e0       	ldi	r20, 0x0A	; 10
     d28:	50 e0       	ldi	r21, 0x00	; 0
     d2a:	0e 94 a8 12 	call	0x2550	; 0x2550 <itoa>
     d2e:	42 c0       	rjmp	.+132    	; 0xdb4 <ausgabeUSBlogoff+0x1e0>
				case 33: uart_puts(texth); uart_putc('\r');							break;
     d30:	81 e5       	ldi	r24, 0x51	; 81
     d32:	92 e0       	ldi	r25, 0x02	; 2
     d34:	0e 94 19 02 	call	0x432	; 0x432 <uart_puts>
     d38:	37 c0       	rjmp	.+110    	; 0xda8 <ausgabeUSBlogoff+0x1d4>
				case 35: uart_puts(tab);													break;
     d3a:	c7 e8       	ldi	r28, 0x87	; 135
     d3c:	d0 e0       	ldi	r29, 0x00	; 0
				case 39: for(int i=0; i < 4; i++,uart_puts(", ")){
								uart_puts(&kommandos[i][0]);
     d3e:	ce 01       	movw	r24, r28
     d40:	0e 94 19 02 	call	0x432	; 0x432 <uart_puts>
				case 19: uart_puts(texth); uart_puts(tab);							break;
				case 23: uart_puts(abtastzeitMAXText);uart_puts(gleichText);	break;
				case 29: itoa(abtastzeitMAX,texth,10);									break;
				case 33: uart_puts(texth); uart_putc('\r');							break;
				case 35: uart_puts(tab);													break;
				case 39: for(int i=0; i < 4; i++,uart_puts(", ")){
     d44:	88 ee       	ldi	r24, 0xE8	; 232
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	0e 94 19 02 	call	0x432	; 0x432 <uart_puts>
     d4c:	24 96       	adiw	r28, 0x04	; 4
     d4e:	80 e0       	ldi	r24, 0x00	; 0
     d50:	c7 39       	cpi	r28, 0x97	; 151
     d52:	d8 07       	cpc	r29, r24
     d54:	a1 f7       	brne	.-24     	; 0xd3e <ausgabeUSBlogoff+0x16a>
     d56:	2e c0       	rjmp	.+92     	; 0xdb4 <ausgabeUSBlogoff+0x1e0>
								uart_puts(&kommandos[i][0]);
							}; 											break;	
				case 43: for(int i=4; i < 7; i++,uart_puts(", ")){
								uart_puts(&kommandos[i][0]);
     d58:	87 e9       	ldi	r24, 0x97	; 151
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	0e 94 19 02 	call	0x432	; 0x432 <uart_puts>
				case 33: uart_puts(texth); uart_putc('\r');							break;
				case 35: uart_puts(tab);													break;
				case 39: for(int i=0; i < 4; i++,uart_puts(", ")){
								uart_puts(&kommandos[i][0]);
							}; 											break;	
				case 43: for(int i=4; i < 7; i++,uart_puts(", ")){
     d60:	88 ee       	ldi	r24, 0xE8	; 232
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	0e 94 19 02 	call	0x432	; 0x432 <uart_puts>
								uart_puts(&kommandos[i][0]);
     d68:	8b e9       	ldi	r24, 0x9B	; 155
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	0e 94 19 02 	call	0x432	; 0x432 <uart_puts>
				case 33: uart_puts(texth); uart_putc('\r');							break;
				case 35: uart_puts(tab);													break;
				case 39: for(int i=0; i < 4; i++,uart_puts(", ")){
								uart_puts(&kommandos[i][0]);
							}; 											break;	
				case 43: for(int i=4; i < 7; i++,uart_puts(", ")){
     d70:	88 ee       	ldi	r24, 0xE8	; 232
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	0e 94 19 02 	call	0x432	; 0x432 <uart_puts>
								uart_puts(&kommandos[i][0]);
     d78:	8f e9       	ldi	r24, 0x9F	; 159
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	0e 94 19 02 	call	0x432	; 0x432 <uart_puts>
				case 33: uart_puts(texth); uart_putc('\r');							break;
				case 35: uart_puts(tab);													break;
				case 39: for(int i=0; i < 4; i++,uart_puts(", ")){
								uart_puts(&kommandos[i][0]);
							}; 											break;	
				case 43: for(int i=4; i < 7; i++,uart_puts(", ")){
     d80:	88 ee       	ldi	r24, 0xE8	; 232
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	a4 cf       	rjmp	.-184    	; 0xcce <ausgabeUSBlogoff+0xfa>
								uart_puts(&kommandos[i][0]);
							};	break;	
				case 47: for(int i=7; i < anzahl; i++){
								uart_puts(&kommandos[i][0]);
     d86:	c8 01       	movw	r24, r16
     d88:	0e 94 19 02 	call	0x432	; 0x432 <uart_puts>
								if (i < (anzahl-1)) uart_puts(", ");
     d8c:	cc 15       	cp	r28, r12
     d8e:	dd 05       	cpc	r29, r13
     d90:	24 f4       	brge	.+8      	; 0xd9a <ausgabeUSBlogoff+0x1c6>
     d92:	88 ee       	ldi	r24, 0xE8	; 232
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	0e 94 19 02 	call	0x432	; 0x432 <uart_puts>
								uart_puts(&kommandos[i][0]);
							}; 											break;	
				case 43: for(int i=4; i < 7; i++,uart_puts(", ")){
								uart_puts(&kommandos[i][0]);
							};	break;	
				case 47: for(int i=7; i < anzahl; i++){
     d9a:	21 96       	adiw	r28, 0x01	; 1
     d9c:	0c 5f       	subi	r16, 0xFC	; 252
     d9e:	1f 4f       	sbci	r17, 0xFF	; 255
     da0:	ce 15       	cp	r28, r14
     da2:	df 05       	cpc	r29, r15
     da4:	84 f3       	brlt	.-32     	; 0xd86 <ausgabeUSBlogoff+0x1b2>
     da6:	06 c0       	rjmp	.+12     	; 0xdb4 <ausgabeUSBlogoff+0x1e0>
								uart_puts(&kommandos[i][0]);
								if (i < (anzahl-1)) uart_puts(", ");
							};	break;
				case 48: ;	break;
				
				case 49: uart_putc('\r');	break;
     da8:	8d e0       	ldi	r24, 0x0D	; 13
     daa:	0e 94 07 02 	call	0x40e	; 0x40e <uart_putc>
     dae:	02 c0       	rjmp	.+4      	; 0xdb4 <ausgabeUSBlogoff+0x1e0>
				case 99: logOffAus = 0;								break; //Ausgabe ausschalten
     db0:	10 92 c8 01 	sts	0x01C8, r1
				default:	break;
			}
	}
}
     db4:	df 91       	pop	r29
     db6:	cf 91       	pop	r28
     db8:	1f 91       	pop	r17
     dba:	0f 91       	pop	r16
     dbc:	ff 90       	pop	r15
     dbe:	ef 90       	pop	r14
     dc0:	df 90       	pop	r13
     dc2:	cf 90       	pop	r12
     dc4:	08 95       	ret

00000dc6 <ausgabehistory>:
			
			logStart=1;
		}	
}

void ausgabehistory(void){
     dc6:	2f 92       	push	r2
     dc8:	3f 92       	push	r3
     dca:	4f 92       	push	r4
     dcc:	5f 92       	push	r5
     dce:	6f 92       	push	r6
     dd0:	7f 92       	push	r7
     dd2:	8f 92       	push	r8
     dd4:	9f 92       	push	r9
     dd6:	af 92       	push	r10
     dd8:	bf 92       	push	r11
     dda:	cf 92       	push	r12
     ddc:	df 92       	push	r13
     dde:	ef 92       	push	r14
     de0:	ff 92       	push	r15
     de2:	0f 93       	push	r16
     de4:	1f 93       	push	r17
     de6:	cf 93       	push	r28
     de8:	df 93       	push	r29
	uart_putc('\r');
     dea:	8d e0       	ldi	r24, 0x0D	; 13
     dec:	0e 94 07 02 	call	0x40e	; 0x40e <uart_putc>
	uart_puts("Historyausgabe: ");
     df0:	8b ee       	ldi	r24, 0xEB	; 235
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	0e 94 19 02 	call	0x432	; 0x432 <uart_puts>
	uart_puts(tab); 
     df8:	82 eb       	ldi	r24, 0xB2	; 178
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	0e 94 19 02 	call	0x432	; 0x432 <uart_puts>
	uart_puts(abtastzeitMAXText); uart_puts(gleichText);
     e00:	88 e7       	ldi	r24, 0x78	; 120
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	0e 94 19 02 	call	0x432	; 0x432 <uart_puts>
     e08:	83 e8       	ldi	r24, 0x83	; 131
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	0e 94 19 02 	call	0x432	; 0x432 <uart_puts>
	
	convertUint.Byte[0] = EEPReadByte(&historyZzMAX[0]);
     e10:	88 e5       	ldi	r24, 0x58	; 88
     e12:	92 e0       	ldi	r25, 0x02	; 2
     e14:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <__eerd_byte_m32>
     e18:	80 93 45 02 	sts	0x0245, r24
	convertUint.Byte[1] = EEPReadByte(&historyZzMAX[1]);					
     e1c:	89 e5       	ldi	r24, 0x59	; 89
     e1e:	92 e0       	ldi	r25, 0x02	; 2
     e20:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <__eerd_byte_m32>
     e24:	80 93 46 02 	sts	0x0246, r24
	itoa(convertUint.Word,texth,10);  
     e28:	80 91 45 02 	lds	r24, 0x0245
     e2c:	90 91 46 02 	lds	r25, 0x0246
     e30:	61 e5       	ldi	r22, 0x51	; 81
     e32:	72 e0       	ldi	r23, 0x02	; 2
     e34:	4a e0       	ldi	r20, 0x0A	; 10
     e36:	50 e0       	ldi	r21, 0x00	; 0
     e38:	0e 94 a8 12 	call	0x2550	; 0x2550 <itoa>
	uart_puts(texth);						
     e3c:	81 e5       	ldi	r24, 0x51	; 81
     e3e:	92 e0       	ldi	r25, 0x02	; 2
     e40:	0e 94 19 02 	call	0x432	; 0x432 <uart_puts>
	uart_putc('\r');
     e44:	8d e0       	ldi	r24, 0x0D	; 13
     e46:	0e 94 07 02 	call	0x40e	; 0x40e <uart_putc>

	uart_puts("\rt in 0,1s\tlinks\tvorne\trechts\tServo\tFahrr");	
     e4a:	8c ef       	ldi	r24, 0xFC	; 252
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	0e 94 19 02 	call	0x432	; 0x432 <uart_puts>
	if (hmod == '+')  uart_puts("\th1\th2\th3");	
     e52:	80 91 62 00 	lds	r24, 0x0062
     e56:	8b 32       	cpi	r24, 0x2B	; 43
     e58:	21 f4       	brne	.+8      	; 0xe62 <ausgabehistory+0x9c>
     e5a:	86 e2       	ldi	r24, 0x26	; 38
     e5c:	91 e0       	ldi	r25, 0x01	; 1
     e5e:	0e 94 19 02 	call	0x432	; 0x432 <uart_puts>
	uart_putc('\r');
     e62:	8d e0       	ldi	r24, 0x0D	; 13
     e64:	0e 94 07 02 	call	0x40e	; 0x40e <uart_putc>
     e68:	20 e0       	ldi	r18, 0x00	; 0
     e6a:	a2 2e       	mov	r10, r18
     e6c:	20 e0       	ldi	r18, 0x00	; 0
     e6e:	b2 2e       	mov	r11, r18
     e70:	15 01       	movw	r2, r10
     e72:	08 94       	sec
     e74:	21 1c       	adc	r2, r1
     e76:	31 1c       	adc	r3, r1
     e78:	90 ef       	ldi	r25, 0xF0	; 240
     e7a:	c9 2e       	mov	r12, r25
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	d9 2e       	mov	r13, r25
     e80:	26 01       	movw	r4, r12
     e82:	08 94       	sec
     e84:	41 1c       	adc	r4, r1
     e86:	51 1c       	adc	r5, r1
     e88:	88 e7       	ldi	r24, 0x78	; 120
     e8a:	e8 2e       	mov	r14, r24
     e8c:	80 e0       	ldi	r24, 0x00	; 0
     e8e:	f8 2e       	mov	r15, r24
     e90:	37 01       	movw	r6, r14
     e92:	08 94       	sec
     e94:	61 1c       	adc	r6, r1
     e96:	71 1c       	adc	r7, r1
     e98:	88 24       	eor	r8, r8
     e9a:	99 24       	eor	r9, r9
     e9c:	00 e0       	ldi	r16, 0x00	; 0
     e9e:	10 e0       	ldi	r17, 0x00	; 0
     ea0:	95 c1       	rjmp	.+810    	; 0x11cc <ausgabehistory+0x406>
	for(int i=0; i < historyDepthPointer; i++){
			
		itoa(i,texth,10);	  // wandle die Ausgabezeit (interger) in acsii um
     ea2:	c4 01       	movw	r24, r8
     ea4:	61 e5       	ldi	r22, 0x51	; 81
     ea6:	72 e0       	ldi	r23, 0x02	; 2
     ea8:	4a e0       	ldi	r20, 0x0A	; 10
     eaa:	50 e0       	ldi	r21, 0x00	; 0
     eac:	0e 94 a8 12 	call	0x2550	; 0x2550 <itoa>
		strcat(texth,tab);  // Text anhaengen
     eb0:	81 e5       	ldi	r24, 0x51	; 81
     eb2:	92 e0       	ldi	r25, 0x02	; 2
     eb4:	62 eb       	ldi	r22, 0xB2	; 178
     eb6:	70 e0       	ldi	r23, 0x00	; 0
     eb8:	0e 94 96 12 	call	0x252c	; 0x252c <strcat>
		uart_puts(texth);
     ebc:	81 e5       	ldi	r24, 0x51	; 81
     ebe:	92 e0       	ldi	r25, 0x02	; 2
     ec0:	0e 94 19 02 	call	0x432	; 0x432 <uart_puts>
		
		if (logCmOnOff == 0) {
     ec4:	80 91 c9 01 	lds	r24, 0x01C9
     ec8:	88 23       	and	r24, r24
     eca:	09 f0       	breq	.+2      	; 0xece <ausgabehistory+0x108>
     ecc:	4b c0       	rjmp	.+150    	; 0xf64 <ausgabehistory+0x19e>
			convertUint.Byte[0] = EEPReadByte(&historyDepthL[i][0]);
     ece:	c5 01       	movw	r24, r10
     ed0:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <__eerd_byte_m32>
     ed4:	80 93 45 02 	sts	0x0245, r24
			convertUint.Byte[1] = EEPReadByte(&historyDepthL[i][1]);
     ed8:	c1 01       	movw	r24, r2
     eda:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <__eerd_byte_m32>
     ede:	80 93 46 02 	sts	0x0246, r24
			itoa(convertUint.Word,texth,10);  // Sensor Links, analog 
     ee2:	80 91 45 02 	lds	r24, 0x0245
     ee6:	90 91 46 02 	lds	r25, 0x0246
     eea:	61 e5       	ldi	r22, 0x51	; 81
     eec:	72 e0       	ldi	r23, 0x02	; 2
     eee:	4a e0       	ldi	r20, 0x0A	; 10
     ef0:	50 e0       	ldi	r21, 0x00	; 0
     ef2:	0e 94 a8 12 	call	0x2550	; 0x2550 <itoa>
			strcat(texth,tab);	
     ef6:	81 e5       	ldi	r24, 0x51	; 81
     ef8:	92 e0       	ldi	r25, 0x02	; 2
     efa:	62 eb       	ldi	r22, 0xB2	; 178
     efc:	70 e0       	ldi	r23, 0x00	; 0
     efe:	0e 94 96 12 	call	0x252c	; 0x252c <strcat>
			uart_puts(texth);
     f02:	81 e5       	ldi	r24, 0x51	; 81
     f04:	92 e0       	ldi	r25, 0x02	; 2
     f06:	0e 94 19 02 	call	0x432	; 0x432 <uart_puts>

			convertUint.Byte[0] = EEPReadByte(&historyDepthV[i][0]);
     f0a:	c6 01       	movw	r24, r12
     f0c:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <__eerd_byte_m32>
     f10:	80 93 45 02 	sts	0x0245, r24
			convertUint.Byte[1] = EEPReadByte(&historyDepthV[i][1]);
     f14:	c2 01       	movw	r24, r4
     f16:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <__eerd_byte_m32>
     f1a:	80 93 46 02 	sts	0x0246, r24
			itoa(convertUint.Word,texth,10);  // Sensor Vorne, analog		 
     f1e:	80 91 45 02 	lds	r24, 0x0245
     f22:	90 91 46 02 	lds	r25, 0x0246
     f26:	61 e5       	ldi	r22, 0x51	; 81
     f28:	72 e0       	ldi	r23, 0x02	; 2
     f2a:	4a e0       	ldi	r20, 0x0A	; 10
     f2c:	50 e0       	ldi	r21, 0x00	; 0
     f2e:	0e 94 a8 12 	call	0x2550	; 0x2550 <itoa>
			strcat(texth,tab);	
     f32:	81 e5       	ldi	r24, 0x51	; 81
     f34:	92 e0       	ldi	r25, 0x02	; 2
     f36:	62 eb       	ldi	r22, 0xB2	; 178
     f38:	70 e0       	ldi	r23, 0x00	; 0
     f3a:	0e 94 96 12 	call	0x252c	; 0x252c <strcat>
			uart_puts(texth);
     f3e:	81 e5       	ldi	r24, 0x51	; 81
     f40:	92 e0       	ldi	r25, 0x02	; 2
     f42:	0e 94 19 02 	call	0x432	; 0x432 <uart_puts>

			convertUint.Byte[0] = EEPReadByte(&historyDepthR[i][0]);
     f46:	c7 01       	movw	r24, r14
     f48:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <__eerd_byte_m32>
     f4c:	80 93 45 02 	sts	0x0245, r24
			convertUint.Byte[1] = EEPReadByte(&historyDepthR[i][1]);
     f50:	c3 01       	movw	r24, r6
     f52:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <__eerd_byte_m32>
     f56:	80 93 46 02 	sts	0x0246, r24
			itoa(convertUint.Word,texth,10);  // Sensor Rechts, analog			 
     f5a:	80 91 45 02 	lds	r24, 0x0245
     f5e:	90 91 46 02 	lds	r25, 0x0246
     f62:	53 c0       	rjmp	.+166    	; 0x100a <ausgabehistory+0x244>
			strcat(texth,tab);	
			uart_puts(texth);			
		}
		else{
			convertUint.Byte[0] = EEPReadByte(&historyDepthL[i][0]);
     f64:	c5 01       	movw	r24, r10
     f66:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <__eerd_byte_m32>
     f6a:	80 93 45 02 	sts	0x0245, r24
			convertUint.Byte[1] = EEPReadByte(&historyDepthL[i][1]);
     f6e:	c1 01       	movw	r24, r2
     f70:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <__eerd_byte_m32>
     f74:	80 93 46 02 	sts	0x0246, r24
			itoa(linearisierungAD(convertUint.Word,70),texth,10);  // Sensor Links, analog	 
     f78:	80 91 45 02 	lds	r24, 0x0245
     f7c:	90 91 46 02 	lds	r25, 0x0246
     f80:	66 e4       	ldi	r22, 0x46	; 70
     f82:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <linearisierungAD>
     f86:	61 e5       	ldi	r22, 0x51	; 81
     f88:	72 e0       	ldi	r23, 0x02	; 2
     f8a:	4a e0       	ldi	r20, 0x0A	; 10
     f8c:	50 e0       	ldi	r21, 0x00	; 0
     f8e:	0e 94 a8 12 	call	0x2550	; 0x2550 <itoa>
			strcat(texth,tab);	
     f92:	81 e5       	ldi	r24, 0x51	; 81
     f94:	92 e0       	ldi	r25, 0x02	; 2
     f96:	62 eb       	ldi	r22, 0xB2	; 178
     f98:	70 e0       	ldi	r23, 0x00	; 0
     f9a:	0e 94 96 12 	call	0x252c	; 0x252c <strcat>
			uart_puts(texth);
     f9e:	81 e5       	ldi	r24, 0x51	; 81
     fa0:	92 e0       	ldi	r25, 0x02	; 2
     fa2:	0e 94 19 02 	call	0x432	; 0x432 <uart_puts>

			convertUint.Byte[0] = EEPReadByte(&historyDepthV[i][0]);
     fa6:	c6 01       	movw	r24, r12
     fa8:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <__eerd_byte_m32>
     fac:	80 93 45 02 	sts	0x0245, r24
			convertUint.Byte[1] = EEPReadByte(&historyDepthV[i][1]);
     fb0:	c2 01       	movw	r24, r4
     fb2:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <__eerd_byte_m32>
     fb6:	80 93 46 02 	sts	0x0246, r24
			itoa(linearisierungAD(convertUint.Word,100),texth,10);  // Sensor Vorne, analog		 
     fba:	80 91 45 02 	lds	r24, 0x0245
     fbe:	90 91 46 02 	lds	r25, 0x0246
     fc2:	64 e6       	ldi	r22, 0x64	; 100
     fc4:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <linearisierungAD>
     fc8:	61 e5       	ldi	r22, 0x51	; 81
     fca:	72 e0       	ldi	r23, 0x02	; 2
     fcc:	4a e0       	ldi	r20, 0x0A	; 10
     fce:	50 e0       	ldi	r21, 0x00	; 0
     fd0:	0e 94 a8 12 	call	0x2550	; 0x2550 <itoa>
			strcat(texth,tab);	
     fd4:	81 e5       	ldi	r24, 0x51	; 81
     fd6:	92 e0       	ldi	r25, 0x02	; 2
     fd8:	62 eb       	ldi	r22, 0xB2	; 178
     fda:	70 e0       	ldi	r23, 0x00	; 0
     fdc:	0e 94 96 12 	call	0x252c	; 0x252c <strcat>
			uart_puts(texth);
     fe0:	81 e5       	ldi	r24, 0x51	; 81
     fe2:	92 e0       	ldi	r25, 0x02	; 2
     fe4:	0e 94 19 02 	call	0x432	; 0x432 <uart_puts>
		
			convertUint.Byte[0] = EEPReadByte(&historyDepthR[i][0]);
     fe8:	c7 01       	movw	r24, r14
     fea:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <__eerd_byte_m32>
     fee:	80 93 45 02 	sts	0x0245, r24
			convertUint.Byte[1] = EEPReadByte(&historyDepthR[i][1]);		
     ff2:	c3 01       	movw	r24, r6
     ff4:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <__eerd_byte_m32>
     ff8:	80 93 46 02 	sts	0x0246, r24
			itoa(linearisierungAD(convertUint.Word,70),texth,10);  // Sensor Rechts, analog
     ffc:	80 91 45 02 	lds	r24, 0x0245
    1000:	90 91 46 02 	lds	r25, 0x0246
    1004:	66 e4       	ldi	r22, 0x46	; 70
    1006:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <linearisierungAD>
    100a:	61 e5       	ldi	r22, 0x51	; 81
    100c:	72 e0       	ldi	r23, 0x02	; 2
    100e:	4a e0       	ldi	r20, 0x0A	; 10
    1010:	50 e0       	ldi	r21, 0x00	; 0
    1012:	0e 94 a8 12 	call	0x2550	; 0x2550 <itoa>
			strcat(texth,tab);	
    1016:	81 e5       	ldi	r24, 0x51	; 81
    1018:	92 e0       	ldi	r25, 0x02	; 2
    101a:	62 eb       	ldi	r22, 0xB2	; 178
    101c:	70 e0       	ldi	r23, 0x00	; 0
    101e:	0e 94 96 12 	call	0x252c	; 0x252c <strcat>
			uart_puts(texth);
    1022:	81 e5       	ldi	r24, 0x51	; 81
    1024:	92 e0       	ldi	r25, 0x02	; 2
    1026:	0e 94 19 02 	call	0x432	; 0x432 <uart_puts>

		}
		convertUint.Byte[0] = EEPReadByte(&historyDepthS[i][0]);
    102a:	c8 01       	movw	r24, r16
    102c:	88 59       	subi	r24, 0x98	; 152
    102e:	9e 4f       	sbci	r25, 0xFE	; 254
    1030:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <__eerd_byte_m32>
    1034:	80 93 45 02 	sts	0x0245, r24
			
			logStart=1;
		}	
}

void ausgabehistory(void){
    1038:	e8 01       	movw	r28, r16
    103a:	21 96       	adiw	r28, 0x01	; 1
			strcat(texth,tab);	
			uart_puts(texth);

		}
		convertUint.Byte[0] = EEPReadByte(&historyDepthS[i][0]);
		convertUint.Byte[1] = EEPReadByte(&historyDepthS[i][1]);				
    103c:	ce 01       	movw	r24, r28
    103e:	88 59       	subi	r24, 0x98	; 152
    1040:	9e 4f       	sbci	r25, 0xFE	; 254
    1042:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <__eerd_byte_m32>
    1046:	80 93 46 02 	sts	0x0246, r24
		itoa(getServoM(convertUint.Word),texth,10);  			// Servo / Lenkung		 
    104a:	80 91 45 02 	lds	r24, 0x0245
    104e:	90 91 46 02 	lds	r25, 0x0246
    1052:	0e 94 20 10 	call	0x2040	; 0x2040 <getServoM>
    1056:	99 27       	eor	r25, r25
    1058:	87 fd       	sbrc	r24, 7
    105a:	90 95       	com	r25
    105c:	61 e5       	ldi	r22, 0x51	; 81
    105e:	72 e0       	ldi	r23, 0x02	; 2
    1060:	4a e0       	ldi	r20, 0x0A	; 10
    1062:	50 e0       	ldi	r21, 0x00	; 0
    1064:	0e 94 a8 12 	call	0x2550	; 0x2550 <itoa>
		strcat(texth,tab);	
    1068:	81 e5       	ldi	r24, 0x51	; 81
    106a:	92 e0       	ldi	r25, 0x02	; 2
    106c:	62 eb       	ldi	r22, 0xB2	; 178
    106e:	70 e0       	ldi	r23, 0x00	; 0
    1070:	0e 94 96 12 	call	0x252c	; 0x252c <strcat>
		uart_puts(texth);	
    1074:	81 e5       	ldi	r24, 0x51	; 81
    1076:	92 e0       	ldi	r25, 0x02	; 2
    1078:	0e 94 19 02 	call	0x432	; 0x432 <uart_puts>

		convertUint.Byte[0] = EEPReadByte(&historyDepthFR[i][0]);
    107c:	c8 01       	movw	r24, r16
    107e:	80 52       	subi	r24, 0x20	; 32
    1080:	9e 4f       	sbci	r25, 0xFE	; 254
    1082:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <__eerd_byte_m32>
    1086:	80 93 45 02 	sts	0x0245, r24
		convertUint.Byte[1] = EEPReadByte(&historyDepthFR[i][1]);			
    108a:	ce 01       	movw	r24, r28
    108c:	80 52       	subi	r24, 0x20	; 32
    108e:	9e 4f       	sbci	r25, 0xFE	; 254
    1090:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <__eerd_byte_m32>
    1094:	80 93 46 02 	sts	0x0246, r24
		itoa(getFahrM(convertUint.Word),texth,10);  			// Antrieb / Fahrtenregler		 
    1098:	80 91 45 02 	lds	r24, 0x0245
    109c:	90 91 46 02 	lds	r25, 0x0246
    10a0:	0e 94 42 10 	call	0x2084	; 0x2084 <getFahrM>
    10a4:	99 27       	eor	r25, r25
    10a6:	87 fd       	sbrc	r24, 7
    10a8:	90 95       	com	r25
    10aa:	61 e5       	ldi	r22, 0x51	; 81
    10ac:	72 e0       	ldi	r23, 0x02	; 2
    10ae:	4a e0       	ldi	r20, 0x0A	; 10
    10b0:	50 e0       	ldi	r21, 0x00	; 0
    10b2:	0e 94 a8 12 	call	0x2550	; 0x2550 <itoa>
		strcat(texth,tab);	
    10b6:	81 e5       	ldi	r24, 0x51	; 81
    10b8:	92 e0       	ldi	r25, 0x02	; 2
    10ba:	62 eb       	ldi	r22, 0xB2	; 178
    10bc:	70 e0       	ldi	r23, 0x00	; 0
    10be:	0e 94 96 12 	call	0x252c	; 0x252c <strcat>
		uart_puts(texth);		
    10c2:	81 e5       	ldi	r24, 0x51	; 81
    10c4:	92 e0       	ldi	r25, 0x02	; 2
    10c6:	0e 94 19 02 	call	0x432	; 0x432 <uart_puts>
		
		if (hmod == '+') {
    10ca:	80 91 62 00 	lds	r24, 0x0062
    10ce:	8b 32       	cpi	r24, 0x2B	; 43
    10d0:	09 f0       	breq	.+2      	; 0x10d4 <ausgabehistory+0x30e>
    10d2:	66 c0       	rjmp	.+204    	; 0x11a0 <ausgabehistory+0x3da>
			convertInt.Byte[0] = EEPReadByte(&historyDepthH1[i][0]);
    10d4:	c8 01       	movw	r24, r16
    10d6:	86 5a       	subi	r24, 0xA6	; 166
    10d8:	9d 4f       	sbci	r25, 0xFD	; 253
    10da:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <__eerd_byte_m32>
    10de:	80 93 41 02 	sts	0x0241, r24
			convertInt.Byte[1] = EEPReadByte(&historyDepthH1[i][1]);			
    10e2:	ce 01       	movw	r24, r28
    10e4:	86 5a       	subi	r24, 0xA6	; 166
    10e6:	9d 4f       	sbci	r25, 0xFD	; 253
    10e8:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <__eerd_byte_m32>
    10ec:	80 93 42 02 	sts	0x0242, r24
			itoa(convertInt.Word,texth,10);  			// Antrieb / Fahrtenregler		 
    10f0:	80 91 41 02 	lds	r24, 0x0241
    10f4:	90 91 42 02 	lds	r25, 0x0242
    10f8:	61 e5       	ldi	r22, 0x51	; 81
    10fa:	72 e0       	ldi	r23, 0x02	; 2
    10fc:	4a e0       	ldi	r20, 0x0A	; 10
    10fe:	50 e0       	ldi	r21, 0x00	; 0
    1100:	0e 94 a8 12 	call	0x2550	; 0x2550 <itoa>
			strcat(texth,tab);	
    1104:	81 e5       	ldi	r24, 0x51	; 81
    1106:	92 e0       	ldi	r25, 0x02	; 2
    1108:	62 eb       	ldi	r22, 0xB2	; 178
    110a:	70 e0       	ldi	r23, 0x00	; 0
    110c:	0e 94 96 12 	call	0x252c	; 0x252c <strcat>
			uart_puts(texth);
    1110:	81 e5       	ldi	r24, 0x51	; 81
    1112:	92 e0       	ldi	r25, 0x02	; 2
    1114:	0e 94 19 02 	call	0x432	; 0x432 <uart_puts>
			
			convertInt.Byte[0] = EEPReadByte(&historyDepthH2[i][0]);
    1118:	c8 01       	movw	r24, r16
    111a:	8e 52       	subi	r24, 0x2E	; 46
    111c:	9d 4f       	sbci	r25, 0xFD	; 253
    111e:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <__eerd_byte_m32>
    1122:	80 93 41 02 	sts	0x0241, r24
			convertInt.Byte[1] = EEPReadByte(&historyDepthH2[i][1]);			
    1126:	ce 01       	movw	r24, r28
    1128:	8e 52       	subi	r24, 0x2E	; 46
    112a:	9d 4f       	sbci	r25, 0xFD	; 253
    112c:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <__eerd_byte_m32>
    1130:	80 93 42 02 	sts	0x0242, r24
			itoa(convertInt.Word,texth,10);  			// Antrieb / Fahrtenregler		 
    1134:	80 91 41 02 	lds	r24, 0x0241
    1138:	90 91 42 02 	lds	r25, 0x0242
    113c:	61 e5       	ldi	r22, 0x51	; 81
    113e:	72 e0       	ldi	r23, 0x02	; 2
    1140:	4a e0       	ldi	r20, 0x0A	; 10
    1142:	50 e0       	ldi	r21, 0x00	; 0
    1144:	0e 94 a8 12 	call	0x2550	; 0x2550 <itoa>
			strcat(texth,tab);	
    1148:	81 e5       	ldi	r24, 0x51	; 81
    114a:	92 e0       	ldi	r25, 0x02	; 2
    114c:	62 eb       	ldi	r22, 0xB2	; 178
    114e:	70 e0       	ldi	r23, 0x00	; 0
    1150:	0e 94 96 12 	call	0x252c	; 0x252c <strcat>
			uart_puts(texth);
    1154:	81 e5       	ldi	r24, 0x51	; 81
    1156:	92 e0       	ldi	r25, 0x02	; 2
    1158:	0e 94 19 02 	call	0x432	; 0x432 <uart_puts>

			convertInt.Byte[0] = EEPReadByte(&historyDepthH3[i][0]);
    115c:	c8 01       	movw	r24, r16
    115e:	86 5b       	subi	r24, 0xB6	; 182
    1160:	9c 4f       	sbci	r25, 0xFC	; 252
    1162:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <__eerd_byte_m32>
    1166:	80 93 41 02 	sts	0x0241, r24
			convertInt.Byte[1] = EEPReadByte(&historyDepthH3[i][1]);			
    116a:	ce 01       	movw	r24, r28
    116c:	86 5b       	subi	r24, 0xB6	; 182
    116e:	9c 4f       	sbci	r25, 0xFC	; 252
    1170:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <__eerd_byte_m32>
    1174:	80 93 42 02 	sts	0x0242, r24
			itoa(convertInt.Word,texth,10);  			// Antrieb / Fahrtenregler		 
    1178:	80 91 41 02 	lds	r24, 0x0241
    117c:	90 91 42 02 	lds	r25, 0x0242
    1180:	61 e5       	ldi	r22, 0x51	; 81
    1182:	72 e0       	ldi	r23, 0x02	; 2
    1184:	4a e0       	ldi	r20, 0x0A	; 10
    1186:	50 e0       	ldi	r21, 0x00	; 0
    1188:	0e 94 a8 12 	call	0x2550	; 0x2550 <itoa>
			strcat(texth,tab);	
    118c:	81 e5       	ldi	r24, 0x51	; 81
    118e:	92 e0       	ldi	r25, 0x02	; 2
    1190:	62 eb       	ldi	r22, 0xB2	; 178
    1192:	70 e0       	ldi	r23, 0x00	; 0
    1194:	0e 94 96 12 	call	0x252c	; 0x252c <strcat>
			uart_puts(texth);
    1198:	81 e5       	ldi	r24, 0x51	; 81
    119a:	92 e0       	ldi	r25, 0x02	; 2
    119c:	0e 94 19 02 	call	0x432	; 0x432 <uart_puts>
		}
		uart_putc('\r');
    11a0:	8d e0       	ldi	r24, 0x0D	; 13
    11a2:	0e 94 07 02 	call	0x40e	; 0x40e <uart_putc>
	uart_putc('\r');

	uart_puts("\rt in 0,1s\tlinks\tvorne\trechts\tServo\tFahrr");	
	if (hmod == '+')  uart_puts("\th1\th2\th3");	
	uart_putc('\r');
	for(int i=0; i < historyDepthPointer; i++){
    11a6:	08 94       	sec
    11a8:	81 1c       	adc	r8, r1
    11aa:	91 1c       	adc	r9, r1
    11ac:	0e 5f       	subi	r16, 0xFE	; 254
    11ae:	1f 4f       	sbci	r17, 0xFF	; 255
    11b0:	82 e0       	ldi	r24, 0x02	; 2
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	a8 0e       	add	r10, r24
    11b6:	b9 1e       	adc	r11, r25
    11b8:	28 0e       	add	r2, r24
    11ba:	39 1e       	adc	r3, r25
    11bc:	c8 0e       	add	r12, r24
    11be:	d9 1e       	adc	r13, r25
    11c0:	48 0e       	add	r4, r24
    11c2:	59 1e       	adc	r5, r25
    11c4:	e8 0e       	add	r14, r24
    11c6:	f9 1e       	adc	r15, r25
    11c8:	68 0e       	add	r6, r24
    11ca:	79 1e       	adc	r7, r25
    11cc:	80 91 2d 02 	lds	r24, 0x022D
    11d0:	99 27       	eor	r25, r25
    11d2:	87 fd       	sbrc	r24, 7
    11d4:	90 95       	com	r25
    11d6:	88 16       	cp	r8, r24
    11d8:	99 06       	cpc	r9, r25
    11da:	0c f4       	brge	.+2      	; 0x11de <ausgabehistory+0x418>
    11dc:	62 ce       	rjmp	.-828    	; 0xea2 <ausgabehistory+0xdc>
			strcat(texth,tab);	
			uart_puts(texth);
		}
		uart_putc('\r');
	}
	uart_putc('\r');
    11de:	8d e0       	ldi	r24, 0x0D	; 13
    11e0:	0e 94 07 02 	call	0x40e	; 0x40e <uart_putc>
	// abtastzeit=0; //Auf Null setzen
	// abtastzeitMAX=0;
}
    11e4:	df 91       	pop	r29
    11e6:	cf 91       	pop	r28
    11e8:	1f 91       	pop	r17
    11ea:	0f 91       	pop	r16
    11ec:	ff 90       	pop	r15
    11ee:	ef 90       	pop	r14
    11f0:	df 90       	pop	r13
    11f2:	cf 90       	pop	r12
    11f4:	bf 90       	pop	r11
    11f6:	af 90       	pop	r10
    11f8:	9f 90       	pop	r9
    11fa:	8f 90       	pop	r8
    11fc:	7f 90       	pop	r7
    11fe:	6f 90       	pop	r6
    1200:	5f 90       	pop	r5
    1202:	4f 90       	pop	r4
    1204:	3f 90       	pop	r3
    1206:	2f 90       	pop	r2
    1208:	08 95       	ret

0000120a <ausgabeUSB2>:
		
	// Es fehlt die Mittelwertbildung,		//??	
	// die Ausgabe der Senorwerte in cm
	// das festlegen von Schwellwerten der Akku-Spannung

	if(logBTOnOff == 0)
    120a:	80 91 cb 01 	lds	r24, 0x01CB
    120e:	88 23       	and	r24, r24
    1210:	09 f0       	breq	.+2      	; 0x1214 <ausgabeUSB2+0xa>
    1212:	92 c0       	rjmp	.+292    	; 0x1338 <ausgabeUSB2+0x12e>
		// Ausgabe der Überschrift, in verschiedenen Zyklen	
			switch(datenSatzZaehler % (1000)){
    1214:	80 91 e6 00 	lds	r24, 0x00E6
    1218:	90 91 e7 00 	lds	r25, 0x00E7
    121c:	68 ee       	ldi	r22, 0xE8	; 232
    121e:	73 e0       	ldi	r23, 0x03	; 3
    1220:	0e 94 4c 11 	call	0x2298	; 0x2298 <__udivmodhi4>
    1224:	81 32       	cpi	r24, 0x21	; 33
    1226:	91 05       	cpc	r25, r1
    1228:	09 f4       	brne	.+2      	; 0x122c <ausgabeUSB2+0x22>
    122a:	52 c0       	rjmp	.+164    	; 0x12d0 <ausgabeUSB2+0xc6>
    122c:	82 32       	cpi	r24, 0x22	; 34
    122e:	91 05       	cpc	r25, r1
    1230:	a0 f4       	brcc	.+40     	; 0x125a <ausgabeUSB2+0x50>
    1232:	89 31       	cpi	r24, 0x19	; 25
    1234:	91 05       	cpc	r25, r1
    1236:	b9 f1       	breq	.+110    	; 0x12a6 <ausgabeUSB2+0x9c>
    1238:	8a 31       	cpi	r24, 0x1A	; 26
    123a:	91 05       	cpc	r25, r1
    123c:	38 f4       	brcc	.+14     	; 0x124c <ausgabeUSB2+0x42>
    123e:	85 31       	cpi	r24, 0x15	; 21
    1240:	91 05       	cpc	r25, r1
    1242:	29 f1       	breq	.+74     	; 0x128e <ausgabeUSB2+0x84>
    1244:	47 97       	sbiw	r24, 0x17	; 23
    1246:	09 f0       	breq	.+2      	; 0x124a <ausgabeUSB2+0x40>
    1248:	77 c0       	rjmp	.+238    	; 0x1338 <ausgabeUSB2+0x12e>
    124a:	24 c0       	rjmp	.+72     	; 0x1294 <ausgabeUSB2+0x8a>
    124c:	8b 31       	cpi	r24, 0x1B	; 27
    124e:	91 05       	cpc	r25, r1
    1250:	89 f1       	breq	.+98     	; 0x12b4 <ausgabeUSB2+0xaa>
    1252:	4e 97       	sbiw	r24, 0x1e	; 30
    1254:	09 f0       	breq	.+2      	; 0x1258 <ausgabeUSB2+0x4e>
    1256:	70 c0       	rjmp	.+224    	; 0x1338 <ausgabeUSB2+0x12e>
    1258:	34 c0       	rjmp	.+104    	; 0x12c2 <ausgabeUSB2+0xb8>
    125a:	8b 32       	cpi	r24, 0x2B	; 43
    125c:	91 05       	cpc	r25, r1
    125e:	09 f4       	brne	.+2      	; 0x1262 <ausgabeUSB2+0x58>
    1260:	53 c0       	rjmp	.+166    	; 0x1308 <ausgabeUSB2+0xfe>
    1262:	8c 32       	cpi	r24, 0x2C	; 44
    1264:	91 05       	cpc	r25, r1
    1266:	38 f4       	brcc	.+14     	; 0x1276 <ausgabeUSB2+0x6c>
    1268:	83 32       	cpi	r24, 0x23	; 35
    126a:	91 05       	cpc	r25, r1
    126c:	c1 f1       	breq	.+112    	; 0x12de <ausgabeUSB2+0xd4>
    126e:	89 97       	sbiw	r24, 0x29	; 41
    1270:	09 f0       	breq	.+2      	; 0x1274 <ausgabeUSB2+0x6a>
    1272:	62 c0       	rjmp	.+196    	; 0x1338 <ausgabeUSB2+0x12e>
    1274:	42 c0       	rjmp	.+132    	; 0x12fa <ausgabeUSB2+0xf0>
    1276:	80 33       	cpi	r24, 0x30	; 48
    1278:	91 05       	cpc	r25, r1
    127a:	09 f4       	brne	.+2      	; 0x127e <ausgabeUSB2+0x74>
    127c:	53 c0       	rjmp	.+166    	; 0x1324 <ausgabeUSB2+0x11a>
    127e:	81 33       	cpi	r24, 0x31	; 49
    1280:	91 05       	cpc	r25, r1
    1282:	09 f4       	brne	.+2      	; 0x1286 <ausgabeUSB2+0x7c>
    1284:	56 c0       	rjmp	.+172    	; 0x1332 <ausgabeUSB2+0x128>
    1286:	8f 97       	sbiw	r24, 0x2f	; 47
    1288:	09 f0       	breq	.+2      	; 0x128c <ausgabeUSB2+0x82>
    128a:	56 c0       	rjmp	.+172    	; 0x1338 <ausgabeUSB2+0x12e>
    128c:	44 c0       	rjmp	.+136    	; 0x1316 <ausgabeUSB2+0x10c>
				case 21: uart_puts("\rt in s\t");	break;
    128e:	80 e3       	ldi	r24, 0x30	; 48
    1290:	91 e0       	ldi	r25, 0x01	; 1
    1292:	06 c0       	rjmp	.+12     	; 0x12a0 <ausgabeUSB2+0x96>
				case 23: if (logMod & 0x02) uart_puts("links\t");	break;
    1294:	80 91 cf 01 	lds	r24, 0x01CF
    1298:	81 ff       	sbrs	r24, 1
    129a:	4e c0       	rjmp	.+156    	; 0x1338 <ausgabeUSB2+0x12e>
    129c:	89 e3       	ldi	r24, 0x39	; 57
    129e:	91 e0       	ldi	r25, 0x01	; 1
    12a0:	0e 94 19 02 	call	0x432	; 0x432 <uart_puts>
    12a4:	49 c0       	rjmp	.+146    	; 0x1338 <ausgabeUSB2+0x12e>
				case 25: if (logMod & 0x04) uart_puts("vorne\t");	break;
    12a6:	80 91 cf 01 	lds	r24, 0x01CF
    12aa:	82 ff       	sbrs	r24, 2
    12ac:	45 c0       	rjmp	.+138    	; 0x1338 <ausgabeUSB2+0x12e>
    12ae:	80 e4       	ldi	r24, 0x40	; 64
    12b0:	91 e0       	ldi	r25, 0x01	; 1
    12b2:	f6 cf       	rjmp	.-20     	; 0x12a0 <ausgabeUSB2+0x96>
				case 27: if (logMod & 0x08) uart_puts("rechts\t");	break;
    12b4:	80 91 cf 01 	lds	r24, 0x01CF
    12b8:	83 ff       	sbrs	r24, 3
    12ba:	3e c0       	rjmp	.+124    	; 0x1338 <ausgabeUSB2+0x12e>
    12bc:	87 e4       	ldi	r24, 0x47	; 71
    12be:	91 e0       	ldi	r25, 0x01	; 1
    12c0:	ef cf       	rjmp	.-34     	; 0x12a0 <ausgabeUSB2+0x96>
				case 30: if (logMod & 0x10) uart_puts("Servo\t"); break;
    12c2:	80 91 cf 01 	lds	r24, 0x01CF
    12c6:	84 ff       	sbrs	r24, 4
    12c8:	37 c0       	rjmp	.+110    	; 0x1338 <ausgabeUSB2+0x12e>
    12ca:	8f e4       	ldi	r24, 0x4F	; 79
    12cc:	91 e0       	ldi	r25, 0x01	; 1
    12ce:	e8 cf       	rjmp	.-48     	; 0x12a0 <ausgabeUSB2+0x96>
				case 33: if (logMod & 0x20) uart_puts("Fahr\t");  break;
    12d0:	80 91 cf 01 	lds	r24, 0x01CF
    12d4:	85 ff       	sbrs	r24, 5
    12d6:	30 c0       	rjmp	.+96     	; 0x1338 <ausgabeUSB2+0x12e>
    12d8:	86 e5       	ldi	r24, 0x56	; 86
    12da:	91 e0       	ldi	r25, 0x01	; 1
    12dc:	e1 cf       	rjmp	.-62     	; 0x12a0 <ausgabeUSB2+0x96>
				case 35: if (analogwertAkku < AKKUGRENZWERT){ 
    12de:	80 91 33 02 	lds	r24, 0x0233
    12e2:	90 91 34 02 	lds	r25, 0x0234
    12e6:	8e 53       	subi	r24, 0x3E	; 62
    12e8:	93 40       	sbci	r25, 0x03	; 3
    12ea:	30 f5       	brcc	.+76     	; 0x1338 <ausgabeUSB2+0x12e>
								uart_puts(akkuText); uart_puts("\t");
    12ec:	8e e7       	ldi	r24, 0x7E	; 126
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	0e 94 19 02 	call	0x432	; 0x432 <uart_puts>
    12f4:	8c e5       	ldi	r24, 0x5C	; 92
    12f6:	91 e0       	ldi	r25, 0x01	; 1
    12f8:	d3 cf       	rjmp	.-90     	; 0x12a0 <ausgabeUSB2+0x96>
							}	 												break;
				//case 39: if (logMod & 0x40) uart_puts("Mod\t");	break;
				case 41: if (logMod & 0x80) uart_puts("a1\t");	break;
    12fa:	80 91 cf 01 	lds	r24, 0x01CF
    12fe:	87 ff       	sbrs	r24, 7
    1300:	1b c0       	rjmp	.+54     	; 0x1338 <ausgabeUSB2+0x12e>
    1302:	8e e5       	ldi	r24, 0x5E	; 94
    1304:	91 e0       	ldi	r25, 0x01	; 1
    1306:	cc cf       	rjmp	.-104    	; 0x12a0 <ausgabeUSB2+0x96>
				case 43: if (logMod & 0x80) uart_puts("a2\t");	break;	
    1308:	80 91 cf 01 	lds	r24, 0x01CF
    130c:	87 ff       	sbrs	r24, 7
    130e:	14 c0       	rjmp	.+40     	; 0x1338 <ausgabeUSB2+0x12e>
    1310:	82 e6       	ldi	r24, 0x62	; 98
    1312:	91 e0       	ldi	r25, 0x01	; 1
    1314:	c5 cf       	rjmp	.-118    	; 0x12a0 <ausgabeUSB2+0x96>
				case 47: if (logMod & 0x80) uart_puts("a3\t");	break;
    1316:	80 91 cf 01 	lds	r24, 0x01CF
    131a:	87 ff       	sbrs	r24, 7
    131c:	0d c0       	rjmp	.+26     	; 0x1338 <ausgabeUSB2+0x12e>
    131e:	86 e6       	ldi	r24, 0x66	; 102
    1320:	91 e0       	ldi	r25, 0x01	; 1
    1322:	be cf       	rjmp	.-132    	; 0x12a0 <ausgabeUSB2+0x96>
				case 48: if (logMod & 0x80) uart_puts("aT");		break;
    1324:	80 91 cf 01 	lds	r24, 0x01CF
    1328:	87 ff       	sbrs	r24, 7
    132a:	06 c0       	rjmp	.+12     	; 0x1338 <ausgabeUSB2+0x12e>
    132c:	8a e6       	ldi	r24, 0x6A	; 106
    132e:	91 e0       	ldi	r25, 0x01	; 1
    1330:	b7 cf       	rjmp	.-146    	; 0x12a0 <ausgabeUSB2+0x96>
				
				case 49: uart_putc('\r');	break;
    1332:	8d e0       	ldi	r24, 0x0D	; 13
    1334:	0e 94 07 02 	call	0x40e	; 0x40e <uart_putc>
				default:	break;
			}
	
//*		Berechnungen in verschiedenen Zyklen
		switch(datenSatzZaehler % MWERTE){
    1338:	e0 91 e6 00 	lds	r30, 0x00E6
    133c:	f0 91 e7 00 	lds	r31, 0x00E7
    1340:	cf 01       	movw	r24, r30
    1342:	6a e0       	ldi	r22, 0x0A	; 10
    1344:	70 e0       	ldi	r23, 0x00	; 0
    1346:	0e 94 4c 11 	call	0x2298	; 0x2298 <__udivmodhi4>
    134a:	84 30       	cpi	r24, 0x04	; 4
    134c:	91 05       	cpc	r25, r1
    134e:	09 f4       	brne	.+2      	; 0x1352 <ausgabeUSB2+0x148>
    1350:	4a c0       	rjmp	.+148    	; 0x13e6 <ausgabeUSB2+0x1dc>
    1352:	85 30       	cpi	r24, 0x05	; 5
    1354:	91 05       	cpc	r25, r1
    1356:	50 f4       	brcc	.+20     	; 0x136c <ausgabeUSB2+0x162>
    1358:	82 30       	cpi	r24, 0x02	; 2
    135a:	91 05       	cpc	r25, r1
    135c:	31 f1       	breq	.+76     	; 0x13aa <ausgabeUSB2+0x1a0>
    135e:	83 30       	cpi	r24, 0x03	; 3
    1360:	91 05       	cpc	r25, r1
    1362:	90 f5       	brcc	.+100    	; 0x13c8 <ausgabeUSB2+0x1be>
    1364:	01 97       	sbiw	r24, 0x01	; 1
    1366:	09 f0       	breq	.+2      	; 0x136a <ausgabeUSB2+0x160>
    1368:	88 c0       	rjmp	.+272    	; 0x147a <ausgabeUSB2+0x270>
    136a:	10 c0       	rjmp	.+32     	; 0x138c <ausgabeUSB2+0x182>
    136c:	86 30       	cpi	r24, 0x06	; 6
    136e:	91 05       	cpc	r25, r1
    1370:	09 f4       	brne	.+2      	; 0x1374 <ausgabeUSB2+0x16a>
    1372:	57 c0       	rjmp	.+174    	; 0x1422 <ausgabeUSB2+0x218>
    1374:	86 30       	cpi	r24, 0x06	; 6
    1376:	91 05       	cpc	r25, r1
    1378:	08 f4       	brcc	.+2      	; 0x137c <ausgabeUSB2+0x172>
    137a:	44 c0       	rjmp	.+136    	; 0x1404 <ausgabeUSB2+0x1fa>
    137c:	87 30       	cpi	r24, 0x07	; 7
    137e:	91 05       	cpc	r25, r1
    1380:	09 f4       	brne	.+2      	; 0x1384 <ausgabeUSB2+0x17a>
    1382:	5e c0       	rjmp	.+188    	; 0x1440 <ausgabeUSB2+0x236>
    1384:	08 97       	sbiw	r24, 0x08	; 8
    1386:	09 f0       	breq	.+2      	; 0x138a <ausgabeUSB2+0x180>
    1388:	78 c0       	rjmp	.+240    	; 0x147a <ausgabeUSB2+0x270>
    138a:	69 c0       	rjmp	.+210    	; 0x145e <ausgabeUSB2+0x254>
			case 0: ; break;
			case 1: OutL  += OutHL;break;
    138c:	80 91 a0 01 	lds	r24, 0x01A0
    1390:	90 91 a1 01 	lds	r25, 0x01A1
    1394:	20 91 aa 01 	lds	r18, 0x01AA
    1398:	30 91 ab 01 	lds	r19, 0x01AB
    139c:	82 0f       	add	r24, r18
    139e:	93 1f       	adc	r25, r19
    13a0:	90 93 a1 01 	sts	0x01A1, r25
    13a4:	80 93 a0 01 	sts	0x01A0, r24
    13a8:	68 c0       	rjmp	.+208    	; 0x147a <ausgabeUSB2+0x270>
			case 2: OutR  += OutHR;break;
    13aa:	80 91 a2 01 	lds	r24, 0x01A2
    13ae:	90 91 a3 01 	lds	r25, 0x01A3
    13b2:	20 91 ac 01 	lds	r18, 0x01AC
    13b6:	30 91 ad 01 	lds	r19, 0x01AD
    13ba:	82 0f       	add	r24, r18
    13bc:	93 1f       	adc	r25, r19
    13be:	90 93 a3 01 	sts	0x01A3, r25
    13c2:	80 93 a2 01 	sts	0x01A2, r24
    13c6:	59 c0       	rjmp	.+178    	; 0x147a <ausgabeUSB2+0x270>
			case 3: OutV  += OutHV;break;
    13c8:	80 91 a4 01 	lds	r24, 0x01A4
    13cc:	90 91 a5 01 	lds	r25, 0x01A5
    13d0:	20 91 ae 01 	lds	r18, 0x01AE
    13d4:	30 91 af 01 	lds	r19, 0x01AF
    13d8:	82 0f       	add	r24, r18
    13da:	93 1f       	adc	r25, r19
    13dc:	90 93 a5 01 	sts	0x01A5, r25
    13e0:	80 93 a4 01 	sts	0x01A4, r24
    13e4:	4a c0       	rjmp	.+148    	; 0x147a <ausgabeUSB2+0x270>
			case 4: OutS  += OutHS;break;
    13e6:	80 91 a6 01 	lds	r24, 0x01A6
    13ea:	90 91 a7 01 	lds	r25, 0x01A7
    13ee:	20 91 b0 01 	lds	r18, 0x01B0
    13f2:	30 91 b1 01 	lds	r19, 0x01B1
    13f6:	82 0f       	add	r24, r18
    13f8:	93 1f       	adc	r25, r19
    13fa:	90 93 a7 01 	sts	0x01A7, r25
    13fe:	80 93 a6 01 	sts	0x01A6, r24
    1402:	3b c0       	rjmp	.+118    	; 0x147a <ausgabeUSB2+0x270>
			case 5: OutFR += OutHFR;break;
    1404:	80 91 a8 01 	lds	r24, 0x01A8
    1408:	90 91 a9 01 	lds	r25, 0x01A9
    140c:	20 91 b2 01 	lds	r18, 0x01B2
    1410:	30 91 b3 01 	lds	r19, 0x01B3
    1414:	82 0f       	add	r24, r18
    1416:	93 1f       	adc	r25, r19
    1418:	90 93 a9 01 	sts	0x01A9, r25
    141c:	80 93 a8 01 	sts	0x01A8, r24
    1420:	2c c0       	rjmp	.+88     	; 0x147a <ausgabeUSB2+0x270>
			case 6: OutH1 += OutHH1;break; // 
    1422:	80 91 ba 01 	lds	r24, 0x01BA
    1426:	90 91 bb 01 	lds	r25, 0x01BB
    142a:	20 91 b4 01 	lds	r18, 0x01B4
    142e:	30 91 b5 01 	lds	r19, 0x01B5
    1432:	82 0f       	add	r24, r18
    1434:	93 1f       	adc	r25, r19
    1436:	90 93 bb 01 	sts	0x01BB, r25
    143a:	80 93 ba 01 	sts	0x01BA, r24
    143e:	1d c0       	rjmp	.+58     	; 0x147a <ausgabeUSB2+0x270>
			case 7: OutH2 += OutHH2;break; // 
    1440:	80 91 bc 01 	lds	r24, 0x01BC
    1444:	90 91 bd 01 	lds	r25, 0x01BD
    1448:	20 91 b6 01 	lds	r18, 0x01B6
    144c:	30 91 b7 01 	lds	r19, 0x01B7
    1450:	82 0f       	add	r24, r18
    1452:	93 1f       	adc	r25, r19
    1454:	90 93 bd 01 	sts	0x01BD, r25
    1458:	80 93 bc 01 	sts	0x01BC, r24
    145c:	0e c0       	rjmp	.+28     	; 0x147a <ausgabeUSB2+0x270>
			case 8: OutH3 += OutHH3;break;
    145e:	80 91 be 01 	lds	r24, 0x01BE
    1462:	90 91 bf 01 	lds	r25, 0x01BF
    1466:	20 91 b8 01 	lds	r18, 0x01B8
    146a:	30 91 b9 01 	lds	r19, 0x01B9
    146e:	82 0f       	add	r24, r18
    1470:	93 1f       	adc	r25, r19
    1472:	90 93 bf 01 	sts	0x01BF, r25
    1476:	80 93 be 01 	sts	0x01BE, r24
			default: break;
		}

//		*/
		if ( (!(datenSatzZaehler % (50*ausgabefaktor))) &&
    147a:	60 91 65 00 	lds	r22, 0x0065
    147e:	82 e3       	ldi	r24, 0x32	; 50
    1480:	68 9f       	mul	r22, r24
    1482:	b0 01       	movw	r22, r0
    1484:	11 24       	eor	r1, r1
    1486:	cf 01       	movw	r24, r30
    1488:	0e 94 4c 11 	call	0x2298	; 0x2298 <__udivmodhi4>
    148c:	89 2b       	or	r24, r25
    148e:	09 f0       	breq	.+2      	; 0x1492 <ausgabeUSB2+0x288>
    1490:	90 c1       	rjmp	.+800    	; 0x17b2 <ausgabeUSB2+0x5a8>
    1492:	80 91 cc 01 	lds	r24, 0x01CC
    1496:	88 23       	and	r24, r24
    1498:	09 f4       	brne	.+2      	; 0x149c <ausgabeUSB2+0x292>
    149a:	8b c1       	rjmp	.+790    	; 0x17b2 <ausgabeUSB2+0x5a8>
					(logStart > 0) )  { //50 = 0,5Sekunden
			OutL  /=  5;	// Mittelwertbildung
    149c:	80 91 a0 01 	lds	r24, 0x01A0
    14a0:	90 91 a1 01 	lds	r25, 0x01A1
    14a4:	65 e0       	ldi	r22, 0x05	; 5
    14a6:	70 e0       	ldi	r23, 0x00	; 0
    14a8:	0e 94 4c 11 	call	0x2298	; 0x2298 <__udivmodhi4>
    14ac:	9b 01       	movw	r18, r22
    14ae:	60 93 a0 01 	sts	0x01A0, r22
    14b2:	30 93 a1 01 	sts	0x01A1, r19
			OutR  /=  5;		
    14b6:	80 91 a2 01 	lds	r24, 0x01A2
    14ba:	90 91 a3 01 	lds	r25, 0x01A3
    14be:	65 e0       	ldi	r22, 0x05	; 5
    14c0:	70 e0       	ldi	r23, 0x00	; 0
    14c2:	0e 94 4c 11 	call	0x2298	; 0x2298 <__udivmodhi4>
    14c6:	70 93 a3 01 	sts	0x01A3, r23
    14ca:	60 93 a2 01 	sts	0x01A2, r22
			OutV  /=  5;
    14ce:	80 91 a4 01 	lds	r24, 0x01A4
    14d2:	90 91 a5 01 	lds	r25, 0x01A5
    14d6:	65 e0       	ldi	r22, 0x05	; 5
    14d8:	70 e0       	ldi	r23, 0x00	; 0
    14da:	0e 94 4c 11 	call	0x2298	; 0x2298 <__udivmodhi4>
    14de:	70 93 a5 01 	sts	0x01A5, r23
    14e2:	60 93 a4 01 	sts	0x01A4, r22
			OutS  /=  5;
    14e6:	80 91 a6 01 	lds	r24, 0x01A6
    14ea:	90 91 a7 01 	lds	r25, 0x01A7
    14ee:	65 e0       	ldi	r22, 0x05	; 5
    14f0:	70 e0       	ldi	r23, 0x00	; 0
    14f2:	0e 94 4c 11 	call	0x2298	; 0x2298 <__udivmodhi4>
    14f6:	70 93 a7 01 	sts	0x01A7, r23
    14fa:	60 93 a6 01 	sts	0x01A6, r22
			OutFR /=  5;
    14fe:	80 91 a8 01 	lds	r24, 0x01A8
    1502:	90 91 a9 01 	lds	r25, 0x01A9
    1506:	65 e0       	ldi	r22, 0x05	; 5
    1508:	70 e0       	ldi	r23, 0x00	; 0
    150a:	0e 94 4c 11 	call	0x2298	; 0x2298 <__udivmodhi4>
    150e:	70 93 a9 01 	sts	0x01A9, r23
    1512:	60 93 a8 01 	sts	0x01A8, r22
			OutH1 /=  5;
    1516:	80 91 ba 01 	lds	r24, 0x01BA
    151a:	90 91 bb 01 	lds	r25, 0x01BB
    151e:	65 e0       	ldi	r22, 0x05	; 5
    1520:	70 e0       	ldi	r23, 0x00	; 0
    1522:	0e 94 4c 11 	call	0x2298	; 0x2298 <__udivmodhi4>
    1526:	70 93 bb 01 	sts	0x01BB, r23
    152a:	60 93 ba 01 	sts	0x01BA, r22
			OutH2 /=  5;
    152e:	80 91 bc 01 	lds	r24, 0x01BC
    1532:	90 91 bd 01 	lds	r25, 0x01BD
    1536:	65 e0       	ldi	r22, 0x05	; 5
    1538:	70 e0       	ldi	r23, 0x00	; 0
    153a:	0e 94 4c 11 	call	0x2298	; 0x2298 <__udivmodhi4>
    153e:	70 93 bd 01 	sts	0x01BD, r23
    1542:	60 93 bc 01 	sts	0x01BC, r22
			OutH3 /=  5;
    1546:	80 91 be 01 	lds	r24, 0x01BE
    154a:	90 91 bf 01 	lds	r25, 0x01BF
    154e:	65 e0       	ldi	r22, 0x05	; 5
    1550:	70 e0       	ldi	r23, 0x00	; 0
    1552:	0e 94 4c 11 	call	0x2298	; 0x2298 <__udivmodhi4>
    1556:	70 93 bf 01 	sts	0x01BF, r23
    155a:	60 93 be 01 	sts	0x01BE, r22
				
			if(logCmOnOff == 1) {
    155e:	80 91 c9 01 	lds	r24, 0x01C9
    1562:	81 30       	cpi	r24, 0x01	; 1
    1564:	f1 f4       	brne	.+60     	; 0x15a2 <ausgabeUSB2+0x398>
				//Linearisierung der Analogwerte mittels einer Hyperbel 2. Ordnung
				//x0,7 Sensor schaut im Winkel von 45° auf die Wand
				// SensorWinkel... als globale Vatiable in global.h definiert
				OutL = linearisierungAD (OutL,SensorWinkelLinks);
    1566:	c9 01       	movw	r24, r18
    1568:	66 e4       	ldi	r22, 0x46	; 70
    156a:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <linearisierungAD>
    156e:	90 93 a1 01 	sts	0x01A1, r25
    1572:	80 93 a0 01 	sts	0x01A0, r24
				OutR = linearisierungAD (OutR,SensorWinkelRechts);
    1576:	80 91 a2 01 	lds	r24, 0x01A2
    157a:	90 91 a3 01 	lds	r25, 0x01A3
    157e:	66 e4       	ldi	r22, 0x46	; 70
    1580:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <linearisierungAD>
    1584:	90 93 a3 01 	sts	0x01A3, r25
    1588:	80 93 a2 01 	sts	0x01A2, r24
				OutV = linearisierungAD (OutV,SensorWinkelGeradeaus);
    158c:	80 91 a4 01 	lds	r24, 0x01A4
    1590:	90 91 a5 01 	lds	r25, 0x01A5
    1594:	64 e6       	ldi	r22, 0x64	; 100
    1596:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <linearisierungAD>
    159a:	90 93 a5 01 	sts	0x01A5, r25
    159e:	80 93 a4 01 	sts	0x01A4, r24
//					historyAverage1OutEx = linearisierungAD (historyAverage1OutEx,10);	
			}
	
			itoa(datenSatzZaehler/100,texth,10);	// wandle die Ausgabezeit (interger) in acsii um
    15a2:	80 91 e6 00 	lds	r24, 0x00E6
    15a6:	90 91 e7 00 	lds	r25, 0x00E7
    15aa:	64 e6       	ldi	r22, 0x64	; 100
    15ac:	70 e0       	ldi	r23, 0x00	; 0
    15ae:	0e 94 4c 11 	call	0x2298	; 0x2298 <__udivmodhi4>
    15b2:	cb 01       	movw	r24, r22
    15b4:	61 e5       	ldi	r22, 0x51	; 81
    15b6:	72 e0       	ldi	r23, 0x02	; 2
    15b8:	4a e0       	ldi	r20, 0x0A	; 10
    15ba:	50 e0       	ldi	r21, 0x00	; 0
    15bc:	0e 94 a8 12 	call	0x2550	; 0x2550 <itoa>
			strcat(texth,tab);						// Text anhaengen
    15c0:	81 e5       	ldi	r24, 0x51	; 81
    15c2:	92 e0       	ldi	r25, 0x02	; 2
    15c4:	62 eb       	ldi	r22, 0xB2	; 178
    15c6:	70 e0       	ldi	r23, 0x00	; 0
    15c8:	0e 94 96 12 	call	0x252c	; 0x252c <strcat>
			uart_puts(texth);
    15cc:	81 e5       	ldi	r24, 0x51	; 81
    15ce:	92 e0       	ldi	r25, 0x02	; 2
    15d0:	0e 94 19 02 	call	0x432	; 0x432 <uart_puts>
				
			if (logMod & 0x02){	
    15d4:	80 91 cf 01 	lds	r24, 0x01CF
    15d8:	81 ff       	sbrs	r24, 1
    15da:	14 c0       	rjmp	.+40     	; 0x1604 <ausgabeUSB2+0x3fa>
				itoa(OutL,texth,10);  // Sensor Links
    15dc:	80 91 a0 01 	lds	r24, 0x01A0
    15e0:	90 91 a1 01 	lds	r25, 0x01A1
    15e4:	61 e5       	ldi	r22, 0x51	; 81
    15e6:	72 e0       	ldi	r23, 0x02	; 2
    15e8:	4a e0       	ldi	r20, 0x0A	; 10
    15ea:	50 e0       	ldi	r21, 0x00	; 0
    15ec:	0e 94 a8 12 	call	0x2550	; 0x2550 <itoa>
				strcat(texth,tab);	
    15f0:	81 e5       	ldi	r24, 0x51	; 81
    15f2:	92 e0       	ldi	r25, 0x02	; 2
    15f4:	62 eb       	ldi	r22, 0xB2	; 178
    15f6:	70 e0       	ldi	r23, 0x00	; 0
    15f8:	0e 94 96 12 	call	0x252c	; 0x252c <strcat>
				uart_puts(texth);
    15fc:	81 e5       	ldi	r24, 0x51	; 81
    15fe:	92 e0       	ldi	r25, 0x02	; 2
    1600:	0e 94 19 02 	call	0x432	; 0x432 <uart_puts>
			}
			if (logMod & 0x04){				
    1604:	80 91 cf 01 	lds	r24, 0x01CF
    1608:	82 ff       	sbrs	r24, 2
    160a:	14 c0       	rjmp	.+40     	; 0x1634 <ausgabeUSB2+0x42a>
				itoa(OutV,texth,10);  // Sensor Vorne		
    160c:	80 91 a4 01 	lds	r24, 0x01A4
    1610:	90 91 a5 01 	lds	r25, 0x01A5
    1614:	61 e5       	ldi	r22, 0x51	; 81
    1616:	72 e0       	ldi	r23, 0x02	; 2
    1618:	4a e0       	ldi	r20, 0x0A	; 10
    161a:	50 e0       	ldi	r21, 0x00	; 0
    161c:	0e 94 a8 12 	call	0x2550	; 0x2550 <itoa>
				strcat(texth,tab);	
    1620:	81 e5       	ldi	r24, 0x51	; 81
    1622:	92 e0       	ldi	r25, 0x02	; 2
    1624:	62 eb       	ldi	r22, 0xB2	; 178
    1626:	70 e0       	ldi	r23, 0x00	; 0
    1628:	0e 94 96 12 	call	0x252c	; 0x252c <strcat>
				uart_puts(texth);
    162c:	81 e5       	ldi	r24, 0x51	; 81
    162e:	92 e0       	ldi	r25, 0x02	; 2
    1630:	0e 94 19 02 	call	0x432	; 0x432 <uart_puts>
			}
			if (logMod & 0x08){				
    1634:	80 91 cf 01 	lds	r24, 0x01CF
    1638:	83 ff       	sbrs	r24, 3
    163a:	14 c0       	rjmp	.+40     	; 0x1664 <ausgabeUSB2+0x45a>
				itoa(OutR,texth,10);  // Sensor Rechts		 
    163c:	80 91 a2 01 	lds	r24, 0x01A2
    1640:	90 91 a3 01 	lds	r25, 0x01A3
    1644:	61 e5       	ldi	r22, 0x51	; 81
    1646:	72 e0       	ldi	r23, 0x02	; 2
    1648:	4a e0       	ldi	r20, 0x0A	; 10
    164a:	50 e0       	ldi	r21, 0x00	; 0
    164c:	0e 94 a8 12 	call	0x2550	; 0x2550 <itoa>
				strcat(texth,tab);	
    1650:	81 e5       	ldi	r24, 0x51	; 81
    1652:	92 e0       	ldi	r25, 0x02	; 2
    1654:	62 eb       	ldi	r22, 0xB2	; 178
    1656:	70 e0       	ldi	r23, 0x00	; 0
    1658:	0e 94 96 12 	call	0x252c	; 0x252c <strcat>
				uart_puts(texth);
    165c:	81 e5       	ldi	r24, 0x51	; 81
    165e:	92 e0       	ldi	r25, 0x02	; 2
    1660:	0e 94 19 02 	call	0x432	; 0x432 <uart_puts>
			}
			if (logMod & 0x10){				
    1664:	80 91 cf 01 	lds	r24, 0x01CF
    1668:	84 ff       	sbrs	r24, 4
    166a:	19 c0       	rjmp	.+50     	; 0x169e <ausgabeUSB2+0x494>
				itoa(getServoM((int16_t)OutS),texth,10);  			// Servo / Lenkung			 
    166c:	80 91 a6 01 	lds	r24, 0x01A6
    1670:	90 91 a7 01 	lds	r25, 0x01A7
    1674:	0e 94 20 10 	call	0x2040	; 0x2040 <getServoM>
    1678:	99 27       	eor	r25, r25
    167a:	87 fd       	sbrc	r24, 7
    167c:	90 95       	com	r25
    167e:	61 e5       	ldi	r22, 0x51	; 81
    1680:	72 e0       	ldi	r23, 0x02	; 2
    1682:	4a e0       	ldi	r20, 0x0A	; 10
    1684:	50 e0       	ldi	r21, 0x00	; 0
    1686:	0e 94 a8 12 	call	0x2550	; 0x2550 <itoa>
				strcat(texth,tab);	
    168a:	81 e5       	ldi	r24, 0x51	; 81
    168c:	92 e0       	ldi	r25, 0x02	; 2
    168e:	62 eb       	ldi	r22, 0xB2	; 178
    1690:	70 e0       	ldi	r23, 0x00	; 0
    1692:	0e 94 96 12 	call	0x252c	; 0x252c <strcat>
				uart_puts(texth);
    1696:	81 e5       	ldi	r24, 0x51	; 81
    1698:	92 e0       	ldi	r25, 0x02	; 2
    169a:	0e 94 19 02 	call	0x432	; 0x432 <uart_puts>
			}
			if (logMod & 0x20){				
    169e:	80 91 cf 01 	lds	r24, 0x01CF
    16a2:	85 ff       	sbrs	r24, 5
    16a4:	19 c0       	rjmp	.+50     	; 0x16d8 <ausgabeUSB2+0x4ce>
				itoa(getFahrM((int16_t)OutFR),texth,10);  			// Antrieb / Fahrtenregler			 
    16a6:	80 91 a8 01 	lds	r24, 0x01A8
    16aa:	90 91 a9 01 	lds	r25, 0x01A9
    16ae:	0e 94 42 10 	call	0x2084	; 0x2084 <getFahrM>
    16b2:	99 27       	eor	r25, r25
    16b4:	87 fd       	sbrc	r24, 7
    16b6:	90 95       	com	r25
    16b8:	61 e5       	ldi	r22, 0x51	; 81
    16ba:	72 e0       	ldi	r23, 0x02	; 2
    16bc:	4a e0       	ldi	r20, 0x0A	; 10
    16be:	50 e0       	ldi	r21, 0x00	; 0
    16c0:	0e 94 a8 12 	call	0x2550	; 0x2550 <itoa>
				strcat(texth,tab);
    16c4:	81 e5       	ldi	r24, 0x51	; 81
    16c6:	92 e0       	ldi	r25, 0x02	; 2
    16c8:	62 eb       	ldi	r22, 0xB2	; 178
    16ca:	70 e0       	ldi	r23, 0x00	; 0
    16cc:	0e 94 96 12 	call	0x252c	; 0x252c <strcat>
				uart_puts(texth);
    16d0:	81 e5       	ldi	r24, 0x51	; 81
    16d2:	92 e0       	ldi	r25, 0x02	; 2
    16d4:	0e 94 19 02 	call	0x432	; 0x432 <uart_puts>
			}
			if (analogwertAkku < AKKUGRENZWERT){	
    16d8:	80 91 33 02 	lds	r24, 0x0233
    16dc:	90 91 34 02 	lds	r25, 0x0234
    16e0:	23 e0       	ldi	r18, 0x03	; 3
    16e2:	8e 33       	cpi	r24, 0x3E	; 62
    16e4:	92 07       	cpc	r25, r18
    16e6:	80 f4       	brcc	.+32     	; 0x1708 <ausgabeUSB2+0x4fe>
				itoa(analogwertAkku,texth,10);  // Akku, analog			 
    16e8:	61 e5       	ldi	r22, 0x51	; 81
    16ea:	72 e0       	ldi	r23, 0x02	; 2
    16ec:	4a e0       	ldi	r20, 0x0A	; 10
    16ee:	50 e0       	ldi	r21, 0x00	; 0
    16f0:	0e 94 a8 12 	call	0x2550	; 0x2550 <itoa>
				strcat(texth,tab);
    16f4:	81 e5       	ldi	r24, 0x51	; 81
    16f6:	92 e0       	ldi	r25, 0x02	; 2
    16f8:	62 eb       	ldi	r22, 0xB2	; 178
    16fa:	70 e0       	ldi	r23, 0x00	; 0
    16fc:	0e 94 96 12 	call	0x252c	; 0x252c <strcat>
				uart_puts(texth);	
    1700:	81 e5       	ldi	r24, 0x51	; 81
    1702:	92 e0       	ldi	r25, 0x02	; 2
    1704:	0e 94 19 02 	call	0x432	; 0x432 <uart_puts>
		//	if (logMod & 0x40){	
		//		itoa(mod,texth,10);   
		//		strcat(texth,tab);
		//		uart_puts(texth);	
		//	}
			if (logMod & 0x80){	
    1708:	80 91 cf 01 	lds	r24, 0x01CF
    170c:	87 ff       	sbrs	r24, 7
    170e:	40 c0       	rjmp	.+128    	; 0x1790 <ausgabeUSB2+0x586>
				itoa(ausgabe1,texth,10);   
    1710:	80 91 d2 01 	lds	r24, 0x01D2
    1714:	90 91 d3 01 	lds	r25, 0x01D3
    1718:	61 e5       	ldi	r22, 0x51	; 81
    171a:	72 e0       	ldi	r23, 0x02	; 2
    171c:	4a e0       	ldi	r20, 0x0A	; 10
    171e:	50 e0       	ldi	r21, 0x00	; 0
    1720:	0e 94 a8 12 	call	0x2550	; 0x2550 <itoa>
				strcat(texth,tab);
    1724:	81 e5       	ldi	r24, 0x51	; 81
    1726:	92 e0       	ldi	r25, 0x02	; 2
    1728:	62 eb       	ldi	r22, 0xB2	; 178
    172a:	70 e0       	ldi	r23, 0x00	; 0
    172c:	0e 94 96 12 	call	0x252c	; 0x252c <strcat>
				uart_puts(texth);	
    1730:	81 e5       	ldi	r24, 0x51	; 81
    1732:	92 e0       	ldi	r25, 0x02	; 2
    1734:	0e 94 19 02 	call	0x432	; 0x432 <uart_puts>
				
				itoa(ausgabe2,texth,10);   
    1738:	80 91 d4 01 	lds	r24, 0x01D4
    173c:	90 91 d5 01 	lds	r25, 0x01D5
    1740:	61 e5       	ldi	r22, 0x51	; 81
    1742:	72 e0       	ldi	r23, 0x02	; 2
    1744:	4a e0       	ldi	r20, 0x0A	; 10
    1746:	50 e0       	ldi	r21, 0x00	; 0
    1748:	0e 94 a8 12 	call	0x2550	; 0x2550 <itoa>
				strcat(texth,tab);
    174c:	81 e5       	ldi	r24, 0x51	; 81
    174e:	92 e0       	ldi	r25, 0x02	; 2
    1750:	62 eb       	ldi	r22, 0xB2	; 178
    1752:	70 e0       	ldi	r23, 0x00	; 0
    1754:	0e 94 96 12 	call	0x252c	; 0x252c <strcat>
				uart_puts(texth);	
    1758:	81 e5       	ldi	r24, 0x51	; 81
    175a:	92 e0       	ldi	r25, 0x02	; 2
    175c:	0e 94 19 02 	call	0x432	; 0x432 <uart_puts>
				
				itoa(ausgabe3,texth,10);   
    1760:	80 91 d6 01 	lds	r24, 0x01D6
    1764:	90 91 d7 01 	lds	r25, 0x01D7
    1768:	61 e5       	ldi	r22, 0x51	; 81
    176a:	72 e0       	ldi	r23, 0x02	; 2
    176c:	4a e0       	ldi	r20, 0x0A	; 10
    176e:	50 e0       	ldi	r21, 0x00	; 0
    1770:	0e 94 a8 12 	call	0x2550	; 0x2550 <itoa>
				strcat(texth,tab);
    1774:	81 e5       	ldi	r24, 0x51	; 81
    1776:	92 e0       	ldi	r25, 0x02	; 2
    1778:	62 eb       	ldi	r22, 0xB2	; 178
    177a:	70 e0       	ldi	r23, 0x00	; 0
    177c:	0e 94 96 12 	call	0x252c	; 0x252c <strcat>
				uart_puts(texth);	
    1780:	81 e5       	ldi	r24, 0x51	; 81
    1782:	92 e0       	ldi	r25, 0x02	; 2
    1784:	0e 94 19 02 	call	0x432	; 0x432 <uart_puts>
				
				uart_puts(ausgabeT);		
    1788:	87 ed       	ldi	r24, 0xD7	; 215
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	0e 94 19 02 	call	0x432	; 0x432 <uart_puts>
			}			
							
			if ( (datenSatzZaehler % (50*ausgabefaktor)) == 0 ){
    1790:	60 91 65 00 	lds	r22, 0x0065
    1794:	82 e3       	ldi	r24, 0x32	; 50
    1796:	68 9f       	mul	r22, r24
    1798:	b0 01       	movw	r22, r0
    179a:	11 24       	eor	r1, r1
    179c:	80 91 e6 00 	lds	r24, 0x00E6
    17a0:	90 91 e7 00 	lds	r25, 0x00E7
    17a4:	0e 94 4c 11 	call	0x2298	; 0x2298 <__udivmodhi4>
    17a8:	89 2b       	or	r24, r25
    17aa:	19 f4       	brne	.+6      	; 0x17b2 <ausgabeUSB2+0x5a8>
				uart_putc('\r');			
    17ac:	8d e0       	ldi	r24, 0x0D	; 13
    17ae:	0e 94 07 02 	call	0x40e	; 0x40e <uart_putc>
			}		
		}
		if ( !(datenSatzZaehler % 50) ) {
    17b2:	80 91 e6 00 	lds	r24, 0x00E6
    17b6:	90 91 e7 00 	lds	r25, 0x00E7
    17ba:	62 e3       	ldi	r22, 0x32	; 50
    17bc:	70 e0       	ldi	r23, 0x00	; 0
    17be:	0e 94 4c 11 	call	0x2298	; 0x2298 <__udivmodhi4>
    17c2:	89 2b       	or	r24, r25
    17c4:	19 f5       	brne	.+70     	; 0x180c <ausgabeUSB2+0x602>
			//Mittelwerte für neue Berechung auf 0 zurücksetzen 
			OutL  = 0;
    17c6:	10 92 a1 01 	sts	0x01A1, r1
    17ca:	10 92 a0 01 	sts	0x01A0, r1
			OutR  = 0;		
    17ce:	10 92 a3 01 	sts	0x01A3, r1
    17d2:	10 92 a2 01 	sts	0x01A2, r1
			OutV  = 0;
    17d6:	10 92 a5 01 	sts	0x01A5, r1
    17da:	10 92 a4 01 	sts	0x01A4, r1
			OutS  = 0;
    17de:	10 92 a7 01 	sts	0x01A7, r1
    17e2:	10 92 a6 01 	sts	0x01A6, r1
			OutFR = 0;
    17e6:	10 92 a9 01 	sts	0x01A9, r1
    17ea:	10 92 a8 01 	sts	0x01A8, r1
			OutH1 = 0;
    17ee:	10 92 bb 01 	sts	0x01BB, r1
    17f2:	10 92 ba 01 	sts	0x01BA, r1
			OutH2 = 0;
    17f6:	10 92 bd 01 	sts	0x01BD, r1
    17fa:	10 92 bc 01 	sts	0x01BC, r1
			OutH3 = 0;
    17fe:	10 92 bf 01 	sts	0x01BF, r1
    1802:	10 92 be 01 	sts	0x01BE, r1
			
			logStart=1;
    1806:	81 e0       	ldi	r24, 0x01	; 1
    1808:	80 93 cc 01 	sts	0x01CC, r24
    180c:	08 95       	ret

0000180e <eingabeUSB>:
#include "cc-lib.h"

#define  MAXLINKS		500
#define  MAXRECHTS	1100

void eingabeUSB(void){
    180e:	0f 93       	push	r16
    1810:	1f 93       	push	r17
    1812:	cf 93       	push	r28
    1814:	df 93       	push	r29
//wertet sie aus. Eine Eingabe muss mit einem Leerzeichen (Space) abschließen!
//Die eingegebenen Kommandows werden ausgewertet, z.B. "log " aktiviert 
//die Kontrollausgabe (logging) auf der USB-Terminal-Schnittstelle.

		//lese von USB solang Zeichen ein bis ein Leerzeichen kommt
		wert   = uart_getc();	//
    1816:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <uart_getc>
    181a:	9c 01       	movw	r18, r24
    181c:	90 93 48 02 	sts	0x0248, r25
    1820:	80 93 47 02 	sts	0x0247, r24
		zeichen= (char)wert;
    1824:	98 2f       	mov	r25, r24
    1826:	20 93 6e 02 	sts	0x026E, r18

		if (wert != USART_NO_DATA){	//ein neues Zeichen?
    182a:	81 e0       	ldi	r24, 0x01	; 1
    182c:	20 30       	cpi	r18, 0x00	; 0
    182e:	38 07       	cpc	r19, r24
    1830:	51 f0       	breq	.+20     	; 0x1846 <eingabeUSB+0x38>
		//	uart_putc(zeichen) ;			//Testausgabe
			eingabe[j] = zeichen ;
    1832:	80 91 c6 01 	lds	r24, 0x01C6
    1836:	e8 2f       	mov	r30, r24
    1838:	f0 e0       	ldi	r31, 0x00	; 0
    183a:	ef 58       	subi	r30, 0x8F	; 143
    183c:	fd 4f       	sbci	r31, 0xFD	; 253
    183e:	20 83       	st	Z, r18
			j++;		
    1840:	8f 5f       	subi	r24, 0xFF	; 255
    1842:	80 93 c6 01 	sts	0x01C6, r24
		}
		if (j >= MAXEINGABE) j=0;	//neue Zeichenkette einlesen		
    1846:	80 91 c6 01 	lds	r24, 0x01C6
    184a:	89 31       	cpi	r24, 0x19	; 25
    184c:	10 f0       	brcs	.+4      	; 0x1852 <eingabeUSB+0x44>
    184e:	10 92 c6 01 	sts	0x01C6, r1
		
		if (zeichen == ' ') {
    1852:	90 32       	cpi	r25, 0x20	; 32
    1854:	91 f4       	brne	.+36     	; 0x187a <eingabeUSB+0x6c>
			if (j != 1){
    1856:	e0 91 c6 01 	lds	r30, 0x01C6
    185a:	e1 30       	cpi	r30, 0x01	; 1
    185c:	61 f0       	breq	.+24     	; 0x1876 <eingabeUSB+0x68>
				eingabe[j-1] = '\0';		//Endekennung
    185e:	f0 e0       	ldi	r31, 0x00	; 0
    1860:	ef 58       	subi	r30, 0x8F	; 143
    1862:	fd 4f       	sbci	r31, 0xFD	; 253
    1864:	12 92       	st	-Z, r1
    1866:	31 96       	adiw	r30, 0x01	; 1
				eingabe[j] = '\0';		//Endekennung
    1868:	10 82       	st	Z, r1
				//uart_putc('\r');	
				kommand = 1;	//neues Kommando 
    186a:	81 e0       	ldi	r24, 0x01	; 1
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	90 93 d1 01 	sts	0x01D1, r25
    1872:	80 93 d0 01 	sts	0x01D0, r24
			}
			j=0;	//neue Zeichenkette einlesen			
    1876:	10 92 c6 01 	sts	0x01C6, r1
		}
		
		//Überprüfe das neue Kommando und führe es ggf. aus
		if (kommand == 1){ 
    187a:	80 91 d0 01 	lds	r24, 0x01D0
    187e:	90 91 d1 01 	lds	r25, 0x01D1
    1882:	01 97       	sbiw	r24, 0x01	; 1
    1884:	09 f0       	breq	.+2      	; 0x1888 <eingabeUSB+0x7a>
    1886:	6e c2       	rjmp	.+1244   	; 0x1d64 <eingabeUSB+0x556>
			//Prüfe Kommandows
			int i,zahl,n=0;
			befehl = -1;
    1888:	8f ef       	ldi	r24, 0xFF	; 255
    188a:	80 93 4e 02 	sts	0x024E, r24
			for (i=0; (i < anzahl) && (befehl == -1); i++){		
    188e:	80 91 63 00 	lds	r24, 0x0063
    1892:	68 2f       	mov	r22, r24
    1894:	77 27       	eor	r23, r23
    1896:	67 fd       	sbrc	r22, 7
    1898:	70 95       	com	r23
    189a:	20 e0       	ldi	r18, 0x00	; 0
    189c:	30 e0       	ldi	r19, 0x00	; 0
    189e:	c0 e0       	ldi	r28, 0x00	; 0
    18a0:	d0 e0       	ldi	r29, 0x00	; 0
    18a2:	4f ef       	ldi	r20, 0xFF	; 255
    18a4:	11 c0       	rjmp	.+34     	; 0x18c8 <eingabeUSB+0xba>
				for (n=0; (kommandos[i][n] == eingabe[n]) && (kommandos[i][n] != '\0'); n++);
    18a6:	21 96       	adiw	r28, 0x01	; 1
    18a8:	9c 91       	ld	r25, X
    18aa:	fe 01       	movw	r30, r28
    18ac:	ef 58       	subi	r30, 0x8F	; 143
    18ae:	fd 4f       	sbci	r31, 0xFD	; 253
    18b0:	80 81       	ld	r24, Z
    18b2:	98 17       	cp	r25, r24
    18b4:	21 f4       	brne	.+8      	; 0x18be <eingabeUSB+0xb0>
    18b6:	11 96       	adiw	r26, 0x01	; 1
    18b8:	99 23       	and	r25, r25
    18ba:	a9 f7       	brne	.-22     	; 0x18a6 <eingabeUSB+0x98>
    18bc:	02 c0       	rjmp	.+4      	; 0x18c2 <eingabeUSB+0xb4>
				if (kommandos[i][n] == '\0') befehl = i;		
    18be:	99 23       	and	r25, r25
    18c0:	09 f4       	brne	.+2      	; 0x18c4 <eingabeUSB+0xb6>
    18c2:	42 2f       	mov	r20, r18
		//Überprüfe das neue Kommando und führe es ggf. aus
		if (kommand == 1){ 
			//Prüfe Kommandows
			int i,zahl,n=0;
			befehl = -1;
			for (i=0; (i < anzahl) && (befehl == -1); i++){		
    18c4:	2f 5f       	subi	r18, 0xFF	; 255
    18c6:	3f 4f       	sbci	r19, 0xFF	; 255
    18c8:	26 17       	cp	r18, r22
    18ca:	37 07       	cpc	r19, r23
    18cc:	64 f4       	brge	.+24     	; 0x18e6 <eingabeUSB+0xd8>
    18ce:	4f 3f       	cpi	r20, 0xFF	; 255
    18d0:	51 f4       	brne	.+20     	; 0x18e6 <eingabeUSB+0xd8>
    18d2:	d9 01       	movw	r26, r18
    18d4:	aa 0f       	add	r26, r26
    18d6:	bb 1f       	adc	r27, r27
    18d8:	aa 0f       	add	r26, r26
    18da:	bb 1f       	adc	r27, r27
    18dc:	a9 57       	subi	r26, 0x79	; 121
    18de:	bf 4f       	sbci	r27, 0xFF	; 255
    18e0:	c0 e0       	ldi	r28, 0x00	; 0
    18e2:	d0 e0       	ldi	r29, 0x00	; 0
    18e4:	e1 cf       	rjmp	.-62     	; 0x18a8 <eingabeUSB+0x9a>
    18e6:	40 93 4e 02 	sts	0x024E, r20
    18ea:	8e 01       	movw	r16, r28
				if (kommandos[i][n] == '\0') befehl = i;		
			}
			  //itoa(befehl,texth,10);  //Kontrollausgabe
			  //strcat(texth2,texth);
			  //uart_puts(texth2); uart_putc('\r');
			if ( !(datenSatzZaehler % 100) ){ //nur zu vollen Sekunde eintreten
    18ec:	80 91 e6 00 	lds	r24, 0x00E6
    18f0:	90 91 e7 00 	lds	r25, 0x00E7
    18f4:	64 e6       	ldi	r22, 0x64	; 100
    18f6:	70 e0       	ldi	r23, 0x00	; 0
    18f8:	0e 94 4c 11 	call	0x2298	; 0x2298 <__udivmodhi4>
    18fc:	89 2b       	or	r24, r25
    18fe:	09 f0       	breq	.+2      	; 0x1902 <eingabeUSB+0xf4>
    1900:	31 c2       	rjmp	.+1122   	; 0x1d64 <eingabeUSB+0x556>
				//Kommandow ausgeben
				uart_putc('\r');
    1902:	8d e0       	ldi	r24, 0x0D	; 13
    1904:	0e 94 07 02 	call	0x40e	; 0x40e <uart_putc>
				uart_puts(gleichText); uart_puts(grosserText);
    1908:	83 e8       	ldi	r24, 0x83	; 131
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	0e 94 19 02 	call	0x432	; 0x432 <uart_puts>
    1910:	85 e8       	ldi	r24, 0x85	; 133
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	0e 94 19 02 	call	0x432	; 0x432 <uart_puts>
				uart_putc(' ');uart_putc(' ');
    1918:	80 e2       	ldi	r24, 0x20	; 32
    191a:	0e 94 07 02 	call	0x40e	; 0x40e <uart_putc>
    191e:	80 e2       	ldi	r24, 0x20	; 32
    1920:	0e 94 07 02 	call	0x40e	; 0x40e <uart_putc>
				uart_puts(eingabe);		
    1924:	81 e7       	ldi	r24, 0x71	; 113
    1926:	92 e0       	ldi	r25, 0x02	; 2
    1928:	0e 94 19 02 	call	0x432	; 0x432 <uart_puts>
		
				switch (befehl) {
    192c:	80 91 4e 02 	lds	r24, 0x024E
    1930:	84 30       	cpi	r24, 0x04	; 4
    1932:	09 f4       	brne	.+2      	; 0x1936 <eingabeUSB+0x128>
    1934:	ce c0       	rjmp	.+412    	; 0x1ad2 <eingabeUSB+0x2c4>
    1936:	85 30       	cpi	r24, 0x05	; 5
    1938:	6c f4       	brge	.+26     	; 0x1954 <eingabeUSB+0x146>
    193a:	81 30       	cpi	r24, 0x01	; 1
    193c:	01 f1       	breq	.+64     	; 0x197e <eingabeUSB+0x170>
    193e:	82 30       	cpi	r24, 0x02	; 2
    1940:	1c f4       	brge	.+6      	; 0x1948 <eingabeUSB+0x13a>
    1942:	88 23       	and	r24, r24
    1944:	a1 f0       	breq	.+40     	; 0x196e <eingabeUSB+0x160>
    1946:	f5 c1       	rjmp	.+1002   	; 0x1d32 <eingabeUSB+0x524>
    1948:	82 30       	cpi	r24, 0x02	; 2
    194a:	09 f1       	breq	.+66     	; 0x198e <eingabeUSB+0x180>
    194c:	83 30       	cpi	r24, 0x03	; 3
    194e:	09 f0       	breq	.+2      	; 0x1952 <eingabeUSB+0x144>
    1950:	f0 c1       	rjmp	.+992    	; 0x1d32 <eingabeUSB+0x524>
    1952:	b2 c0       	rjmp	.+356    	; 0x1ab8 <eingabeUSB+0x2aa>
    1954:	86 30       	cpi	r24, 0x06	; 6
    1956:	09 f4       	brne	.+2      	; 0x195a <eingabeUSB+0x14c>
    1958:	20 c1       	rjmp	.+576    	; 0x1b9a <eingabeUSB+0x38c>
    195a:	86 30       	cpi	r24, 0x06	; 6
    195c:	0c f4       	brge	.+2      	; 0x1960 <eingabeUSB+0x152>
    195e:	c4 c0       	rjmp	.+392    	; 0x1ae8 <eingabeUSB+0x2da>
    1960:	87 30       	cpi	r24, 0x07	; 7
    1962:	09 f4       	brne	.+2      	; 0x1966 <eingabeUSB+0x158>
    1964:	44 c1       	rjmp	.+648    	; 0x1bee <eingabeUSB+0x3e0>
    1966:	88 30       	cpi	r24, 0x08	; 8
    1968:	09 f0       	breq	.+2      	; 0x196c <eingabeUSB+0x15e>
    196a:	e3 c1       	rjmp	.+966    	; 0x1d32 <eingabeUSB+0x524>
    196c:	59 c1       	rjmp	.+690    	; 0x1c20 <eingabeUSB+0x412>
				case 0:{	//Servo
					zahl=atoi(&eingabe[n]);
    196e:	ce 01       	movw	r24, r28
    1970:	8f 58       	subi	r24, 0x8F	; 143
    1972:	9d 4f       	sbci	r25, 0xFD	; 253
    1974:	0e 94 78 12 	call	0x24f0	; 0x24f0 <atoi>
					servo(zahl);						//Ansteuerung des Servos
    1978:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <servo>
    197c:	ec c1       	rjmp	.+984    	; 0x1d56 <eingabeUSB+0x548>
					break;  			
				}
				case 1: {	//Fahrtenregler
					zahl=atoi(&eingabe[n]); //SRAM sparen	
    197e:	ce 01       	movw	r24, r28
    1980:	8f 58       	subi	r24, 0x8F	; 143
    1982:	9d 4f       	sbci	r25, 0xFD	; 253
    1984:	0e 94 78 12 	call	0x24f0	; 0x24f0 <atoi>
					fahr(zahl);
    1988:	0e 94 83 10 	call	0x2106	; 0x2106 <fahr>
    198c:	e4 c1       	rjmp	.+968    	; 0x1d56 <eingabeUSB+0x548>
					break;  			
				}
				case 2: 	// Loggen auf USB-Terminal on / off
					logMod = 0;
    198e:	10 92 cf 01 	sts	0x01CF, r1
					ausgabefaktor=2;
    1992:	80 93 65 00 	sts	0x0065, r24
				
					if ((logOnOff == 1) && (eingabe[n] == '\0')) {
    1996:	90 91 c7 01 	lds	r25, 0x01C7
    199a:	91 30       	cpi	r25, 0x01	; 1
    199c:	51 f4       	brne	.+20     	; 0x19b2 <eingabeUSB+0x1a4>
    199e:	cf 58       	subi	r28, 0x8F	; 143
    19a0:	dd 4f       	sbci	r29, 0xFD	; 253
    19a2:	88 81       	ld	r24, Y
    19a4:	88 23       	and	r24, r24
    19a6:	29 f4       	brne	.+10     	; 0x19b2 <eingabeUSB+0x1a4>
						logOnOff = 0;
    19a8:	10 92 c7 01 	sts	0x01C7, r1
						logOffAus = 1; //Text einmal ausgeben
    19ac:	90 93 c8 01 	sts	0x01C8, r25
    19b0:	89 c0       	rjmp	.+274    	; 0x1ac4 <eingabeUSB+0x2b6>
						uart_puts(ausText);
					}
					else {
						logOnOff = 1;		//aktiviere Ausgabe
    19b2:	81 e0       	ldi	r24, 0x01	; 1
    19b4:	80 93 c7 01 	sts	0x01C7, r24
						logStart=0;			//sync auf ersten Datenblock
    19b8:	10 92 cc 01 	sts	0x01CC, r1
						uart_puts(anText); uart_puts(tab);
    19bc:	86 eb       	ldi	r24, 0xB6	; 182
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	0e 94 19 02 	call	0x432	; 0x432 <uart_puts>
    19c4:	82 eb       	ldi	r24, 0xB2	; 178
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	0e 94 19 02 	call	0x432	; 0x432 <uart_puts>
						uart_puts(modTEXT); uart_puts(gleichText); uart_putc( (char) mod+48);
    19cc:	8b ea       	ldi	r24, 0xAB	; 171
    19ce:	90 e0       	ldi	r25, 0x00	; 0
    19d0:	0e 94 19 02 	call	0x432	; 0x432 <uart_puts>
    19d4:	83 e8       	ldi	r24, 0x83	; 131
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	0e 94 19 02 	call	0x432	; 0x432 <uart_puts>
    19dc:	80 91 ce 01 	lds	r24, 0x01CE
    19e0:	80 5d       	subi	r24, 0xD0	; 208
    19e2:	0e 94 07 02 	call	0x40e	; 0x40e <uart_putc>
					//	uart_puts(abtastzeitMAXText); 						
					//	itoa(abtastzeitMAX,texth,10);  
					//	uart_puts(texth);																		
						do{
							if (eingabe[n] == '2') {
								ausgabefaktor = 1; // log: 2 Werte pro Sek
    19e6:	21 e0       	ldi	r18, 0x01	; 1
								n++;
							}
							if (eingabe[n] == '1') {
								ausgabefaktor = 2; // log: 1 Werte pro Sek
    19e8:	92 e0       	ldi	r25, 0x02	; 2
					//	uart_puts(tab); 
					//	uart_puts(abtastzeitMAXText); 						
					//	itoa(abtastzeitMAX,texth,10);  
					//	uart_puts(texth);																		
						do{
							if (eingabe[n] == '2') {
    19ea:	f8 01       	movw	r30, r16
    19ec:	ef 58       	subi	r30, 0x8F	; 143
    19ee:	fd 4f       	sbci	r31, 0xFD	; 253
    19f0:	80 81       	ld	r24, Z
    19f2:	82 33       	cpi	r24, 0x32	; 50
    19f4:	21 f4       	brne	.+8      	; 0x19fe <eingabeUSB+0x1f0>
								ausgabefaktor = 1; // log: 2 Werte pro Sek
    19f6:	20 93 65 00 	sts	0x0065, r18
								n++;
    19fa:	0f 5f       	subi	r16, 0xFF	; 255
    19fc:	1f 4f       	sbci	r17, 0xFF	; 255
							}
							if (eingabe[n] == '1') {
    19fe:	f8 01       	movw	r30, r16
    1a00:	ef 58       	subi	r30, 0x8F	; 143
    1a02:	fd 4f       	sbci	r31, 0xFD	; 253
    1a04:	80 81       	ld	r24, Z
    1a06:	81 33       	cpi	r24, 0x31	; 49
    1a08:	21 f4       	brne	.+8      	; 0x1a12 <eingabeUSB+0x204>
								ausgabefaktor = 2; // log: 1 Werte pro Sek
    1a0a:	90 93 65 00 	sts	0x0065, r25
								n++;
    1a0e:	0f 5f       	subi	r16, 0xFF	; 255
    1a10:	1f 4f       	sbci	r17, 0xFF	; 255
							}
							if (eingabe[n] == '\0') logMod = logMod | 0x0E; //l,v,r
    1a12:	f8 01       	movw	r30, r16
    1a14:	ef 58       	subi	r30, 0x8F	; 143
    1a16:	fd 4f       	sbci	r31, 0xFD	; 253
    1a18:	e0 81       	ld	r30, Z
    1a1a:	ee 23       	and	r30, r30
    1a1c:	11 f0       	breq	.+4      	; 0x1a22 <eingabeUSB+0x214>
							if (eingabe[n] == '-')  logMod = logMod | 0x0E; //l,v,r
    1a1e:	ed 32       	cpi	r30, 0x2D	; 45
    1a20:	21 f4       	brne	.+8      	; 0x1a2a <eingabeUSB+0x21c>
    1a22:	80 91 cf 01 	lds	r24, 0x01CF
    1a26:	8e 60       	ori	r24, 0x0E	; 14
    1a28:	37 c0       	rjmp	.+110    	; 0x1a98 <eingabeUSB+0x28a>
							if (eingabe[n] == '+')  logMod = logMod | 0x3E; //l,v,r,s,f					
    1a2a:	eb 32       	cpi	r30, 0x2B	; 43
    1a2c:	31 f4       	brne	.+12     	; 0x1a3a <eingabeUSB+0x22c>
    1a2e:	80 91 cf 01 	lds	r24, 0x01CF
    1a32:	8e 63       	ori	r24, 0x3E	; 62
    1a34:	80 93 cf 01 	sts	0x01CF, r24
    1a38:	26 c0       	rjmp	.+76     	; 0x1a86 <eingabeUSB+0x278>
							if (eingabe[n] == 'l')  logMod = logMod | 0x02; //links, l
    1a3a:	ec 36       	cpi	r30, 0x6C	; 108
    1a3c:	21 f4       	brne	.+8      	; 0x1a46 <eingabeUSB+0x238>
    1a3e:	80 91 cf 01 	lds	r24, 0x01CF
    1a42:	82 60       	ori	r24, 0x02	; 2
    1a44:	29 c0       	rjmp	.+82     	; 0x1a98 <eingabeUSB+0x28a>
							if (eingabe[n] == 'v')  logMod = logMod | 0x04; //vorne, v
    1a46:	e6 37       	cpi	r30, 0x76	; 118
    1a48:	21 f4       	brne	.+8      	; 0x1a52 <eingabeUSB+0x244>
    1a4a:	80 91 cf 01 	lds	r24, 0x01CF
    1a4e:	84 60       	ori	r24, 0x04	; 4
    1a50:	23 c0       	rjmp	.+70     	; 0x1a98 <eingabeUSB+0x28a>
							if (eingabe[n] == 'r')  logMod = logMod | 0x08; //rechts, r
    1a52:	e2 37       	cpi	r30, 0x72	; 114
    1a54:	21 f4       	brne	.+8      	; 0x1a5e <eingabeUSB+0x250>
    1a56:	80 91 cf 01 	lds	r24, 0x01CF
    1a5a:	88 60       	ori	r24, 0x08	; 8
    1a5c:	1d c0       	rjmp	.+58     	; 0x1a98 <eingabeUSB+0x28a>
							if (eingabe[n] == 's')  logMod = logMod | 0x10; //Servo, s
    1a5e:	e3 37       	cpi	r30, 0x73	; 115
    1a60:	21 f4       	brne	.+8      	; 0x1a6a <eingabeUSB+0x25c>
    1a62:	80 91 cf 01 	lds	r24, 0x01CF
    1a66:	80 61       	ori	r24, 0x10	; 16
    1a68:	17 c0       	rjmp	.+46     	; 0x1a98 <eingabeUSB+0x28a>
							if (eingabe[n] == 'f')  logMod = logMod | 0x20; //Fahrtenregler, f
    1a6a:	e6 36       	cpi	r30, 0x66	; 102
    1a6c:	21 f4       	brne	.+8      	; 0x1a76 <eingabeUSB+0x268>
    1a6e:	80 91 cf 01 	lds	r24, 0x01CF
    1a72:	80 62       	ori	r24, 0x20	; 32
    1a74:	11 c0       	rjmp	.+34     	; 0x1a98 <eingabeUSB+0x28a>
							if (eingabe[n] == 'm')  logMod = logMod | 0x40; //mod, m
    1a76:	ed 36       	cpi	r30, 0x6D	; 109
    1a78:	21 f4       	brne	.+8      	; 0x1a82 <eingabeUSB+0x274>
    1a7a:	80 91 cf 01 	lds	r24, 0x01CF
    1a7e:	80 64       	ori	r24, 0x40	; 64
    1a80:	0b c0       	rjmp	.+22     	; 0x1a98 <eingabeUSB+0x28a>
							if ( (eingabe[n] == '+') && 
    1a82:	eb 32       	cpi	r30, 0x2B	; 43
    1a84:	59 f4       	brne	.+22     	; 0x1a9c <eingabeUSB+0x28e>
    1a86:	f8 01       	movw	r30, r16
    1a88:	e0 59       	subi	r30, 0x90	; 144
    1a8a:	fd 4f       	sbci	r31, 0xFD	; 253
    1a8c:	80 81       	ld	r24, Z
    1a8e:	8b 32       	cpi	r24, 0x2B	; 43
    1a90:	29 f4       	brne	.+10     	; 0x1a9c <eingabeUSB+0x28e>
							   (eingabe[n-1] == '+') ) logMod = logMod | 0xC0; //l,v,r,s,f,m,h1,h2,h3,hchr
    1a92:	80 91 cf 01 	lds	r24, 0x01CF
    1a96:	80 6c       	ori	r24, 0xC0	; 192
    1a98:	80 93 cf 01 	sts	0x01CF, r24
							n++;
    1a9c:	0f 5f       	subi	r16, 0xFF	; 255
    1a9e:	1f 4f       	sbci	r17, 0xFF	; 255
						}while((eingabe[n] != '\0') && (n < 10));
    1aa0:	f8 01       	movw	r30, r16
    1aa2:	ef 58       	subi	r30, 0x8F	; 143
    1aa4:	fd 4f       	sbci	r31, 0xFD	; 253
    1aa6:	80 81       	ld	r24, Z
    1aa8:	88 23       	and	r24, r24
    1aaa:	09 f4       	brne	.+2      	; 0x1aae <eingabeUSB+0x2a0>
    1aac:	54 c1       	rjmp	.+680    	; 0x1d56 <eingabeUSB+0x548>
    1aae:	0a 30       	cpi	r16, 0x0A	; 10
    1ab0:	11 05       	cpc	r17, r1
    1ab2:	0c f4       	brge	.+2      	; 0x1ab6 <eingabeUSB+0x2a8>
    1ab4:	9a cf       	rjmp	.-204    	; 0x19ea <eingabeUSB+0x1dc>
    1ab6:	4f c1       	rjmp	.+670    	; 0x1d56 <eingabeUSB+0x548>
						//h3 = logMod;
						
					}
					break; 					
				case 3: // Logdaten auf USB-Terminal in cm on / off
					if (logCmOnOff == 1) {
    1ab8:	80 91 c9 01 	lds	r24, 0x01C9
    1abc:	81 30       	cpi	r24, 0x01	; 1
    1abe:	29 f4       	brne	.+10     	; 0x1aca <eingabeUSB+0x2bc>
						logCmOnOff = 0;
    1ac0:	10 92 c9 01 	sts	0x01C9, r1
						uart_puts(ausText);
    1ac4:	8a eb       	ldi	r24, 0xBA	; 186
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	44 c1       	rjmp	.+648    	; 0x1d52 <eingabeUSB+0x544>
					}
					else {
						logCmOnOff = 1;
    1aca:	81 e0       	ldi	r24, 0x01	; 1
    1acc:	80 93 c9 01 	sts	0x01C9, r24
    1ad0:	a4 c0       	rjmp	.+328    	; 0x1c1a <eingabeUSB+0x40c>
						uart_puts(anText);
					}
					break; 
					
				case 4: //die mit hs aufgezeichneten Daten ausgeben
					if (history == 1) {
    1ad2:	80 91 ca 01 	lds	r24, 0x01CA
    1ad6:	81 30       	cpi	r24, 0x01	; 1
    1ad8:	19 f4       	brne	.+6      	; 0x1ae0 <eingabeUSB+0x2d2>
						history = 0;
    1ada:	10 92 ca 01 	sts	0x01CA, r1
    1ade:	f2 cf       	rjmp	.-28     	; 0x1ac4 <eingabeUSB+0x2b6>
						uart_puts(ausText);
					}
					else {
						history = 1;
    1ae0:	81 e0       	ldi	r24, 0x01	; 1
    1ae2:	80 93 ca 01 	sts	0x01CA, r24
    1ae6:	99 c0       	rjmp	.+306    	; 0x1c1a <eingabeUSB+0x40c>
						uart_puts(anText);
					}
					break;    
				case 5: //Daten ins EEPROM speichern
					j=0;	//neue Zeichenkette einlesen
    1ae8:	10 92 c6 01 	sts	0x01C6, r1
					uart_puts(anText);	
    1aec:	86 eb       	ldi	r24, 0xB6	; 182
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	0e 94 19 02 	call	0x432	; 0x432 <uart_puts>
					//abtastzeitMAX=0;		//Zyklusmessung zurücksetzen
					historyDepthPointer=0; 		//neue Datenaufzeichung
    1af4:	10 92 2d 02 	sts	0x022D, r1
					hspStart=1;			// beginne Speicherung bein naechsten Block
    1af8:	81 e0       	ldi	r24, 0x01	; 1
    1afa:	80 93 cd 01 	sts	0x01CD, r24
					hmod = 'o';				  // Standard fuer History, l,v,r,s,f
    1afe:	8f e6       	ldi	r24, 0x6F	; 111
    1b00:	80 93 62 00 	sts	0x0062, r24
					hisDepth=HISTORYDEPTH; // Standard fuer History, in global.h
    1b04:	8c e3       	ldi	r24, 0x3C	; 60
    1b06:	80 93 64 00 	sts	0x0064, r24
					if (((eingabe[n] >= '1') && (eingabe[n] <= '6')) || (eingabe[n] == '+') ){
    1b0a:	fe 01       	movw	r30, r28
    1b0c:	ef 58       	subi	r30, 0x8F	; 143
    1b0e:	fd 4f       	sbci	r31, 0xFD	; 253
    1b10:	10 81       	ld	r17, Z
    1b12:	81 2f       	mov	r24, r17
    1b14:	81 53       	subi	r24, 0x31	; 49
    1b16:	86 30       	cpi	r24, 0x06	; 6
    1b18:	18 f0       	brcs	.+6      	; 0x1b20 <eingabeUSB+0x312>
    1b1a:	1b 32       	cpi	r17, 0x2B	; 43
    1b1c:	81 f5       	brne	.+96     	; 0x1b7e <eingabeUSB+0x370>
    1b1e:	0f c0       	rjmp	.+30     	; 0x1b3e <eingabeUSB+0x330>

						if ((eingabe[n] >= '1') && (eingabe[n] <= '6')){
							hisDepth =  atoi(&eingabe[n]) * 10;
    1b20:	cf 01       	movw	r24, r30
    1b22:	0e 94 78 12 	call	0x24f0	; 0x24f0 <atoi>
    1b26:	9c 01       	movw	r18, r24
    1b28:	73 e0       	ldi	r23, 0x03	; 3
    1b2a:	88 0f       	add	r24, r24
    1b2c:	99 1f       	adc	r25, r25
    1b2e:	7a 95       	dec	r23
    1b30:	e1 f7       	brne	.-8      	; 0x1b2a <eingabeUSB+0x31c>
    1b32:	22 0f       	add	r18, r18
    1b34:	33 1f       	adc	r19, r19
    1b36:	82 0f       	add	r24, r18
    1b38:	93 1f       	adc	r25, r19
    1b3a:	80 93 64 00 	sts	0x0064, r24
						}
						if ((eingabe[n+1] >= '1') && (eingabe[n+1] <= '6')){
    1b3e:	fe 01       	movw	r30, r28
    1b40:	ef 58       	subi	r30, 0x8F	; 143
    1b42:	fd 4f       	sbci	r31, 0xFD	; 253
    1b44:	01 81       	ldd	r16, Z+1	; 0x01
    1b46:	80 2f       	mov	r24, r16
    1b48:	81 53       	subi	r24, 0x31	; 49
    1b4a:	86 30       	cpi	r24, 0x06	; 6
    1b4c:	78 f4       	brcc	.+30     	; 0x1b6c <eingabeUSB+0x35e>
							hisDepth =  atoi(&eingabe[n]) * 10;
    1b4e:	cf 01       	movw	r24, r30
    1b50:	0e 94 78 12 	call	0x24f0	; 0x24f0 <atoi>
    1b54:	9c 01       	movw	r18, r24
    1b56:	53 e0       	ldi	r21, 0x03	; 3
    1b58:	88 0f       	add	r24, r24
    1b5a:	99 1f       	adc	r25, r25
    1b5c:	5a 95       	dec	r21
    1b5e:	e1 f7       	brne	.-8      	; 0x1b58 <eingabeUSB+0x34a>
    1b60:	22 0f       	add	r18, r18
    1b62:	33 1f       	adc	r19, r19
    1b64:	82 0f       	add	r24, r18
    1b66:	93 1f       	adc	r25, r19
    1b68:	80 93 64 00 	sts	0x0064, r24
						}
						if ((eingabe[n] == '+') || (eingabe[n+1] == '+')){
    1b6c:	1b 32       	cpi	r17, 0x2B	; 43
    1b6e:	11 f0       	breq	.+4      	; 0x1b74 <eingabeUSB+0x366>
    1b70:	0b 32       	cpi	r16, 0x2B	; 43
    1b72:	11 f4       	brne	.+4      	; 0x1b78 <eingabeUSB+0x36a>
							hmod = '+';
    1b74:	8b e2       	ldi	r24, 0x2B	; 43
    1b76:	01 c0       	rjmp	.+2      	; 0x1b7a <eingabeUSB+0x36c>
							
						}
						else hmod = 'o';						
    1b78:	8f e6       	ldi	r24, 0x6F	; 111
    1b7a:	80 93 62 00 	sts	0x0062, r24
					}
					if ((hmod == '+') && (hisDepth > 60)) {
    1b7e:	80 91 62 00 	lds	r24, 0x0062
    1b82:	8b 32       	cpi	r24, 0x2B	; 43
    1b84:	09 f0       	breq	.+2      	; 0x1b88 <eingabeUSB+0x37a>
    1b86:	e7 c0       	rjmp	.+462    	; 0x1d56 <eingabeUSB+0x548>
    1b88:	80 91 64 00 	lds	r24, 0x0064
    1b8c:	8d 33       	cpi	r24, 0x3D	; 61
    1b8e:	08 f4       	brcc	.+2      	; 0x1b92 <eingabeUSB+0x384>
    1b90:	e2 c0       	rjmp	.+452    	; 0x1d56 <eingabeUSB+0x548>
							hisDepth = 60;
    1b92:	8c e3       	ldi	r24, 0x3C	; 60
    1b94:	80 93 64 00 	sts	0x0064, r24
    1b98:	de c0       	rjmp	.+444    	; 0x1d56 <eingabeUSB+0x548>
					}
					
					break;    
				case 6: {	//Mod wechseln
					if((eingabe[n] > 47) && (eingabe[n] < 58)){ //dann ist es eine Ziffer
    1b9a:	cf 58       	subi	r28, 0x8F	; 143
    1b9c:	dd 4f       	sbci	r29, 0xFD	; 253
    1b9e:	88 81       	ld	r24, Y
    1ba0:	80 53       	subi	r24, 0x30	; 48
    1ba2:	8a 30       	cpi	r24, 0x0A	; 10
    1ba4:	e8 f4       	brcc	.+58     	; 0x1be0 <eingabeUSB+0x3d2>
						mod = (int8_t) eingabe[n] - 48;
    1ba6:	80 93 ce 01 	sts	0x01CE, r24
						ledPB2(0);	//LED PB2 aus
    1baa:	80 e0       	ldi	r24, 0x00	; 0
    1bac:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <ledPB2>
						strcpy(texth,tab); uart_puts(texth);
    1bb0:	81 e5       	ldi	r24, 0x51	; 81
    1bb2:	92 e0       	ldi	r25, 0x02	; 2
    1bb4:	62 eb       	ldi	r22, 0xB2	; 178
    1bb6:	70 e0       	ldi	r23, 0x00	; 0
    1bb8:	0e 94 a1 12 	call	0x2542	; 0x2542 <strcpy>
    1bbc:	81 e5       	ldi	r24, 0x51	; 81
    1bbe:	92 e0       	ldi	r25, 0x02	; 2
    1bc0:	0e 94 19 02 	call	0x432	; 0x432 <uart_puts>
						uart_puts(modTEXT); uart_puts(gleichText); uart_putc( (char) mod+48); 
    1bc4:	8b ea       	ldi	r24, 0xAB	; 171
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	0e 94 19 02 	call	0x432	; 0x432 <uart_puts>
    1bcc:	83 e8       	ldi	r24, 0x83	; 131
    1bce:	90 e0       	ldi	r25, 0x00	; 0
    1bd0:	0e 94 19 02 	call	0x432	; 0x432 <uart_puts>
    1bd4:	80 91 ce 01 	lds	r24, 0x01CE
    1bd8:	80 5d       	subi	r24, 0xD0	; 208
    1bda:	0e 94 07 02 	call	0x40e	; 0x40e <uart_putc>
    1bde:	bb c0       	rjmp	.+374    	; 0x1d56 <eingabeUSB+0x548>
					}
					else{
						uart_puts(gleichText); uart_puts(grosserText);
    1be0:	83 e8       	ldi	r24, 0x83	; 131
    1be2:	90 e0       	ldi	r25, 0x00	; 0
    1be4:	0e 94 19 02 	call	0x432	; 0x432 <uart_puts>
    1be8:	85 e8       	ldi	r24, 0x85	; 133
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	ae c0       	rjmp	.+348    	; 0x1d4a <eingabeUSB+0x53c>
						uart_puts(textF);
					}
					break;  			
				}	
				case 7: {	//Bluetooth betrieb, kurze Ueberschrift
				if (logBTOnOff == 1) {
    1bee:	80 91 cb 01 	lds	r24, 0x01CB
    1bf2:	81 30       	cpi	r24, 0x01	; 1
    1bf4:	49 f4       	brne	.+18     	; 0x1c08 <eingabeUSB+0x3fa>
						logBTOnOff = 0;
    1bf6:	10 92 cb 01 	sts	0x01CB, r1
						strcpy(tab,"\t\0");
    1bfa:	82 eb       	ldi	r24, 0xB2	; 178
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	6d e6       	ldi	r22, 0x6D	; 109
    1c00:	71 e0       	ldi	r23, 0x01	; 1
    1c02:	0e 94 a1 12 	call	0x2542	; 0x2542 <strcpy>
    1c06:	5e cf       	rjmp	.-324    	; 0x1ac4 <eingabeUSB+0x2b6>
						uart_puts(ausText);
					}
					else {
						logBTOnOff = 1;
    1c08:	81 e0       	ldi	r24, 0x01	; 1
    1c0a:	80 93 cb 01 	sts	0x01CB, r24
						strcpy(tab,"   \0");
    1c0e:	82 eb       	ldi	r24, 0xB2	; 178
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	60 e7       	ldi	r22, 0x70	; 112
    1c14:	71 e0       	ldi	r23, 0x01	; 1
    1c16:	0e 94 a1 12 	call	0x2542	; 0x2542 <strcpy>
						uart_puts(anText);	
    1c1a:	86 eb       	ldi	r24, 0xB6	; 182
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	99 c0       	rjmp	.+306    	; 0x1d52 <eingabeUSB+0x544>
					}
					break;  			
				}	
				case 8: { //my = eigene Daten
						n++;
    1c20:	8e 01       	movw	r16, r28
    1c22:	0f 5f       	subi	r16, 0xFF	; 255
    1c24:	1f 4f       	sbci	r17, 0xFF	; 255
						int8_t start = n, i= 0, maxSt=5;
						int16_t wert;	
					
					if ( ((eingabe[n] <'0') || (eingabe[n] > '9'))  ){
    1c26:	f8 01       	movw	r30, r16
    1c28:	ef 58       	subi	r30, 0x8F	; 143
    1c2a:	fd 4f       	sbci	r31, 0xFD	; 253
    1c2c:	e0 81       	ld	r30, Z
    1c2e:	8e 2f       	mov	r24, r30
    1c30:	80 53       	subi	r24, 0x30	; 48
    1c32:	8a 30       	cpi	r24, 0x0A	; 10
    1c34:	20 f4       	brcc	.+8      	; 0x1c3e <eingabeUSB+0x430>
    1c36:	c8 01       	movw	r24, r16
    1c38:	e0 e0       	ldi	r30, 0x00	; 0
    1c3a:	25 e0       	ldi	r18, 0x05	; 5
    1c3c:	11 c0       	rjmp	.+34     	; 0x1c60 <eingabeUSB+0x452>
						if ( (eingabe[n] != '+' ) && (eingabe[n] != '-' )){
    1c3e:	eb 32       	cpi	r30, 0x2B	; 43
    1c40:	49 f0       	breq	.+18     	; 0x1c54 <eingabeUSB+0x446>
    1c42:	ed 32       	cpi	r30, 0x2D	; 45
    1c44:	39 f0       	breq	.+14     	; 0x1c54 <eingabeUSB+0x446>
							uart_puts(tab); uart_puts(textF1);
    1c46:	82 eb       	ldi	r24, 0xB2	; 178
    1c48:	90 e0       	ldi	r25, 0x00	; 0
    1c4a:	0e 94 19 02 	call	0x432	; 0x432 <uart_puts>
    1c4e:	88 ec       	ldi	r24, 0xC8	; 200
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	7f c0       	rjmp	.+254    	; 0x1d52 <eingabeUSB+0x544>
							break;	//beenden, keine sinnvolle Eingabe
						}
						else{
							texth[i] = eingabe[n];
    1c54:	e0 93 51 02 	sts	0x0251, r30
							n++; i++; maxSt++;
    1c58:	c8 01       	movw	r24, r16
    1c5a:	01 96       	adiw	r24, 0x01	; 1
    1c5c:	e1 e0       	ldi	r30, 0x01	; 1
    1c5e:	26 e0       	ldi	r18, 0x06	; 6
    1c60:	ec 01       	movw	r28, r24
    1c62:	cf 58       	subi	r28, 0x8F	; 143
    1c64:	dd 4f       	sbci	r29, 0xFD	; 253
    1c66:	ae 2f       	mov	r26, r30
    1c68:	bb 27       	eor	r27, r27
    1c6a:	a7 fd       	sbrc	r26, 7
    1c6c:	b0 95       	com	r27
    1c6e:	af 5a       	subi	r26, 0xAF	; 175
    1c70:	bd 4f       	sbci	r27, 0xFD	; 253
    1c72:	05 c0       	rjmp	.+10     	; 0x1c7e <eingabeUSB+0x470>
					}

			//		do{
						
						for ( ; (i < maxSt) && (eingabe[n] >= '0') && (eingabe[n] <= '9'); n++, i++){
							texth[i] = eingabe[n];
    1c74:	8d 93       	st	X+, r24
						}
					}

			//		do{
						
						for ( ; (i < maxSt) && (eingabe[n] >= '0') && (eingabe[n] <= '9'); n++, i++){
    1c76:	ef 5f       	subi	r30, 0xFF	; 255
    1c78:	21 96       	adiw	r28, 0x01	; 1
    1c7a:	e2 17       	cp	r30, r18
    1c7c:	2c f4       	brge	.+10     	; 0x1c88 <eingabeUSB+0x47a>
    1c7e:	88 81       	ld	r24, Y
    1c80:	80 33       	cpi	r24, 0x30	; 48
    1c82:	10 f0       	brcs	.+4      	; 0x1c88 <eingabeUSB+0x47a>
    1c84:	8a 33       	cpi	r24, 0x3A	; 58
    1c86:	b0 f3       	brcs	.-20     	; 0x1c74 <eingabeUSB+0x466>
							texth[i] = eingabe[n];
						};
						texth[i] = '\0';
    1c88:	ff 27       	eor	r31, r31
    1c8a:	e7 fd       	sbrc	r30, 7
    1c8c:	f0 95       	com	r31
    1c8e:	ef 5a       	subi	r30, 0xAF	; 175
    1c90:	fd 4f       	sbci	r31, 0xFD	; 253
    1c92:	10 82       	st	Z, r1
						wert = atoi( texth );
    1c94:	81 e5       	ldi	r24, 0x51	; 81
    1c96:	92 e0       	ldi	r25, 0x02	; 2
    1c98:	0e 94 78 12 	call	0x24f0	; 0x24f0 <atoi>
    1c9c:	ec 01       	movw	r28, r24
						uart_puts(tab);
    1c9e:	82 eb       	ldi	r24, 0xB2	; 178
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	0e 94 19 02 	call	0x432	; 0x432 <uart_puts>
						switch(eingabe[start-1]){
    1ca6:	e0 2f       	mov	r30, r16
    1ca8:	ff 27       	eor	r31, r31
    1caa:	e7 fd       	sbrc	r30, 7
    1cac:	f0 95       	com	r31
    1cae:	e0 59       	subi	r30, 0x90	; 144
    1cb0:	fd 4f       	sbci	r31, 0xFD	; 253
    1cb2:	80 81       	ld	r24, Z
    1cb4:	82 36       	cpi	r24, 0x62	; 98
    1cb6:	79 f0       	breq	.+30     	; 0x1cd6 <eingabeUSB+0x4c8>
    1cb8:	83 36       	cpi	r24, 0x63	; 99
    1cba:	c1 f0       	breq	.+48     	; 0x1cec <eingabeUSB+0x4de>
    1cbc:	81 36       	cpi	r24, 0x61	; 97
    1cbe:	09 f5       	brne	.+66     	; 0x1d02 <eingabeUSB+0x4f4>
							case 'a' : mya = wert; uart_puts(myTEXT); uart_puts("a="); break;
    1cc0:	d0 93 40 02 	sts	0x0240, r29
    1cc4:	c0 93 3f 02 	sts	0x023F, r28
    1cc8:	8f ea       	ldi	r24, 0xAF	; 175
    1cca:	90 e0       	ldi	r25, 0x00	; 0
    1ccc:	0e 94 19 02 	call	0x432	; 0x432 <uart_puts>
    1cd0:	85 e7       	ldi	r24, 0x75	; 117
    1cd2:	91 e0       	ldi	r25, 0x01	; 1
    1cd4:	1c c0       	rjmp	.+56     	; 0x1d0e <eingabeUSB+0x500>
							case 'b' : myb = wert; uart_puts(myTEXT); uart_puts("b="); break;
    1cd6:	d0 93 38 02 	sts	0x0238, r29
    1cda:	c0 93 37 02 	sts	0x0237, r28
    1cde:	8f ea       	ldi	r24, 0xAF	; 175
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	0e 94 19 02 	call	0x432	; 0x432 <uart_puts>
    1ce6:	88 e7       	ldi	r24, 0x78	; 120
    1ce8:	91 e0       	ldi	r25, 0x01	; 1
    1cea:	11 c0       	rjmp	.+34     	; 0x1d0e <eingabeUSB+0x500>
							case 'c' : myc = wert; uart_puts(myTEXT); uart_puts("c="); break;
    1cec:	d0 93 3e 02 	sts	0x023E, r29
    1cf0:	c0 93 3d 02 	sts	0x023D, r28
    1cf4:	8f ea       	ldi	r24, 0xAF	; 175
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	0e 94 19 02 	call	0x432	; 0x432 <uart_puts>
    1cfc:	8b e7       	ldi	r24, 0x7B	; 123
    1cfe:	91 e0       	ldi	r25, 0x01	; 1
    1d00:	06 c0       	rjmp	.+12     	; 0x1d0e <eingabeUSB+0x500>
							default:   uart_puts(textF); uart_puts(tab); break;
    1d02:	8f eb       	ldi	r24, 0xBF	; 191
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	0e 94 19 02 	call	0x432	; 0x432 <uart_puts>
    1d0a:	82 eb       	ldi	r24, 0xB2	; 178
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	0e 94 19 02 	call	0x432	; 0x432 <uart_puts>
						}
						itoa(wert,texth,10);   
    1d12:	ce 01       	movw	r24, r28
    1d14:	61 e5       	ldi	r22, 0x51	; 81
    1d16:	72 e0       	ldi	r23, 0x02	; 2
    1d18:	4a e0       	ldi	r20, 0x0A	; 10
    1d1a:	50 e0       	ldi	r21, 0x00	; 0
    1d1c:	0e 94 a8 12 	call	0x2550	; 0x2550 <itoa>
						strcat(texth,tab);
    1d20:	81 e5       	ldi	r24, 0x51	; 81
    1d22:	92 e0       	ldi	r25, 0x02	; 2
    1d24:	62 eb       	ldi	r22, 0xB2	; 178
    1d26:	70 e0       	ldi	r23, 0x00	; 0
    1d28:	0e 94 96 12 	call	0x252c	; 0x252c <strcat>
						uart_puts(texth);	
    1d2c:	81 e5       	ldi	r24, 0x51	; 81
    1d2e:	92 e0       	ldi	r25, 0x02	; 2
    1d30:	10 c0       	rjmp	.+32     	; 0x1d52 <eingabeUSB+0x544>
			//		}while((eingabe[n] != '\0') && (n < 18));
					break; 
				}
					
				default: { //uart_puts(kommandoText);
					strcpy(texth,tab); uart_puts(texth);uart_puts(tab);
    1d32:	81 e5       	ldi	r24, 0x51	; 81
    1d34:	92 e0       	ldi	r25, 0x02	; 2
    1d36:	62 eb       	ldi	r22, 0xB2	; 178
    1d38:	70 e0       	ldi	r23, 0x00	; 0
    1d3a:	0e 94 a1 12 	call	0x2542	; 0x2542 <strcpy>
    1d3e:	81 e5       	ldi	r24, 0x51	; 81
    1d40:	92 e0       	ldi	r25, 0x02	; 2
    1d42:	0e 94 19 02 	call	0x432	; 0x432 <uart_puts>
    1d46:	82 eb       	ldi	r24, 0xB2	; 178
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	0e 94 19 02 	call	0x432	; 0x432 <uart_puts>
					uart_puts(textF); break;}     // für den Fall einer falschen Zeile
    1d4e:	8f eb       	ldi	r24, 0xBF	; 191
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	0e 94 19 02 	call	0x432	; 0x432 <uart_puts>
				} //Ende switch-case
											
				uart_putc('\r');
    1d56:	8d e0       	ldi	r24, 0x0D	; 13
    1d58:	0e 94 07 02 	call	0x40e	; 0x40e <uart_putc>
				
				kommand = 0;	// Kommando abgearbeitet
    1d5c:	10 92 d1 01 	sts	0x01D1, r1
    1d60:	10 92 d0 01 	sts	0x01D0, r1
			}			
		}	
}
    1d64:	df 91       	pop	r29
    1d66:	cf 91       	pop	r28
    1d68:	1f 91       	pop	r17
    1d6a:	0f 91       	pop	r16
    1d6c:	08 95       	ret

00001d6e <fahren2>:

}

void fahren2(void){

}
    1d6e:	08 95       	ret

00001d70 <linearisierungAD>:



uint16_t  linearisierungAD(uint16_t analogwert, uint8_t cosAlpha){
    1d70:	ac 01       	movw	r20, r24
    1d72:	26 2f       	mov	r18, r22
		
		
		
		uint16_t  abstand = 0;		//Variabel erzeugen und initialisieren 
		
		if((analogwert - B) > 0){
    1d74:	8f ef       	ldi	r24, 0xFF	; 255
    1d76:	41 3f       	cpi	r20, 0xF1	; 241
    1d78:	58 07       	cpc	r21, r24
    1d7a:	19 f4       	brne	.+6      	; 0x1d82 <linearisierungAD+0x12>
    1d7c:	46 e9       	ldi	r20, 0x96	; 150
    1d7e:	50 e0       	ldi	r21, 0x00	; 0
    1d80:	0f c0       	rjmp	.+30     	; 0x1da0 <linearisierungAD+0x30>
			
			abstand = A / (analogwert - B);   //bisheriger Cm
    1d82:	41 5f       	subi	r20, 0xF1	; 241
    1d84:	5f 4f       	sbci	r21, 0xFF	; 255
    1d86:	81 e6       	ldi	r24, 0x61	; 97
    1d88:	9c e5       	ldi	r25, 0x5C	; 92
    1d8a:	ba 01       	movw	r22, r20
    1d8c:	0e 94 4c 11 	call	0x2298	; 0x2298 <__udivmodhi4>
			abstand = abstand * cosAlpha;
    1d90:	30 e0       	ldi	r19, 0x00	; 0
    1d92:	26 9f       	mul	r18, r22
    1d94:	a0 01       	movw	r20, r0
    1d96:	27 9f       	mul	r18, r23
    1d98:	50 0d       	add	r21, r0
    1d9a:	36 9f       	mul	r19, r22
    1d9c:	50 0d       	add	r21, r0
    1d9e:	11 24       	eor	r1, r1
    1da0:	ca 01       	movw	r24, r20
    1da2:	64 e6       	ldi	r22, 0x64	; 100
    1da4:	70 e0       	ldi	r23, 0x00	; 0
    1da6:	0e 94 4c 11 	call	0x2298	; 0x2298 <__udivmodhi4>
    1daa:	cb 01       	movw	r24, r22
		}
		
		abstand = abstand / 100; 	// 
		
		return abstand;				// Ergebnis zurückliefern,
}
    1dac:	08 95       	ret

00001dae <ro>:

int16_t ro(void){					//Kurzform von int16_t pReglerServoRechts(void)

	return y;
}
    1dae:	80 91 4a 02 	lds	r24, 0x024A
    1db2:	90 91 4b 02 	lds	r25, 0x024B
    1db6:	08 95       	ret

00001db8 <pReglerServoRechts>:
	//int16_t y;				//y=Stellgroeße / Winkel
	
	//bestimmen der Regelabweichung
	//z.B. Sollwert greade (35cm),	20cm volllinks, 50cm vollrechts
	
	e = abstandrechts - abstandlinks;				//Problem oben auf mitte ausgrichtet hier auf rechts fahren 35 cm in global festgelegt
    1db8:	20 91 3b 02 	lds	r18, 0x023B
    1dbc:	30 91 3c 02 	lds	r19, 0x023C
    1dc0:	80 91 35 02 	lds	r24, 0x0235
    1dc4:	90 91 36 02 	lds	r25, 0x0236
    1dc8:	28 1b       	sub	r18, r24
    1dca:	39 0b       	sbc	r19, r25
    1dcc:	30 93 6d 02 	sts	0x026D, r19
    1dd0:	20 93 6c 02 	sts	0x026C, r18
	
		y=(m1*e) / m2;
    1dd4:	80 91 d3 00 	lds	r24, 0x00D3
    1dd8:	90 91 d4 00 	lds	r25, 0x00D4
    1ddc:	60 91 d5 00 	lds	r22, 0x00D5
    1de0:	70 91 d6 00 	lds	r23, 0x00D6
    1de4:	ac 01       	movw	r20, r24
    1de6:	24 9f       	mul	r18, r20
    1de8:	c0 01       	movw	r24, r0
    1dea:	25 9f       	mul	r18, r21
    1dec:	90 0d       	add	r25, r0
    1dee:	34 9f       	mul	r19, r20
    1df0:	90 0d       	add	r25, r0
    1df2:	11 24       	eor	r1, r1
    1df4:	0e 94 60 11 	call	0x22c0	; 0x22c0 <__divmodhi4>
    1df8:	cb 01       	movw	r24, r22
    1dfa:	60 93 4a 02 	sts	0x024A, r22
    1dfe:	90 93 4b 02 	sts	0x024B, r25
	
	
			//Normal y=(m1*e) /(m2+b) aber b = 0
	
	ausgabe3 = y;
    1e02:	60 93 d6 01 	sts	0x01D6, r22
    1e06:	90 93 d7 01 	sts	0x01D7, r25
	return y;
}
    1e0a:	08 95       	ret

00001e0c <akkuSpannungPruefen>:

void akkuSpannungPruefen(uint16_t schwellWert){
//Prüfe die AkkuSpannung nur wenn das CrazyCar nicht fährt! 
// Alle LEDs blicken, wenn Akku-Spannung < schwellwert !!

}
    1e0c:	08 95       	ret

00001e0e <ledSchalterTest>:

void ledSchalterTest(void){

}
    1e0e:	08 95       	ret

00001e10 <fahren1>:
int modus;


//Auswahl der Fahrtrichtung

if(abstandvorne <= wertvorne){
    1e10:	80 91 6f 02 	lds	r24, 0x026F
    1e14:	90 91 70 02 	lds	r25, 0x0270
    1e18:	8e 97       	sbiw	r24, 0x2e	; 46
    1e1a:	38 f4       	brcc	.+14     	; 0x1e2a <fahren1+0x1a>
	
		//Rückwärts
		
		fahr(-18);
    1e1c:	8e ee       	ldi	r24, 0xEE	; 238
    1e1e:	9f ef       	ldi	r25, 0xFF	; 255
    1e20:	0e 94 83 10 	call	0x2106	; 0x2106 <fahr>
    1e24:	81 e0       	ldi	r24, 0x01	; 1
    1e26:	90 e0       	ldi	r25, 0x00	; 0
    1e28:	06 c0       	rjmp	.+12     	; 0x1e36 <fahren1+0x26>
	}
	else{
		
		//Vorwärts
		
		fahr(18);
    1e2a:	82 e1       	ldi	r24, 0x12	; 18
    1e2c:	90 e0       	ldi	r25, 0x00	; 0
    1e2e:	0e 94 83 10 	call	0x2106	; 0x2106 <fahr>
    1e32:	82 e0       	ldi	r24, 0x02	; 2
    1e34:	90 e0       	ldi	r25, 0x00	; 0
		//Modus Wahl
		
		modus = 2;
		
	}
ausgabe2 = modus;
    1e36:	90 93 d5 01 	sts	0x01D5, r25
    1e3a:	80 93 d4 01 	sts	0x01D4, r24
//Verhalten Rückwärts      //Anmerkung Hytserrese beim Rückwärtsfahren ? Verhalten ?

if( modus == 1){
    1e3e:	01 97       	sbiw	r24, 0x01	; 1
    1e40:	81 f4       	brne	.+32     	; 0x1e62 <fahren1+0x52>

	if( (getFahr() < 0) && (abstandlinks <= abstandrechts)){
    1e42:	0e 94 3d 10 	call	0x207a	; 0x207a <getFahr>
    1e46:	87 ff       	sbrs	r24, 7
    1e48:	3d c0       	rjmp	.+122    	; 0x1ec4 <fahren1+0xb4>
    1e4a:	20 91 35 02 	lds	r18, 0x0235
    1e4e:	30 91 36 02 	lds	r19, 0x0236
    1e52:	80 91 3b 02 	lds	r24, 0x023B
    1e56:	90 91 3c 02 	lds	r25, 0x023C
    1e5a:	82 17       	cp	r24, r18
    1e5c:	93 07       	cpc	r25, r19
    1e5e:	90 f1       	brcs	.+100    	; 0x1ec4 <fahren1+0xb4>
    1e60:	2e c0       	rjmp	.+92     	; 0x1ebe <fahren1+0xae>
//Verhalten Vorwärts Mittigori.

if( modus == 2){

	//Zu weit Links oder rechts
	if((getFahr() > 0) && (abstandlinks < 160) && (abstandrechts< 160)){
    1e62:	0e 94 3d 10 	call	0x207a	; 0x207a <getFahr>
    1e66:	18 16       	cp	r1, r24
    1e68:	ac f4       	brge	.+42     	; 0x1e94 <fahren1+0x84>
    1e6a:	80 91 35 02 	lds	r24, 0x0235
    1e6e:	90 91 36 02 	lds	r25, 0x0236
    1e72:	80 3a       	cpi	r24, 0xA0	; 160
    1e74:	91 05       	cpc	r25, r1
    1e76:	70 f4       	brcc	.+28     	; 0x1e94 <fahren1+0x84>
    1e78:	80 91 3b 02 	lds	r24, 0x023B
    1e7c:	90 91 3c 02 	lds	r25, 0x023C
    1e80:	80 3a       	cpi	r24, 0xA0	; 160
    1e82:	91 05       	cpc	r25, r1
    1e84:	38 f4       	brcc	.+14     	; 0x1e94 <fahren1+0x84>
	
	
	pReglerServoRechts();
    1e86:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <pReglerServoRechts>
	
	//Einschlagwinkel
	
	servo(y);
    1e8a:	80 91 4a 02 	lds	r24, 0x024A
    1e8e:	90 91 4b 02 	lds	r25, 0x024B
    1e92:	1a c0       	rjmp	.+52     	; 0x1ec8 <fahren1+0xb8>
	
	
	//Refernzwert Abfrage
	
	}else if((abstandlinks > 160) && (abstandrechts > 160)){
    1e94:	80 91 35 02 	lds	r24, 0x0235
    1e98:	90 91 36 02 	lds	r25, 0x0236
    1e9c:	20 91 3b 02 	lds	r18, 0x023B
    1ea0:	30 91 3c 02 	lds	r19, 0x023C
    1ea4:	81 3a       	cpi	r24, 0xA1	; 161
    1ea6:	91 05       	cpc	r25, r1
    1ea8:	30 f0       	brcs	.+12     	; 0x1eb6 <fahren1+0xa6>
    1eaa:	21 3a       	cpi	r18, 0xA1	; 161
    1eac:	31 05       	cpc	r19, r1
    1eae:	38 f0       	brcs	.+14     	; 0x1ebe <fahren1+0xae>
	
	
		
		servo(0);
    1eb0:	80 e0       	ldi	r24, 0x00	; 0
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	09 c0       	rjmp	.+18     	; 0x1ec8 <fahren1+0xb8>
	
	
	
	}else if((abstandlinks > 160) || (abstandrechts > 160)){
    1eb6:	21 3a       	cpi	r18, 0xA1	; 161
    1eb8:	31 05       	cpc	r19, r1
    1eba:	20 f4       	brcc	.+8      	; 0x1ec4 <fahren1+0xb4>
    1ebc:	08 95       	ret
	
	
		if(abstandlinks > 160){
		
		servo(10);
    1ebe:	8a e0       	ldi	r24, 0x0A	; 10
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	02 c0       	rjmp	.+4      	; 0x1ec8 <fahren1+0xb8>
		
		
		}else{
		
		
		servo(-10);
    1ec4:	86 ef       	ldi	r24, 0xF6	; 246
    1ec6:	9f ef       	ldi	r25, 0xFF	; 255
    1ec8:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <servo>
    1ecc:	08 95       	ret

00001ece <initServo>:
}

void initServo(uint16_t ml, uint16_t g, uint16_t mr){
//Speicher der Werte fuer Anschlag rechts u. links, sowie geradeaus
//unsinnige Werte blocken und durch andere ersetzen!
	if ( ml <= MAXVOLLLINKS) servoML = ml;
    1ece:	24 e0       	ldi	r18, 0x04	; 4
    1ed0:	8d 34       	cpi	r24, 0x4D	; 77
    1ed2:	92 07       	cpc	r25, r18
    1ed4:	10 f0       	brcs	.+4      	; 0x1eda <initServo+0xc>
	else servoML = 750;
    1ed6:	8e ee       	ldi	r24, 0xEE	; 238
    1ed8:	92 e0       	ldi	r25, 0x02	; 2
    1eda:	90 93 6b 02 	sts	0x026B, r25
    1ede:	80 93 6a 02 	sts	0x026A, r24
	if ( mr >= MAXVOLLRECHTS) servoMR = mr;
    1ee2:	81 e0       	ldi	r24, 0x01	; 1
    1ee4:	44 3f       	cpi	r20, 0xF4	; 244
    1ee6:	58 07       	cpc	r21, r24
    1ee8:	28 f0       	brcs	.+10     	; 0x1ef4 <initServo+0x26>
    1eea:	50 93 4d 02 	sts	0x024D, r21
    1eee:	40 93 4c 02 	sts	0x024C, r20
    1ef2:	06 c0       	rjmp	.+12     	; 0x1f00 <initServo+0x32>
	else servoMR = 650;
    1ef4:	8a e8       	ldi	r24, 0x8A	; 138
    1ef6:	92 e0       	ldi	r25, 0x02	; 2
    1ef8:	90 93 4d 02 	sts	0x024D, r25
    1efc:	80 93 4c 02 	sts	0x024C, r24
	if (( g >= MAXVOLLRECHTS) && ( g < MAXVOLLLINKS)) servoG = g;
    1f00:	cb 01       	movw	r24, r22
    1f02:	84 5f       	subi	r24, 0xF4	; 244
    1f04:	91 40       	sbci	r25, 0x01	; 1
    1f06:	88 55       	subi	r24, 0x58	; 88
    1f08:	92 40       	sbci	r25, 0x02	; 2
    1f0a:	28 f4       	brcc	.+10     	; 0x1f16 <initServo+0x48>
    1f0c:	70 93 32 02 	sts	0x0232, r23
    1f10:	60 93 31 02 	sts	0x0231, r22
    1f14:	08 95       	ret
	else servoG = 700;
    1f16:	8c eb       	ldi	r24, 0xBC	; 188
    1f18:	92 e0       	ldi	r25, 0x02	; 2
    1f1a:	90 93 32 02 	sts	0x0232, r25
    1f1e:	80 93 31 02 	sts	0x0231, r24
    1f22:	08 95       	ret

00001f24 <servo>:
}

void servo(int16_t swert ){
    1f24:	9c 01       	movw	r18, r24
	//Servo ansteuern,
	//Umsetzung von -10 bis +10 auf Servoparameter
	if(swert == 0)	      wert = servoG;       //gerade
    1f26:	00 97       	sbiw	r24, 0x00	; 0
    1f28:	29 f4       	brne	.+10     	; 0x1f34 <servo+0x10>
    1f2a:	80 91 31 02 	lds	r24, 0x0231
    1f2e:	90 91 32 02 	lds	r25, 0x0232
    1f32:	34 c0       	rjmp	.+104    	; 0x1f9c <servo+0x78>
	else if(swert >= 10)	wert = servoMR;			//max rechts
    1f34:	8a 30       	cpi	r24, 0x0A	; 10
    1f36:	91 05       	cpc	r25, r1
    1f38:	2c f0       	brlt	.+10     	; 0x1f44 <servo+0x20>
    1f3a:	80 91 4c 02 	lds	r24, 0x024C
    1f3e:	90 91 4d 02 	lds	r25, 0x024D
    1f42:	2c c0       	rjmp	.+88     	; 0x1f9c <servo+0x78>
	else if(swert <= -10)	wert = servoML;		//max links
    1f44:	4f ef       	ldi	r20, 0xFF	; 255
    1f46:	87 3f       	cpi	r24, 0xF7	; 247
    1f48:	94 07       	cpc	r25, r20
    1f4a:	2c f4       	brge	.+10     	; 0x1f56 <servo+0x32>
    1f4c:	80 91 6a 02 	lds	r24, 0x026A
    1f50:	90 91 6b 02 	lds	r25, 0x026B
    1f54:	23 c0       	rjmp	.+70     	; 0x1f9c <servo+0x78>
    1f56:	e0 91 31 02 	lds	r30, 0x0231
    1f5a:	f0 91 32 02 	lds	r31, 0x0232
	else if(swert > 0) wert = servoG - (servoG - servoMR) / 10 * swert; //
    1f5e:	18 16       	cp	r1, r24
    1f60:	19 06       	cpc	r1, r25
    1f62:	4c f4       	brge	.+18     	; 0x1f76 <servo+0x52>
    1f64:	80 91 4c 02 	lds	r24, 0x024C
    1f68:	90 91 4d 02 	lds	r25, 0x024D
    1f6c:	af 01       	movw	r20, r30
    1f6e:	48 1b       	sub	r20, r24
    1f70:	59 0b       	sbc	r21, r25
    1f72:	ca 01       	movw	r24, r20
    1f74:	06 c0       	rjmp	.+12     	; 0x1f82 <servo+0x5e>
	else 	             wert = servoG - (servoML - servoG) / 10 * swert; // links
    1f76:	80 91 6a 02 	lds	r24, 0x026A
    1f7a:	90 91 6b 02 	lds	r25, 0x026B
    1f7e:	8e 1b       	sub	r24, r30
    1f80:	9f 0b       	sbc	r25, r31
    1f82:	66 ef       	ldi	r22, 0xF6	; 246
    1f84:	7f ef       	ldi	r23, 0xFF	; 255
    1f86:	0e 94 60 11 	call	0x22c0	; 0x22c0 <__divmodhi4>
    1f8a:	62 9f       	mul	r22, r18
    1f8c:	c0 01       	movw	r24, r0
    1f8e:	63 9f       	mul	r22, r19
    1f90:	90 0d       	add	r25, r0
    1f92:	72 9f       	mul	r23, r18
    1f94:	90 0d       	add	r25, r0
    1f96:	11 24       	eor	r1, r1
    1f98:	8e 0f       	add	r24, r30
    1f9a:	9f 1f       	adc	r25, r31
    1f9c:	90 93 48 02 	sts	0x0248, r25
    1fa0:	80 93 47 02 	sts	0x0247, r24

	if ((wert > MAXVOLLLINKS) ||  (wert < MAXVOLLRECHTS)){ //Sicherheitsabfrage
    1fa4:	20 91 47 02 	lds	r18, 0x0247
    1fa8:	30 91 48 02 	lds	r19, 0x0248
    1fac:	c9 01       	movw	r24, r18
    1fae:	84 5f       	subi	r24, 0xF4	; 244
    1fb0:	91 40       	sbci	r25, 0x01	; 1
    1fb2:	89 55       	subi	r24, 0x59	; 89
    1fb4:	92 40       	sbci	r25, 0x02	; 2
    1fb6:	10 f0       	brcs	.+4      	; 0x1fbc <servo+0x98>
		PORTC |= (1<<PC2); //LED PC2 an
    1fb8:	aa 9a       	sbi	0x15, 2	; 21
    1fba:	08 95       	ret
			PORTB &= (~(1<<(PB2))); //LED PB2 aus
			PORTC &= (~(1<<(PC2))); //LED PC2 aus
			warte_ms(500);
		}
		*/
	} else OCR1A = wert;							//Lenkwinkel setzen
    1fbc:	3b bd       	out	0x2b, r19	; 43
    1fbe:	2a bd       	out	0x2a, r18	; 42
    1fc0:	08 95       	ret

00001fc2 <initFahr>:
}
void initFahr(uint8_t max){  //Festlegung der max Geschwindigkeit
	maxFahr = max;
    1fc2:	80 93 49 02 	sts	0x0249, r24
}
    1fc6:	08 95       	ret

00001fc8 <getServoPrivate>:
	else	if ((fwert >= 0) && (fwert <=  maxFahr)) OCR1B = STOP + 3*fwert;
	else  if ((fwert <  0) && (fwert >= -maxFahr))	rueckwaerts(STOP + 3*fwert);
	else ; //fahre weiter im der alten  Geschwindigkeit
}	

int8_t getServoPrivate(int16_t wertOCR1A){
    1fc8:	fc 01       	movw	r30, r24
	//Umsetzung von -10 bis +10 auf Servoparameter
	if(wertOCR1A == servoG)	      return 0;       //gerade
    1fca:	20 91 31 02 	lds	r18, 0x0231
    1fce:	30 91 32 02 	lds	r19, 0x0232
    1fd2:	82 17       	cp	r24, r18
    1fd4:	93 07       	cpc	r25, r19
    1fd6:	11 f4       	brne	.+4      	; 0x1fdc <getServoPrivate+0x14>
    1fd8:	60 e0       	ldi	r22, 0x00	; 0
    1fda:	2b c0       	rjmp	.+86     	; 0x2032 <getServoPrivate+0x6a>
	else if(wertOCR1A == servoMR)	return 10;			//max rechts
    1fdc:	40 91 4c 02 	lds	r20, 0x024C
    1fe0:	50 91 4d 02 	lds	r21, 0x024D
    1fe4:	84 17       	cp	r24, r20
    1fe6:	95 07       	cpc	r25, r21
    1fe8:	11 f4       	brne	.+4      	; 0x1fee <getServoPrivate+0x26>
    1fea:	6a e0       	ldi	r22, 0x0A	; 10
    1fec:	22 c0       	rjmp	.+68     	; 0x2032 <getServoPrivate+0x6a>
	else if(wertOCR1A == servoML)	return -10;		//max links
    1fee:	80 91 6a 02 	lds	r24, 0x026A
    1ff2:	90 91 6b 02 	lds	r25, 0x026B
    1ff6:	e8 17       	cp	r30, r24
    1ff8:	f9 07       	cpc	r31, r25
    1ffa:	11 f4       	brne	.+4      	; 0x2000 <getServoPrivate+0x38>
    1ffc:	66 ef       	ldi	r22, 0xF6	; 246
    1ffe:	19 c0       	rjmp	.+50     	; 0x2032 <getServoPrivate+0x6a>
	else if(wertOCR1A > servoG) return ((wertOCR1A - servoG) / ((servoML - servoG) / -10)); //links
    2000:	2e 17       	cp	r18, r30
    2002:	3f 07       	cpc	r19, r31
    2004:	54 f4       	brge	.+20     	; 0x201a <getServoPrivate+0x52>
    2006:	82 1b       	sub	r24, r18
    2008:	93 0b       	sbc	r25, r19
    200a:	66 ef       	ldi	r22, 0xF6	; 246
    200c:	7f ef       	ldi	r23, 0xFF	; 255
    200e:	0e 94 60 11 	call	0x22c0	; 0x22c0 <__divmodhi4>
    2012:	cf 01       	movw	r24, r30
    2014:	82 1b       	sub	r24, r18
    2016:	93 0b       	sbc	r25, r19
    2018:	0a c0       	rjmp	.+20     	; 0x202e <getServoPrivate+0x66>
	else                        return ((servoG - wertOCR1A) / ((servoG - servoMR) / 10)); //rechts
    201a:	c9 01       	movw	r24, r18
    201c:	84 1b       	sub	r24, r20
    201e:	95 0b       	sbc	r25, r21
    2020:	6a e0       	ldi	r22, 0x0A	; 10
    2022:	70 e0       	ldi	r23, 0x00	; 0
    2024:	0e 94 60 11 	call	0x22c0	; 0x22c0 <__divmodhi4>
    2028:	c9 01       	movw	r24, r18
    202a:	8e 1b       	sub	r24, r30
    202c:	9f 0b       	sbc	r25, r31
    202e:	0e 94 60 11 	call	0x22c0	; 0x22c0 <__divmodhi4>
}
    2032:	86 2f       	mov	r24, r22
    2034:	08 95       	ret

00002036 <getServo>:
int8_t getServo(void){ 					 return getServoPrivate((int16_t) OCR1A); }
    2036:	8a b5       	in	r24, 0x2a	; 42
    2038:	9b b5       	in	r25, 0x2b	; 43
    203a:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <getServoPrivate>
    203e:	08 95       	ret

00002040 <getServoM>:
int8_t getServoM(int16_t wert_OCR1A){ return getServoPrivate(wert_OCR1A); };
    2040:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <getServoPrivate>
    2044:	08 95       	ret

00002046 <getFahrPrivate>:

int8_t getFahrPrivate(int16_t wertOCR1B){
	//Umsetzung von -100 bis +100 auf Fahrtenreglerparameter
	if(wertOCR1B == STOP)	      return 0;       //gerade
    2046:	22 e0       	ldi	r18, 0x02	; 2
    2048:	8c 3b       	cpi	r24, 0xBC	; 188
    204a:	92 07       	cpc	r25, r18
    204c:	11 f4       	brne	.+4      	; 0x2052 <getFahrPrivate+0xc>
    204e:	60 e0       	ldi	r22, 0x00	; 0
    2050:	12 c0       	rjmp	.+36     	; 0x2076 <getFahrPrivate+0x30>
	else if(wertOCR1B == MAXVORWAERTS)	return 100;			//max rechts
    2052:	23 e0       	ldi	r18, 0x03	; 3
    2054:	88 3e       	cpi	r24, 0xE8	; 232
    2056:	92 07       	cpc	r25, r18
    2058:	11 f4       	brne	.+4      	; 0x205e <getFahrPrivate+0x18>
    205a:	64 e6       	ldi	r22, 0x64	; 100
    205c:	0c c0       	rjmp	.+24     	; 0x2076 <getFahrPrivate+0x30>
	else if(wertOCR1B == MAXRUEWAERTS)	return -100;		//max links
    205e:	21 e0       	ldi	r18, 0x01	; 1
    2060:	80 39       	cpi	r24, 0x90	; 144
    2062:	92 07       	cpc	r25, r18
    2064:	11 f4       	brne	.+4      	; 0x206a <getFahrPrivate+0x24>
    2066:	6c e9       	ldi	r22, 0x9C	; 156
    2068:	06 c0       	rjmp	.+12     	; 0x2076 <getFahrPrivate+0x30>
	else return ((int16_t)(wertOCR1B - STOP ) / ((int16_t)(MAXVORWAERTS - STOP) / 100));
    206a:	8c 5b       	subi	r24, 0xBC	; 188
    206c:	92 40       	sbci	r25, 0x02	; 2
    206e:	63 e0       	ldi	r22, 0x03	; 3
    2070:	70 e0       	ldi	r23, 0x00	; 0
    2072:	0e 94 60 11 	call	0x22c0	; 0x22c0 <__divmodhi4>
}
    2076:	86 2f       	mov	r24, r22
    2078:	08 95       	ret

0000207a <getFahr>:
int8_t getFahr(void){ return getFahrPrivate(OCR1B); }
    207a:	88 b5       	in	r24, 0x28	; 40
    207c:	99 b5       	in	r25, 0x29	; 41
    207e:	0e 94 23 10 	call	0x2046	; 0x2046 <getFahrPrivate>
    2082:	08 95       	ret

00002084 <getFahrM>:
int8_t getFahrM(int16_t wert_OCR1B){ return getFahrPrivate(wert_OCR1B); }
    2084:	0e 94 23 10 	call	0x2046	; 0x2046 <getFahrPrivate>
    2088:	08 95       	ret

0000208a <freeRam>:
		warte_ms(100);	//warte ms
	}
	OCR1B=wert;	// angegebene Geschwindigkeit einstellen
}

int freeRam (void) {
    208a:	df 93       	push	r29
    208c:	cf 93       	push	r28
    208e:	00 d0       	rcall	.+0      	; 0x2090 <freeRam+0x6>
    2090:	cd b7       	in	r28, 0x3d	; 61
    2092:	de b7       	in	r29, 0x3e	; 62
  extern int __heap_start, *__brkval;
  int v;
  return (int) (&v - (__brkval == 0 ? (int) &__heap_start : (int) __brkval));
    2094:	80 91 9a 02 	lds	r24, 0x029A
    2098:	90 91 9b 02 	lds	r25, 0x029B
    209c:	00 97       	sbiw	r24, 0x00	; 0
    209e:	11 f4       	brne	.+4      	; 0x20a4 <freeRam+0x1a>
    20a0:	8e e9       	ldi	r24, 0x9E	; 158
    20a2:	92 e0       	ldi	r25, 0x02	; 2
    20a4:	88 0f       	add	r24, r24
    20a6:	99 1f       	adc	r25, r25
    20a8:	44 27       	eor	r20, r20
    20aa:	55 27       	eor	r21, r21
    20ac:	48 1b       	sub	r20, r24
    20ae:	59 0b       	sbc	r21, r25
    20b0:	9e 01       	movw	r18, r28
    20b2:	2f 5f       	subi	r18, 0xFF	; 255
    20b4:	3f 4f       	sbci	r19, 0xFF	; 255
    20b6:	24 0f       	add	r18, r20
    20b8:	35 1f       	adc	r19, r21
}
    20ba:	c9 01       	movw	r24, r18
    20bc:	0f 90       	pop	r0
    20be:	0f 90       	pop	r0
    20c0:	cf 91       	pop	r28
    20c2:	df 91       	pop	r29
    20c4:	08 95       	ret

000020c6 <rueckwaerts>:
	else return ((int16_t)(wertOCR1B - STOP ) / ((int16_t)(MAXVORWAERTS - STOP) / 100));
}
int8_t getFahr(void){ return getFahrPrivate(OCR1B); }
int8_t getFahrM(int16_t wert_OCR1B){ return getFahrPrivate(wert_OCR1B); }

void rueckwaerts(int16_t wert){
    20c6:	0f 93       	push	r16
    20c8:	1f 93       	push	r17
    20ca:	18 2f       	mov	r17, r24
    20cc:	09 2f       	mov	r16, r25
	if(OCR1B >= STOP){	// fährt das Fahrzeug vorwaerts?
    20ce:	88 b5       	in	r24, 0x28	; 40
    20d0:	99 b5       	in	r25, 0x29	; 41
    20d2:	8c 5b       	subi	r24, 0xBC	; 188
    20d4:	92 40       	sbci	r25, 0x02	; 2
    20d6:	80 f0       	brcs	.+32     	; 0x20f8 <rueckwaerts+0x32>
		OCR1B = 600;	//Ja, zeige Rueckwaertsfahren an
    20d8:	88 e5       	ldi	r24, 0x58	; 88
    20da:	92 e0       	ldi	r25, 0x02	; 2
    20dc:	99 bd       	out	0x29, r25	; 41
    20de:	88 bd       	out	0x28, r24	; 40
		warte_ms(100);	//warte ms
    20e0:	84 e6       	ldi	r24, 0x64	; 100
    20e2:	90 e0       	ldi	r25, 0x00	; 0
    20e4:	0e 94 48 02 	call	0x490	; 0x490 <warte_ms>
		OCR1B = 700;	//Stop
    20e8:	8c eb       	ldi	r24, 0xBC	; 188
    20ea:	92 e0       	ldi	r25, 0x02	; 2
    20ec:	99 bd       	out	0x29, r25	; 41
    20ee:	88 bd       	out	0x28, r24	; 40
		warte_ms(100);	//warte ms
    20f0:	84 e6       	ldi	r24, 0x64	; 100
    20f2:	90 e0       	ldi	r25, 0x00	; 0
    20f4:	0e 94 48 02 	call	0x490	; 0x490 <warte_ms>
	}
	OCR1B=wert;	// angegebene Geschwindigkeit einstellen
    20f8:	81 2f       	mov	r24, r17
    20fa:	90 2f       	mov	r25, r16
    20fc:	99 bd       	out	0x29, r25	; 41
    20fe:	88 bd       	out	0x28, r24	; 40
}
    2100:	1f 91       	pop	r17
    2102:	0f 91       	pop	r16
    2104:	08 95       	ret

00002106 <fahr>:
}
void initFahr(uint8_t max){  //Festlegung der max Geschwindigkeit
	maxFahr = max;
}

void fahr(int16_t fwert ){  //fwert im gültigen Bereich? 
    2106:	9c 01       	movw	r18, r24
	//MAXRUEWAERTS=400, MAXVORWAERTS=1000, STOP=700
	if ((fwert < 18) && (fwert > -18)) OCR1B = STOP;
    2108:	41 96       	adiw	r24, 0x11	; 17
    210a:	83 97       	sbiw	r24, 0x23	; 35
    210c:	18 f4       	brcc	.+6      	; 0x2114 <fahr+0xe>
    210e:	8c eb       	ldi	r24, 0xBC	; 188
    2110:	92 e0       	ldi	r25, 0x02	; 2
    2112:	11 c0       	rjmp	.+34     	; 0x2136 <fahr+0x30>
    2114:	80 91 49 02 	lds	r24, 0x0249
	else	if ((fwert >= 0) && (fwert <=  maxFahr)) OCR1B = STOP + 3*fwert;
    2118:	37 fd       	sbrc	r19, 7
    211a:	10 c0       	rjmp	.+32     	; 0x213c <fahr+0x36>
    211c:	99 27       	eor	r25, r25
    211e:	87 fd       	sbrc	r24, 7
    2120:	90 95       	com	r25
    2122:	82 17       	cp	r24, r18
    2124:	93 07       	cpc	r25, r19
    2126:	e4 f0       	brlt	.+56     	; 0x2160 <fahr+0x5a>
    2128:	c9 01       	movw	r24, r18
    212a:	88 0f       	add	r24, r24
    212c:	99 1f       	adc	r25, r25
    212e:	82 0f       	add	r24, r18
    2130:	93 1f       	adc	r25, r19
    2132:	84 54       	subi	r24, 0x44	; 68
    2134:	9d 4f       	sbci	r25, 0xFD	; 253
    2136:	99 bd       	out	0x29, r25	; 41
    2138:	88 bd       	out	0x28, r24	; 40
    213a:	08 95       	ret
	else  if ((fwert <  0) && (fwert >= -maxFahr))	rueckwaerts(STOP + 3*fwert);
    213c:	99 27       	eor	r25, r25
    213e:	87 fd       	sbrc	r24, 7
    2140:	90 95       	com	r25
    2142:	90 95       	com	r25
    2144:	81 95       	neg	r24
    2146:	9f 4f       	sbci	r25, 0xFF	; 255
    2148:	28 17       	cp	r18, r24
    214a:	39 07       	cpc	r19, r25
    214c:	4c f0       	brlt	.+18     	; 0x2160 <fahr+0x5a>
    214e:	c9 01       	movw	r24, r18
    2150:	88 0f       	add	r24, r24
    2152:	99 1f       	adc	r25, r25
    2154:	82 0f       	add	r24, r18
    2156:	93 1f       	adc	r25, r19
    2158:	84 54       	subi	r24, 0x44	; 68
    215a:	9d 4f       	sbci	r25, 0xFD	; 253
    215c:	0e 94 63 10 	call	0x20c6	; 0x20c6 <rueckwaerts>
    2160:	08 95       	ret

00002162 <testServo>:
#include "uart.h"
#include "zyklus.h"
#include "df.h"
#include "cc-lib.h"

void testServo(void){
    2162:	df 93       	push	r29
    2164:	cf 93       	push	r28
    2166:	cd b7       	in	r28, 0x3d	; 61
    2168:	de b7       	in	r29, 0x3e	; 62
    216a:	66 97       	sbiw	r28, 0x16	; 22
    216c:	0f b6       	in	r0, 0x3f	; 63
    216e:	f8 94       	cli
    2170:	de bf       	out	0x3e, r29	; 62
    2172:	0f be       	out	0x3f, r0	; 63
    2174:	cd bf       	out	0x3d, r28	; 61

	const char servoText[]="Nur + / - : ";
    2176:	de 01       	movw	r26, r28
    2178:	1a 96       	adiw	r26, 0x0a	; 10
    217a:	ee e7       	ldi	r30, 0x7E	; 126
    217c:	f1 e0       	ldi	r31, 0x01	; 1
    217e:	8d e0       	ldi	r24, 0x0D	; 13
    2180:	01 90       	ld	r0, Z+
    2182:	0d 92       	st	X+, r0
    2184:	81 50       	subi	r24, 0x01	; 1
    2186:	e1 f7       	brne	.-8      	; 0x2180 <testServo+0x1e>
	const char testServoText[]="MaxWert ";
    2188:	de 01       	movw	r26, r28
    218a:	11 96       	adiw	r26, 0x01	; 1
    218c:	eb e8       	ldi	r30, 0x8B	; 139
    218e:	f1 e0       	ldi	r31, 0x01	; 1
    2190:	89 e0       	ldi	r24, 0x09	; 9
    2192:	01 90       	ld	r0, Z+
    2194:	0d 92       	st	X+, r0
    2196:	81 50       	subi	r24, 0x01	; 1
    2198:	e1 f7       	brne	.-8      	; 0x2192 <testServo+0x30>

	//zum bestimmen von Anschlag rechts u. links, sowie geradeaus
	wert   = uart_getc();	// hole von USB ein Zeichen
    219a:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <uart_getc>
    219e:	80 93 47 02 	sts	0x0247, r24
    21a2:	90 93 48 02 	sts	0x0248, r25
	zeichen= (char)wert;
    21a6:	80 93 6e 02 	sts	0x026E, r24
	if(kommand == 0) {
    21aa:	80 91 d0 01 	lds	r24, 0x01D0
    21ae:	90 91 d1 01 	lds	r25, 0x01D1
    21b2:	89 2b       	or	r24, r25
    21b4:	f9 f4       	brne	.+62     	; 0x21f4 <testServo+0x92>
		uart_puts(servoText) ;
    21b6:	ce 01       	movw	r24, r28
    21b8:	0a 96       	adiw	r24, 0x0a	; 10
    21ba:	0e 94 19 02 	call	0x432	; 0x432 <uart_puts>
		itoa(OCR1A,texth,10);
    21be:	8a b5       	in	r24, 0x2a	; 42
    21c0:	9b b5       	in	r25, 0x2b	; 43
    21c2:	61 e5       	ldi	r22, 0x51	; 81
    21c4:	72 e0       	ldi	r23, 0x02	; 2
    21c6:	4a e0       	ldi	r20, 0x0A	; 10
    21c8:	50 e0       	ldi	r21, 0x00	; 0
    21ca:	0e 94 a8 12 	call	0x2550	; 0x2550 <itoa>
		strcat(texth,tab);
    21ce:	81 e5       	ldi	r24, 0x51	; 81
    21d0:	92 e0       	ldi	r25, 0x02	; 2
    21d2:	62 eb       	ldi	r22, 0xB2	; 178
    21d4:	70 e0       	ldi	r23, 0x00	; 0
    21d6:	0e 94 96 12 	call	0x252c	; 0x252c <strcat>
		uart_puts(texth);
    21da:	81 e5       	ldi	r24, 0x51	; 81
    21dc:	92 e0       	ldi	r25, 0x02	; 2
    21de:	0e 94 19 02 	call	0x432	; 0x432 <uart_puts>
		uart_putc('\r');
    21e2:	8d e0       	ldi	r24, 0x0D	; 13
    21e4:	0e 94 07 02 	call	0x40e	; 0x40e <uart_putc>
		kommand = 1;
    21e8:	81 e0       	ldi	r24, 0x01	; 1
    21ea:	90 e0       	ldi	r25, 0x00	; 0
    21ec:	90 93 d1 01 	sts	0x01D1, r25
    21f0:	80 93 d0 01 	sts	0x01D0, r24
	}

	if ( (zeichen == '+') ||  ( zeichen == '-' ) ) {
    21f4:	80 91 6e 02 	lds	r24, 0x026E
    21f8:	8b 32       	cpi	r24, 0x2B	; 43
    21fa:	21 f0       	breq	.+8      	; 0x2204 <testServo+0xa2>
    21fc:	8d 32       	cpi	r24, 0x2D	; 45
    21fe:	09 f0       	breq	.+2      	; 0x2202 <testServo+0xa0>
    2200:	42 c0       	rjmp	.+132    	; 0x2286 <testServo+0x124>
    2202:	12 c0       	rjmp	.+36     	; 0x2228 <testServo+0xc6>

		if ( zeichen == '+' ) {
			if (OCR1A > MAXVOLLRECHTS)
    2204:	8a b5       	in	r24, 0x2a	; 42
    2206:	9b b5       	in	r25, 0x2b	; 43
    2208:	85 5f       	subi	r24, 0xF5	; 245
    220a:	91 40       	sbci	r25, 0x01	; 1
    220c:	30 f0       	brcs	.+12     	; 0x221a <testServo+0xb8>
				OCR1A -= 4;
    220e:	8a b5       	in	r24, 0x2a	; 42
    2210:	9b b5       	in	r25, 0x2b	; 43
    2212:	04 97       	sbiw	r24, 0x04	; 4
    2214:	9b bd       	out	0x2b, r25	; 43
    2216:	8a bd       	out	0x2a, r24	; 42
    2218:	07 c0       	rjmp	.+14     	; 0x2228 <testServo+0xc6>
			else {
				uart_putc('\r');
    221a:	8d e0       	ldi	r24, 0x0D	; 13
    221c:	0e 94 07 02 	call	0x40e	; 0x40e <uart_putc>
				uart_puts(testServoText) ;
    2220:	ce 01       	movw	r24, r28
    2222:	01 96       	adiw	r24, 0x01	; 1
    2224:	0e 94 19 02 	call	0x432	; 0x432 <uart_puts>
			}
		}
		if ( zeichen == '-' ) {
    2228:	80 91 6e 02 	lds	r24, 0x026E
    222c:	8d 32       	cpi	r24, 0x2D	; 45
    222e:	91 f4       	brne	.+36     	; 0x2254 <testServo+0xf2>
			if (OCR1A < MAXVOLLLINKS)
    2230:	8a b5       	in	r24, 0x2a	; 42
    2232:	9b b5       	in	r25, 0x2b	; 43
    2234:	8c 54       	subi	r24, 0x4C	; 76
    2236:	94 40       	sbci	r25, 0x04	; 4
    2238:	30 f4       	brcc	.+12     	; 0x2246 <testServo+0xe4>
				OCR1A += 4;
    223a:	8a b5       	in	r24, 0x2a	; 42
    223c:	9b b5       	in	r25, 0x2b	; 43
    223e:	04 96       	adiw	r24, 0x04	; 4
    2240:	9b bd       	out	0x2b, r25	; 43
    2242:	8a bd       	out	0x2a, r24	; 42
    2244:	07 c0       	rjmp	.+14     	; 0x2254 <testServo+0xf2>
			else {
				uart_putc('\r');
    2246:	8d e0       	ldi	r24, 0x0D	; 13
    2248:	0e 94 07 02 	call	0x40e	; 0x40e <uart_putc>
				uart_puts(testServoText) ;
    224c:	ce 01       	movw	r24, r28
    224e:	01 96       	adiw	r24, 0x01	; 1
    2250:	0e 94 19 02 	call	0x432	; 0x432 <uart_puts>
			}
		}
		uart_puts(servoText) ;
    2254:	ce 01       	movw	r24, r28
    2256:	0a 96       	adiw	r24, 0x0a	; 10
    2258:	0e 94 19 02 	call	0x432	; 0x432 <uart_puts>
		itoa(OCR1A,texth,10);
    225c:	8a b5       	in	r24, 0x2a	; 42
    225e:	9b b5       	in	r25, 0x2b	; 43
    2260:	61 e5       	ldi	r22, 0x51	; 81
    2262:	72 e0       	ldi	r23, 0x02	; 2
    2264:	4a e0       	ldi	r20, 0x0A	; 10
    2266:	50 e0       	ldi	r21, 0x00	; 0
    2268:	0e 94 a8 12 	call	0x2550	; 0x2550 <itoa>
		strcat(texth,tab);
    226c:	81 e5       	ldi	r24, 0x51	; 81
    226e:	92 e0       	ldi	r25, 0x02	; 2
    2270:	62 eb       	ldi	r22, 0xB2	; 178
    2272:	70 e0       	ldi	r23, 0x00	; 0
    2274:	0e 94 96 12 	call	0x252c	; 0x252c <strcat>
		uart_puts(texth);
    2278:	81 e5       	ldi	r24, 0x51	; 81
    227a:	92 e0       	ldi	r25, 0x02	; 2
    227c:	0e 94 19 02 	call	0x432	; 0x432 <uart_puts>
		uart_putc('\r');
    2280:	8d e0       	ldi	r24, 0x0D	; 13
    2282:	0e 94 07 02 	call	0x40e	; 0x40e <uart_putc>
		strcat(texth,tab);
		uart_puts(texth);
		uart_putc('\r');
*/
	}
}
    2286:	66 96       	adiw	r28, 0x16	; 22
    2288:	0f b6       	in	r0, 0x3f	; 63
    228a:	f8 94       	cli
    228c:	de bf       	out	0x3e, r29	; 62
    228e:	0f be       	out	0x3f, r0	; 63
    2290:	cd bf       	out	0x3d, r28	; 61
    2292:	cf 91       	pop	r28
    2294:	df 91       	pop	r29
    2296:	08 95       	ret

00002298 <__udivmodhi4>:
    2298:	aa 1b       	sub	r26, r26
    229a:	bb 1b       	sub	r27, r27
    229c:	51 e1       	ldi	r21, 0x11	; 17
    229e:	07 c0       	rjmp	.+14     	; 0x22ae <__udivmodhi4_ep>

000022a0 <__udivmodhi4_loop>:
    22a0:	aa 1f       	adc	r26, r26
    22a2:	bb 1f       	adc	r27, r27
    22a4:	a6 17       	cp	r26, r22
    22a6:	b7 07       	cpc	r27, r23
    22a8:	10 f0       	brcs	.+4      	; 0x22ae <__udivmodhi4_ep>
    22aa:	a6 1b       	sub	r26, r22
    22ac:	b7 0b       	sbc	r27, r23

000022ae <__udivmodhi4_ep>:
    22ae:	88 1f       	adc	r24, r24
    22b0:	99 1f       	adc	r25, r25
    22b2:	5a 95       	dec	r21
    22b4:	a9 f7       	brne	.-22     	; 0x22a0 <__udivmodhi4_loop>
    22b6:	80 95       	com	r24
    22b8:	90 95       	com	r25
    22ba:	bc 01       	movw	r22, r24
    22bc:	cd 01       	movw	r24, r26
    22be:	08 95       	ret

000022c0 <__divmodhi4>:
    22c0:	97 fb       	bst	r25, 7
    22c2:	09 2e       	mov	r0, r25
    22c4:	07 26       	eor	r0, r23
    22c6:	0a d0       	rcall	.+20     	; 0x22dc <__divmodhi4_neg1>
    22c8:	77 fd       	sbrc	r23, 7
    22ca:	04 d0       	rcall	.+8      	; 0x22d4 <__divmodhi4_neg2>
    22cc:	e5 df       	rcall	.-54     	; 0x2298 <__udivmodhi4>
    22ce:	06 d0       	rcall	.+12     	; 0x22dc <__divmodhi4_neg1>
    22d0:	00 20       	and	r0, r0
    22d2:	1a f4       	brpl	.+6      	; 0x22da <__divmodhi4_exit>

000022d4 <__divmodhi4_neg2>:
    22d4:	70 95       	com	r23
    22d6:	61 95       	neg	r22
    22d8:	7f 4f       	sbci	r23, 0xFF	; 255

000022da <__divmodhi4_exit>:
    22da:	08 95       	ret

000022dc <__divmodhi4_neg1>:
    22dc:	f6 f7       	brtc	.-4      	; 0x22da <__divmodhi4_exit>
    22de:	90 95       	com	r25
    22e0:	81 95       	neg	r24
    22e2:	9f 4f       	sbci	r25, 0xFF	; 255
    22e4:	08 95       	ret

000022e6 <malloc>:
    22e6:	cf 93       	push	r28
    22e8:	df 93       	push	r29
    22ea:	bc 01       	movw	r22, r24
    22ec:	82 30       	cpi	r24, 0x02	; 2
    22ee:	91 05       	cpc	r25, r1
    22f0:	10 f4       	brcc	.+4      	; 0x22f6 <malloc+0x10>
    22f2:	62 e0       	ldi	r22, 0x02	; 2
    22f4:	70 e0       	ldi	r23, 0x00	; 0
    22f6:	a0 91 9c 02 	lds	r26, 0x029C
    22fa:	b0 91 9d 02 	lds	r27, 0x029D
    22fe:	ed 01       	movw	r28, r26
    2300:	e0 e0       	ldi	r30, 0x00	; 0
    2302:	f0 e0       	ldi	r31, 0x00	; 0
    2304:	40 e0       	ldi	r20, 0x00	; 0
    2306:	50 e0       	ldi	r21, 0x00	; 0
    2308:	21 c0       	rjmp	.+66     	; 0x234c <malloc+0x66>
    230a:	88 81       	ld	r24, Y
    230c:	99 81       	ldd	r25, Y+1	; 0x01
    230e:	86 17       	cp	r24, r22
    2310:	97 07       	cpc	r25, r23
    2312:	69 f4       	brne	.+26     	; 0x232e <malloc+0x48>
    2314:	8a 81       	ldd	r24, Y+2	; 0x02
    2316:	9b 81       	ldd	r25, Y+3	; 0x03
    2318:	30 97       	sbiw	r30, 0x00	; 0
    231a:	19 f0       	breq	.+6      	; 0x2322 <malloc+0x3c>
    231c:	93 83       	std	Z+3, r25	; 0x03
    231e:	82 83       	std	Z+2, r24	; 0x02
    2320:	04 c0       	rjmp	.+8      	; 0x232a <malloc+0x44>
    2322:	90 93 9d 02 	sts	0x029D, r25
    2326:	80 93 9c 02 	sts	0x029C, r24
    232a:	fe 01       	movw	r30, r28
    232c:	34 c0       	rjmp	.+104    	; 0x2396 <malloc+0xb0>
    232e:	68 17       	cp	r22, r24
    2330:	79 07       	cpc	r23, r25
    2332:	38 f4       	brcc	.+14     	; 0x2342 <malloc+0x5c>
    2334:	41 15       	cp	r20, r1
    2336:	51 05       	cpc	r21, r1
    2338:	19 f0       	breq	.+6      	; 0x2340 <malloc+0x5a>
    233a:	84 17       	cp	r24, r20
    233c:	95 07       	cpc	r25, r21
    233e:	08 f4       	brcc	.+2      	; 0x2342 <malloc+0x5c>
    2340:	ac 01       	movw	r20, r24
    2342:	fe 01       	movw	r30, r28
    2344:	8a 81       	ldd	r24, Y+2	; 0x02
    2346:	9b 81       	ldd	r25, Y+3	; 0x03
    2348:	9c 01       	movw	r18, r24
    234a:	e9 01       	movw	r28, r18
    234c:	20 97       	sbiw	r28, 0x00	; 0
    234e:	e9 f6       	brne	.-70     	; 0x230a <malloc+0x24>
    2350:	41 15       	cp	r20, r1
    2352:	51 05       	cpc	r21, r1
    2354:	a9 f1       	breq	.+106    	; 0x23c0 <malloc+0xda>
    2356:	ca 01       	movw	r24, r20
    2358:	86 1b       	sub	r24, r22
    235a:	97 0b       	sbc	r25, r23
    235c:	04 97       	sbiw	r24, 0x04	; 4
    235e:	08 f4       	brcc	.+2      	; 0x2362 <malloc+0x7c>
    2360:	ba 01       	movw	r22, r20
    2362:	e0 e0       	ldi	r30, 0x00	; 0
    2364:	f0 e0       	ldi	r31, 0x00	; 0
    2366:	2a c0       	rjmp	.+84     	; 0x23bc <malloc+0xd6>
    2368:	8d 91       	ld	r24, X+
    236a:	9c 91       	ld	r25, X
    236c:	11 97       	sbiw	r26, 0x01	; 1
    236e:	84 17       	cp	r24, r20
    2370:	95 07       	cpc	r25, r21
    2372:	f9 f4       	brne	.+62     	; 0x23b2 <malloc+0xcc>
    2374:	64 17       	cp	r22, r20
    2376:	75 07       	cpc	r23, r21
    2378:	81 f4       	brne	.+32     	; 0x239a <malloc+0xb4>
    237a:	12 96       	adiw	r26, 0x02	; 2
    237c:	8d 91       	ld	r24, X+
    237e:	9c 91       	ld	r25, X
    2380:	13 97       	sbiw	r26, 0x03	; 3
    2382:	30 97       	sbiw	r30, 0x00	; 0
    2384:	19 f0       	breq	.+6      	; 0x238c <malloc+0xa6>
    2386:	93 83       	std	Z+3, r25	; 0x03
    2388:	82 83       	std	Z+2, r24	; 0x02
    238a:	04 c0       	rjmp	.+8      	; 0x2394 <malloc+0xae>
    238c:	90 93 9d 02 	sts	0x029D, r25
    2390:	80 93 9c 02 	sts	0x029C, r24
    2394:	fd 01       	movw	r30, r26
    2396:	32 96       	adiw	r30, 0x02	; 2
    2398:	4f c0       	rjmp	.+158    	; 0x2438 <malloc+0x152>
    239a:	ca 01       	movw	r24, r20
    239c:	86 1b       	sub	r24, r22
    239e:	97 0b       	sbc	r25, r23
    23a0:	fd 01       	movw	r30, r26
    23a2:	e8 0f       	add	r30, r24
    23a4:	f9 1f       	adc	r31, r25
    23a6:	61 93       	st	Z+, r22
    23a8:	71 93       	st	Z+, r23
    23aa:	02 97       	sbiw	r24, 0x02	; 2
    23ac:	8d 93       	st	X+, r24
    23ae:	9c 93       	st	X, r25
    23b0:	43 c0       	rjmp	.+134    	; 0x2438 <malloc+0x152>
    23b2:	fd 01       	movw	r30, r26
    23b4:	82 81       	ldd	r24, Z+2	; 0x02
    23b6:	93 81       	ldd	r25, Z+3	; 0x03
    23b8:	9c 01       	movw	r18, r24
    23ba:	d9 01       	movw	r26, r18
    23bc:	10 97       	sbiw	r26, 0x00	; 0
    23be:	a1 f6       	brne	.-88     	; 0x2368 <malloc+0x82>
    23c0:	80 91 9a 02 	lds	r24, 0x029A
    23c4:	90 91 9b 02 	lds	r25, 0x029B
    23c8:	89 2b       	or	r24, r25
    23ca:	41 f4       	brne	.+16     	; 0x23dc <malloc+0xf6>
    23cc:	80 91 96 01 	lds	r24, 0x0196
    23d0:	90 91 97 01 	lds	r25, 0x0197
    23d4:	90 93 9b 02 	sts	0x029B, r25
    23d8:	80 93 9a 02 	sts	0x029A, r24
    23dc:	40 91 98 01 	lds	r20, 0x0198
    23e0:	50 91 99 01 	lds	r21, 0x0199
    23e4:	41 15       	cp	r20, r1
    23e6:	51 05       	cpc	r21, r1
    23e8:	41 f4       	brne	.+16     	; 0x23fa <malloc+0x114>
    23ea:	4d b7       	in	r20, 0x3d	; 61
    23ec:	5e b7       	in	r21, 0x3e	; 62
    23ee:	80 91 94 01 	lds	r24, 0x0194
    23f2:	90 91 95 01 	lds	r25, 0x0195
    23f6:	48 1b       	sub	r20, r24
    23f8:	59 0b       	sbc	r21, r25
    23fa:	20 91 9a 02 	lds	r18, 0x029A
    23fe:	30 91 9b 02 	lds	r19, 0x029B
    2402:	24 17       	cp	r18, r20
    2404:	35 07       	cpc	r19, r21
    2406:	b0 f4       	brcc	.+44     	; 0x2434 <malloc+0x14e>
    2408:	ca 01       	movw	r24, r20
    240a:	82 1b       	sub	r24, r18
    240c:	93 0b       	sbc	r25, r19
    240e:	86 17       	cp	r24, r22
    2410:	97 07       	cpc	r25, r23
    2412:	80 f0       	brcs	.+32     	; 0x2434 <malloc+0x14e>
    2414:	ab 01       	movw	r20, r22
    2416:	4e 5f       	subi	r20, 0xFE	; 254
    2418:	5f 4f       	sbci	r21, 0xFF	; 255
    241a:	84 17       	cp	r24, r20
    241c:	95 07       	cpc	r25, r21
    241e:	50 f0       	brcs	.+20     	; 0x2434 <malloc+0x14e>
    2420:	42 0f       	add	r20, r18
    2422:	53 1f       	adc	r21, r19
    2424:	50 93 9b 02 	sts	0x029B, r21
    2428:	40 93 9a 02 	sts	0x029A, r20
    242c:	f9 01       	movw	r30, r18
    242e:	61 93       	st	Z+, r22
    2430:	71 93       	st	Z+, r23
    2432:	02 c0       	rjmp	.+4      	; 0x2438 <malloc+0x152>
    2434:	e0 e0       	ldi	r30, 0x00	; 0
    2436:	f0 e0       	ldi	r31, 0x00	; 0
    2438:	cf 01       	movw	r24, r30
    243a:	df 91       	pop	r29
    243c:	cf 91       	pop	r28
    243e:	08 95       	ret

00002440 <free>:
    2440:	cf 93       	push	r28
    2442:	df 93       	push	r29
    2444:	00 97       	sbiw	r24, 0x00	; 0
    2446:	09 f4       	brne	.+2      	; 0x244a <free+0xa>
    2448:	50 c0       	rjmp	.+160    	; 0x24ea <free+0xaa>
    244a:	ec 01       	movw	r28, r24
    244c:	22 97       	sbiw	r28, 0x02	; 2
    244e:	1b 82       	std	Y+3, r1	; 0x03
    2450:	1a 82       	std	Y+2, r1	; 0x02
    2452:	a0 91 9c 02 	lds	r26, 0x029C
    2456:	b0 91 9d 02 	lds	r27, 0x029D
    245a:	10 97       	sbiw	r26, 0x00	; 0
    245c:	09 f1       	breq	.+66     	; 0x24a0 <free+0x60>
    245e:	40 e0       	ldi	r20, 0x00	; 0
    2460:	50 e0       	ldi	r21, 0x00	; 0
    2462:	ac 17       	cp	r26, r28
    2464:	bd 07       	cpc	r27, r29
    2466:	08 f1       	brcs	.+66     	; 0x24aa <free+0x6a>
    2468:	bb 83       	std	Y+3, r27	; 0x03
    246a:	aa 83       	std	Y+2, r26	; 0x02
    246c:	fe 01       	movw	r30, r28
    246e:	21 91       	ld	r18, Z+
    2470:	31 91       	ld	r19, Z+
    2472:	e2 0f       	add	r30, r18
    2474:	f3 1f       	adc	r31, r19
    2476:	ae 17       	cp	r26, r30
    2478:	bf 07       	cpc	r27, r31
    247a:	79 f4       	brne	.+30     	; 0x249a <free+0x5a>
    247c:	8d 91       	ld	r24, X+
    247e:	9c 91       	ld	r25, X
    2480:	11 97       	sbiw	r26, 0x01	; 1
    2482:	28 0f       	add	r18, r24
    2484:	39 1f       	adc	r19, r25
    2486:	2e 5f       	subi	r18, 0xFE	; 254
    2488:	3f 4f       	sbci	r19, 0xFF	; 255
    248a:	39 83       	std	Y+1, r19	; 0x01
    248c:	28 83       	st	Y, r18
    248e:	12 96       	adiw	r26, 0x02	; 2
    2490:	8d 91       	ld	r24, X+
    2492:	9c 91       	ld	r25, X
    2494:	13 97       	sbiw	r26, 0x03	; 3
    2496:	9b 83       	std	Y+3, r25	; 0x03
    2498:	8a 83       	std	Y+2, r24	; 0x02
    249a:	41 15       	cp	r20, r1
    249c:	51 05       	cpc	r21, r1
    249e:	71 f4       	brne	.+28     	; 0x24bc <free+0x7c>
    24a0:	d0 93 9d 02 	sts	0x029D, r29
    24a4:	c0 93 9c 02 	sts	0x029C, r28
    24a8:	20 c0       	rjmp	.+64     	; 0x24ea <free+0xaa>
    24aa:	12 96       	adiw	r26, 0x02	; 2
    24ac:	8d 91       	ld	r24, X+
    24ae:	9c 91       	ld	r25, X
    24b0:	13 97       	sbiw	r26, 0x03	; 3
    24b2:	ad 01       	movw	r20, r26
    24b4:	00 97       	sbiw	r24, 0x00	; 0
    24b6:	11 f0       	breq	.+4      	; 0x24bc <free+0x7c>
    24b8:	dc 01       	movw	r26, r24
    24ba:	d3 cf       	rjmp	.-90     	; 0x2462 <free+0x22>
    24bc:	fa 01       	movw	r30, r20
    24be:	d3 83       	std	Z+3, r29	; 0x03
    24c0:	c2 83       	std	Z+2, r28	; 0x02
    24c2:	21 91       	ld	r18, Z+
    24c4:	31 91       	ld	r19, Z+
    24c6:	e2 0f       	add	r30, r18
    24c8:	f3 1f       	adc	r31, r19
    24ca:	ce 17       	cp	r28, r30
    24cc:	df 07       	cpc	r29, r31
    24ce:	69 f4       	brne	.+26     	; 0x24ea <free+0xaa>
    24d0:	88 81       	ld	r24, Y
    24d2:	99 81       	ldd	r25, Y+1	; 0x01
    24d4:	28 0f       	add	r18, r24
    24d6:	39 1f       	adc	r19, r25
    24d8:	2e 5f       	subi	r18, 0xFE	; 254
    24da:	3f 4f       	sbci	r19, 0xFF	; 255
    24dc:	fa 01       	movw	r30, r20
    24de:	31 83       	std	Z+1, r19	; 0x01
    24e0:	20 83       	st	Z, r18
    24e2:	8a 81       	ldd	r24, Y+2	; 0x02
    24e4:	9b 81       	ldd	r25, Y+3	; 0x03
    24e6:	93 83       	std	Z+3, r25	; 0x03
    24e8:	82 83       	std	Z+2, r24	; 0x02
    24ea:	df 91       	pop	r29
    24ec:	cf 91       	pop	r28
    24ee:	08 95       	ret

000024f0 <atoi>:
    24f0:	fc 01       	movw	r30, r24
    24f2:	88 27       	eor	r24, r24
    24f4:	99 27       	eor	r25, r25
    24f6:	e8 94       	clt
    24f8:	21 91       	ld	r18, Z+
    24fa:	20 32       	cpi	r18, 0x20	; 32
    24fc:	e9 f3       	breq	.-6      	; 0x24f8 <atoi+0x8>
    24fe:	29 30       	cpi	r18, 0x09	; 9
    2500:	10 f0       	brcs	.+4      	; 0x2506 <atoi+0x16>
    2502:	2e 30       	cpi	r18, 0x0E	; 14
    2504:	c8 f3       	brcs	.-14     	; 0x24f8 <atoi+0x8>
    2506:	2b 32       	cpi	r18, 0x2B	; 43
    2508:	41 f0       	breq	.+16     	; 0x251a <atoi+0x2a>
    250a:	2d 32       	cpi	r18, 0x2D	; 45
    250c:	39 f4       	brne	.+14     	; 0x251c <atoi+0x2c>
    250e:	68 94       	set
    2510:	04 c0       	rjmp	.+8      	; 0x251a <atoi+0x2a>
    2512:	0e 94 c9 12 	call	0x2592	; 0x2592 <__mulhi_const_10>
    2516:	82 0f       	add	r24, r18
    2518:	91 1d       	adc	r25, r1
    251a:	21 91       	ld	r18, Z+
    251c:	20 53       	subi	r18, 0x30	; 48
    251e:	2a 30       	cpi	r18, 0x0A	; 10
    2520:	c0 f3       	brcs	.-16     	; 0x2512 <atoi+0x22>
    2522:	1e f4       	brtc	.+6      	; 0x252a <atoi+0x3a>
    2524:	90 95       	com	r25
    2526:	81 95       	neg	r24
    2528:	9f 4f       	sbci	r25, 0xFF	; 255
    252a:	08 95       	ret

0000252c <strcat>:
    252c:	fb 01       	movw	r30, r22
    252e:	dc 01       	movw	r26, r24
    2530:	0d 90       	ld	r0, X+
    2532:	00 20       	and	r0, r0
    2534:	e9 f7       	brne	.-6      	; 0x2530 <strcat+0x4>
    2536:	11 97       	sbiw	r26, 0x01	; 1
    2538:	01 90       	ld	r0, Z+
    253a:	0d 92       	st	X+, r0
    253c:	00 20       	and	r0, r0
    253e:	e1 f7       	brne	.-8      	; 0x2538 <strcat+0xc>
    2540:	08 95       	ret

00002542 <strcpy>:
    2542:	fb 01       	movw	r30, r22
    2544:	dc 01       	movw	r26, r24
    2546:	01 90       	ld	r0, Z+
    2548:	0d 92       	st	X+, r0
    254a:	00 20       	and	r0, r0
    254c:	e1 f7       	brne	.-8      	; 0x2546 <strcpy+0x4>
    254e:	08 95       	ret

00002550 <itoa>:
    2550:	fb 01       	movw	r30, r22
    2552:	9f 01       	movw	r18, r30
    2554:	e8 94       	clt
    2556:	42 30       	cpi	r20, 0x02	; 2
    2558:	c4 f0       	brlt	.+48     	; 0x258a <itoa+0x3a>
    255a:	45 32       	cpi	r20, 0x25	; 37
    255c:	b4 f4       	brge	.+44     	; 0x258a <itoa+0x3a>
    255e:	4a 30       	cpi	r20, 0x0A	; 10
    2560:	29 f4       	brne	.+10     	; 0x256c <itoa+0x1c>
    2562:	97 fb       	bst	r25, 7
    2564:	1e f4       	brtc	.+6      	; 0x256c <itoa+0x1c>
    2566:	90 95       	com	r25
    2568:	81 95       	neg	r24
    256a:	9f 4f       	sbci	r25, 0xFF	; 255
    256c:	64 2f       	mov	r22, r20
    256e:	77 27       	eor	r23, r23
    2570:	0e 94 4c 11 	call	0x2298	; 0x2298 <__udivmodhi4>
    2574:	80 5d       	subi	r24, 0xD0	; 208
    2576:	8a 33       	cpi	r24, 0x3A	; 58
    2578:	0c f0       	brlt	.+2      	; 0x257c <itoa+0x2c>
    257a:	89 5d       	subi	r24, 0xD9	; 217
    257c:	81 93       	st	Z+, r24
    257e:	cb 01       	movw	r24, r22
    2580:	00 97       	sbiw	r24, 0x00	; 0
    2582:	a1 f7       	brne	.-24     	; 0x256c <itoa+0x1c>
    2584:	16 f4       	brtc	.+4      	; 0x258a <itoa+0x3a>
    2586:	5d e2       	ldi	r21, 0x2D	; 45
    2588:	51 93       	st	Z+, r21
    258a:	10 82       	st	Z, r1
    258c:	c9 01       	movw	r24, r18
    258e:	0c 94 e6 12 	jmp	0x25cc	; 0x25cc <strrev>

00002592 <__mulhi_const_10>:
    2592:	7a e0       	ldi	r23, 0x0A	; 10
    2594:	97 9f       	mul	r25, r23
    2596:	90 2d       	mov	r25, r0
    2598:	87 9f       	mul	r24, r23
    259a:	80 2d       	mov	r24, r0
    259c:	91 0d       	add	r25, r1
    259e:	11 24       	eor	r1, r1
    25a0:	08 95       	ret

000025a2 <__eerd_byte_m32>:
    25a2:	e1 99       	sbic	0x1c, 1	; 28
    25a4:	fe cf       	rjmp	.-4      	; 0x25a2 <__eerd_byte_m32>
    25a6:	9f bb       	out	0x1f, r25	; 31
    25a8:	8e bb       	out	0x1e, r24	; 30
    25aa:	e0 9a       	sbi	0x1c, 0	; 28
    25ac:	99 27       	eor	r25, r25
    25ae:	8d b3       	in	r24, 0x1d	; 29
    25b0:	08 95       	ret

000025b2 <__eewr_byte_m32>:
    25b2:	26 2f       	mov	r18, r22

000025b4 <__eewr_r18_m32>:
    25b4:	e1 99       	sbic	0x1c, 1	; 28
    25b6:	fe cf       	rjmp	.-4      	; 0x25b4 <__eewr_r18_m32>
    25b8:	9f bb       	out	0x1f, r25	; 31
    25ba:	8e bb       	out	0x1e, r24	; 30
    25bc:	2d bb       	out	0x1d, r18	; 29
    25be:	0f b6       	in	r0, 0x3f	; 63
    25c0:	f8 94       	cli
    25c2:	e2 9a       	sbi	0x1c, 2	; 28
    25c4:	e1 9a       	sbi	0x1c, 1	; 28
    25c6:	0f be       	out	0x3f, r0	; 63
    25c8:	01 96       	adiw	r24, 0x01	; 1
    25ca:	08 95       	ret

000025cc <strrev>:
    25cc:	dc 01       	movw	r26, r24
    25ce:	fc 01       	movw	r30, r24
    25d0:	67 2f       	mov	r22, r23
    25d2:	71 91       	ld	r23, Z+
    25d4:	77 23       	and	r23, r23
    25d6:	e1 f7       	brne	.-8      	; 0x25d0 <strrev+0x4>
    25d8:	32 97       	sbiw	r30, 0x02	; 2
    25da:	04 c0       	rjmp	.+8      	; 0x25e4 <strrev+0x18>
    25dc:	7c 91       	ld	r23, X
    25de:	6d 93       	st	X+, r22
    25e0:	70 83       	st	Z, r23
    25e2:	62 91       	ld	r22, -Z
    25e4:	ae 17       	cp	r26, r30
    25e6:	bf 07       	cpc	r27, r31
    25e8:	c8 f3       	brcs	.-14     	; 0x25dc <strrev+0x10>
    25ea:	08 95       	ret

000025ec <_exit>:
    25ec:	f8 94       	cli

000025ee <__stop_program>:
    25ee:	ff cf       	rjmp	.-2      	; 0x25ee <__stop_program>
